//
//  ItemsViewController.m
//  RoommateApp
//
//  Created by Philip Nagel on 5/17/21.
//

// Test Everything

#import "UIImageView+Letters.h"

#import "SceneDelegate.h"
#import "AppDelegate.h"
#import "TasksViewController.h"
#import "InitialNavigationViewController.h"

#import "MainCell.h"
#import "SideBarCell.h"

#import "GeneralObject.h"
#import "GetDataObject.h"
#import "SetDataObject.h"
#import "DeleteDataObject.h"
#import "PushObject.h"
#import "NotificationsObject.h"
#import "HomesViewControllerObject.h"
#import "SettingsObject.h"
#import "CompleteUncompleteObject.h"
#import "BoolDataObject.h"
#import "DisplayTasksObject.h"
#import "LightDarkModeObject.h"

#import "AlertView.h"
#import "TutorialView.h"
#import "PopupCompleteView.h"

#import <LocalAuthentication/LocalAuthentication.h>
#import <EventKit/EventKit.h>
//#import <AdSupport/AdSupport.h>
//#import <AdServices/AdServices.h>
//#import <iAd/iAd.h>

@interface TasksViewController () {
    
    AlertView *alertView;
    
    MRProgressOverlayView *progressView;
//    MRProgressOverlayView *progressViewNo1;
    
    NSMutableDictionary *itemOccurrencesDict;
    NSMutableDictionary *itemOccurrencesDictNo2;
    NSMutableDictionary *itemOccurrencesDictNo3;
    
    NSMutableDictionary *itemDict;
    NSMutableDictionary *itemDictNo2;
    NSMutableDictionary *itemDictNo3;
    
    NSMutableDictionary *dataDisplayDict;
    NSMutableDictionary *dataDisplayDictNo2;
    NSMutableDictionary *dataDisplayDictNo3;
    
    NSMutableDictionary *dataDisplayAmountDict;
    NSMutableDictionary *dataDisplayAmountDictNo1;
    NSMutableDictionary *dataDisplayAmountDictNo2;
    NSMutableDictionary *dataDisplayAmountDictNo3;
    
    NSMutableDictionary *choreDict;
    NSMutableDictionary *expenseDict;
    NSMutableDictionary *userDict;
    NSMutableDictionary *folderDict;
    NSMutableDictionary *taskListDict;
    NSMutableDictionary *taskListDictNo1;
    NSMutableDictionary *sectionDict;
    NSMutableDictionary *templateDict;
    NSMutableDictionary *draftDict;
    
    NSMutableArray *homeMembersArray;
    NSMutableArray *homeKeysArray;
    NSMutableDictionary *homeDict;
    NSMutableDictionary *homeKeysDict;
    NSMutableDictionary *homeMembersUnclaimedDict;
    NSMutableDictionary *homeMembersDict;
    NSMutableDictionary *notificationSettingsDict;
    NSMutableDictionary *topicDict;
    NSMutableDictionary *calendarSettingsDict;
    NSMutableDictionary *promotionalCode_CodeGivenToOthers_Dict;
    NSMutableDictionary *promotionalCode_CodeUsedByMe_Dict;
    
    UIActivityIndicatorView *activityControl;
    UIRefreshControl *refreshControl;
    
    NSArray *keyArray;
    NSArray *keyArrayNo2;
    NSArray *keyArrayNo3;
    
    NSMutableArray *dataDisplaySectionsArray;
    NSMutableArray *dataDisplaySectionsArrayNo2;
    NSMutableArray *dataDisplaySectionsArrayNo3;
    NSMutableArray *sideBarSectionsArray;
    NSArray *defaultCategoryNameArray;
    NSArray *defaultCategoryImageArray;
    NSArray *defaultCategoryIDArray;
    
    NSMutableArray *sideBarCategorySectionArrayOriginal;
    NSMutableArray *sideBarCategorySectionArrayAltered;
    
    BOOL EverythingIsThere;
    BOOL FeedbackButtonClicked;
    BOOL SideBarDisplayed;
    BOOL SelectClicked;
    BOOL PremiumSubscriptionCancelled;
    BOOL DisplayUpgradePremiumView;
    BOOL PromoCodeNotRedeemed;
    BOOL QueryFirstTime;
    BOOL OriginalDataStored;
    BOOL DisplayDisplayLog;
    
    NSString *homeID;
    NSString *itemType;
    NSString *itemTypeNo2;
    NSString *itemTypeNo3;
    NSString *itemTypeCollection;
    NSString *unreadNotificationsCount;
    NSMutableDictionary *unreadActivityDict;
    
    NSMutableArray *requestsArray;
    NSMutableDictionary *pinnedDict;
    NSMutableDictionary *selectedItemsDict;
    NSMutableDictionary *selectedSectionsDict;
    
    UIView *settingsOverlayView;
    UIView *homeMembersOverlayView;
    UIView *notificationsOverlayView;
    UIView *calendarOverlayView;
    UIView *searchOverlayView;
    UIView *activityhOverlayView;
    UIView *tapGestureSideBarCustomScrollView;
    
    UIButton *selectedDoneButton;
    UIView *selectedDoneButtonOverlayView;
    UIButton *selectedSelectDeselectAllButton;
    UIView *selectedSelectDeselectAllButtonOverlayView;
    UILabel *selectedAmountLabel;
    
    NSMutableDictionary *cellHeightsDicts;
    
    NSMutableDictionary *premiumPlanPricesDict;
    NSMutableDictionary *premiumPlanExpensivePricesDict;
    NSMutableDictionary *premiumPlanPricesDiscountDict;
    NSMutableDictionary *premiumPlanPricesNoFreeTrialDict;
    NSMutableArray *premiumPlanProductsArray;
    
    float mainTableViewCellHeight;
    float mainTableViewSectionHeight;
    
    int getStartedSection;
    int premiumSection;
    int generalSection;
    int groupSection;
    int usersSection;
    int tagsSection;
    int colorsSection;
    int folderSection;
    
    int folderOriginalSection;
    int taskListOriginalSection;
    int sectionOriginalSection;
    
    NSMutableArray *chosenItemAssignedTo;
    NSMutableArray *chosenItemAssignedToUsername;
    NSString *chosenItemAssignedToNewHomeMembers;
    NSString *chosenItemRepeats;
    NSString *chosenItemDays;
    NSString *chosenItemTime;
    NSString *chosenItemTakeTurns;
    NSString *chosenItemDueDate;
    NSMutableDictionary *chosenItemReminderDict;
    NSString *chosenItemPriority;
    NSMutableDictionary *chosenItemCostPerPerson;
    NSMutableDictionary *chosenItemListItems;
    
    NSString *chosenItemUniqueID;
    NSString *chosenItemID;
    NSString *chosenItemOccurrenceID;
    NSString *chosenItemDatePosted;
    
    NSString *localCurrencyDecimalSeparatorSymbol;
    NSString *localCurrencyNumberSeparatorSymbol;
    
    CGRect keyboardFrame;
    BOOL AddTaskShowing;
    
    UIView *backDropView;
    
    NSManagedObjectContext *managedObjectContext;
    
    TutorialView *addTaskTutorialView;
    TutorialView *sideBarTutorialView;
    
}

@end

@import EventKit;
@import InstantSearch;
@import InstantSearchClient;

@implementation TasksViewController

#pragma mark - System Methods

- (void)scanReceiptLine {
    VNDocumentCameraViewController *documentCameraVC = [VNDocumentCameraViewController new];
    documentCameraVC.delegate = self;
    [self presentViewController:documentCameraVC animated:YES completion:nil];
}

// VNDocumentCameraViewControllerDelegate method
- (void)documentCameraViewController:(VNDocumentCameraViewController *)controller didFinishWithScan:(VNDocumentCameraScan *)scan {
    [controller dismissViewControllerAnimated:YES completion:nil];
    
    // Extract the scanned image
    UIImage *scannedImage = [scan imageOfPageAtIndex:0];
    
    // Perform text recognition
    [self recognizeTextOnImage:scannedImage];
}

- (void)documentCameraViewController:(VNDocumentCameraViewController *)controller didFailWithError:(NSError *)error {
    NSLog(@"Document camera error: %@", error);
    [controller dismissViewControllerAnimated:YES completion:nil];
}

- (void)documentCameraViewControllerDidCancel:(VNDocumentCameraViewController *)controller {
    [controller dismissViewControllerAnimated:YES completion:nil];
}

- (void)recognizeTextOnImage:(UIImage *)image {
    VNRecognizeTextRequest *request = [[VNRecognizeTextRequest alloc] initWithCompletionHandler:^(VNRequest * _Nonnull request, NSError * _Nullable error) {
        if (error) {
            NSLog(@"Text recognition error: %@", error);
            return;
        }
        
        NSArray<VNRecognizedTextObservation *> *observations = request.results;
        
        NSMutableString *currentItemName = [NSMutableString new];
        NSMutableString *currentPrice = [NSMutableString new];
        CGFloat previousXMax = 0.0;
        
        for (VNRecognizedTextObservation *observation in observations) {
            NSUInteger index = [observations indexOfObject:observation];
            for (VNRecognizedText *text in [observation topCandidates:index]) {
                CGRect boundingBox = observation.boundingBox;
                
                if (boundingBox.origin.x - previousXMax < 20.0) {
                    // Words are close, potentially forming an item-name-price pair
                    [currentItemName appendString:text.string];
                } else {
                    // Words are separated, potentially the start of a new item
                    if (currentItemName.length > 0 && currentPrice.length > 0) {
                        NSLog(@"Item Name: %@", currentItemName);
                        NSLog(@"Price: %@", currentPrice);
                    }
                    currentItemName = [NSMutableString stringWithString:text.string];
                }
                
                previousXMax = CGRectGetMaxX(boundingBox);
            }
        }
        
        // Process the last potential item
        if (currentItemName.length > 0 && currentPrice.length > 0) {
            NSLog(@"Item Name: %@", currentItemName);
            NSLog(@"Price: %@", currentPrice);
        }
    }];
    
    VNImageRequestHandler *handler = [[VNImageRequestHandler alloc] initWithCGImage:image.CGImage options:@{}];
    
    NSError *error = nil;
    [handler performRequests:@[request] error:&error];
    
    if (error) {
        NSLog(@"Vision request error: %@", error);
    }
}

- (void)triggerCloudFunctionForPushNotifications {
    NSString *functionURL = @"YOUR_CLOUD_FUNCTION_URL"; // Replace with your Cloud Function URL
    
    NSURL *url = [NSURL URLWithString:functionURL];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.HTTPMethod = @"POST";
    
    // Set headers if needed
    // [request addValue:@"Bearer YOUR_ACCESS_TOKEN" forHTTPHeaderField:@"Authorization"];
    
    NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        if (error) {
            NSLog(@"Error sending HTTP request: %@", error);
            return;
        }
        
        // Handle the response if needed
        NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
        NSLog(@"Response: %@", responseString);
    }];
    
    [task resume];
}

-(void)SetDataTaskOccurrences {
    
    FIRFirestore *defaultFirestore = [FIRFirestore firestore];
    
    [[defaultFirestore collectionWithPath:@"Homes"] getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot, NSError * _Nullable error) {
        
        for (FIRDocumentSnapshot *doc in snapshot.documents) {
            
            NSString *homeID = doc.data[@"HomeID"];
            
            [[[[defaultFirestore collectionWithPath:@"Homes"] documentWithPath:homeID] collectionWithPath:@"Lists"] getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot, NSError * _Nullable error) {
                
                for (FIRDocumentSnapshot *doc in snapshot.documents) {
                    
                    NSString *itemID = doc.data[@"ItemID"];
                    
                    [[[[[[defaultFirestore collectionWithPath:@"Homes"] documentWithPath:homeID] collectionWithPath:@"Lists"] documentWithPath:itemID] collectionWithPath:@"Occurrences"] getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot, NSError * _Nullable error) {
                        
                        for (FIRDocumentSnapshot *doc in snapshot.documents) {
                            
                            NSString *itemOccurrenceID = doc.data[@"ItemOccurrenceID"];
                            
                            [[[[[defaultFirestore collectionWithPath:@"Homes"] documentWithPath:homeID] collectionWithPath:@"ListOccurrences"] documentWithPath:itemOccurrenceID] setData:doc.data completion:^(NSError * _Nullable error) {
                                
                            }];
                            
                        }
                        
                    }];
                    
                }
                
            }];
            
        }
        
    }];
    
}

-(void)OneCollectionAndDocumentQueries:(NSDictionary *)queryDict key:(NSString *)key {
    
    FIRFirestore *defaultFirestore = [FIRFirestore firestore];
    
    NSString *collectionNo1 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 0 ? queryDict[@"Collections"][0] : @"xxx";
    NSString *documentNo1 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 0 ? queryDict[@"Documents"][0] : @"xxx";
    NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
    
    NSString *queryType = queryDict[@"Type"] ? queryDict[@"Type"] : @"xxx";
    
    if ([queryType containsString:@"Set;"] && ([queryType containsString:@"Merge"] == NO || [queryType containsString:@"Merge:NO"] == YES)) {
       
        [[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] setData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Set;"] && [queryType containsString:@"Merge:YES"] == YES) {
       
        [[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] setData:setDataDict merge:YES completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"UpdateData;"]) {
       
        [[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] updateData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Delete;"]) {
       
        [[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] deleteDocumentWithCompletion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    }
    
}

-(void)TwoCollectionAndDocumentQueries:(NSDictionary *)queryDict key:(NSString *)key {
    
    FIRFirestore *defaultFirestore = [FIRFirestore firestore];
    
    NSString *collectionNo1 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 0 ? queryDict[@"Collections"][0] : @"xxx";
    NSString *documentNo1 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 0 ? queryDict[@"Documents"][0] : @"xxx";
    NSString *collectionNo2 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 1 ? queryDict[@"Collections"][1] : @"xxx";
    NSString *documentNo2 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 1 ? queryDict[@"Documents"][1] : @"xxx";
    NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
    
    NSString *queryType = queryDict[@"Type"] ? queryDict[@"Type"] : @"xxx";
   
    if ([queryType containsString:@"Set;"] && ([queryType containsString:@"Merge"] == NO || [queryType containsString:@"Merge:NO"] == YES)) {
        
        [[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] setData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Set;"] && [queryType containsString:@"Merge:YES"] == YES) {
        
        [[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] setData:setDataDict merge:YES completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"UpdateData;"]) {
        
        [[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] updateData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Delete;"]) {
        
        [[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] deleteDocumentWithCompletion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    }
    
}

-(void)ThreeCollectionAndDocumentQueries:(NSDictionary *)queryDict key:(NSString *)key {
    
    FIRFirestore *defaultFirestore = [FIRFirestore firestore];
    
    NSString *collectionNo1 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 0 ? queryDict[@"Collections"][0] : @"xxx";
    NSString *documentNo1 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 0 ? queryDict[@"Documents"][0] : @"xxx";
    NSString *collectionNo2 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 1 ? queryDict[@"Collections"][1] : @"xxx";
    NSString *documentNo2 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 1 ? queryDict[@"Documents"][1] : @"xxx";
    NSString *collectionNo3 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 2 ? queryDict[@"Collections"][2] : @"xxx";
    NSString *documentNo3 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 2 ? queryDict[@"Documents"][2] : @"xxx";
    NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
    
    NSString *queryType = queryDict[@"Type"] ? queryDict[@"Type"] : @"xxx";
    
    if ([queryType containsString:@"Set;"] && ([queryType containsString:@"Merge"] == NO || [queryType containsString:@"Merge:NO"] == YES)) {
        
        [[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] setData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Set;"] && [queryType containsString:@"Merge:YES"] == YES) {
        
        [[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] setData:setDataDict merge:YES completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"UpdateData;"]) {
        
        [[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] updateData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Delete;"]) {
        
        [[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] deleteDocumentWithCompletion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    }
    
}

-(void)FourCollectionAndDocumentQueries:(NSDictionary *)queryDict key:(NSString *)key {
    
    FIRFirestore *defaultFirestore = [FIRFirestore firestore];
    
    NSString *collectionNo1 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 0 ? queryDict[@"Collections"][0] : @"xxx";
    NSString *documentNo1 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 0 ? queryDict[@"Documents"][0] : @"xxx";
    NSString *collectionNo2 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 1 ? queryDict[@"Collections"][1] : @"xxx";
    NSString *documentNo2 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 1 ? queryDict[@"Documents"][1] : @"xxx";
    NSString *collectionNo3 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 2 ? queryDict[@"Collections"][2] : @"xxx";
    NSString *documentNo3 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 2 ? queryDict[@"Documents"][2] : @"xxx";
    NSString *collectionNo4 = queryDict[@"Collections"] && [(NSArray *)queryDict[@"Collections"] count] > 3 ? queryDict[@"Collections"][3] : @"xxx";
    NSString *documentNo4 = queryDict[@"Documents"] && [(NSArray *)queryDict[@"Documents"] count] > 3 ? queryDict[@"Documents"][3] : @"xxx";
    NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
    
    NSString *queryType = queryDict[@"Type"] ? queryDict[@"Type"] : @"xxx";
    
    if ([queryType containsString:@"Set;"] && ([queryType containsString:@"Merge"] == NO || [queryType containsString:@"Merge:NO"] == YES)) {
        
        [[[[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] collectionWithPath:collectionNo4] documentWithPath:documentNo4] setData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Set;"] && [queryType containsString:@"Merge:YES"] == YES) {
        
        [[[[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] collectionWithPath:collectionNo4] documentWithPath:documentNo4] setData:setDataDict merge:YES completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"UpdateData;"]) {
        
        [[[[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] collectionWithPath:collectionNo4] documentWithPath:documentNo4] updateData:setDataDict completion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    } else if ([queryType containsString:@"Delete;"]) {
        
        [[[[[[[[[defaultFirestore collectionWithPath:collectionNo1] documentWithPath:documentNo1] collectionWithPath:collectionNo2] documentWithPath:documentNo2] collectionWithPath:collectionNo3] documentWithPath:documentNo3] collectionWithPath:collectionNo4] documentWithPath:documentNo4] deleteDocumentWithCompletion:^(NSError * _Nullable error) {
            [[[GeneralObject alloc] init] RemoveQueryToDefaults:key];
        }];
        
    }
    
}

-(void)GetQueuedQueries {
    
    NSMutableDictionary *queuedQueries = [[NSUserDefaults standardUserDefaults] objectForKey:@"QueuedQueries"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"QueuedQueries"] : [NSMutableDictionary dictionary];
    
    if ([[queuedQueries allKeys] count] > 9) {
        queuedQueries = [NSMutableDictionary dictionary];
        [[NSUserDefaults standardUserDefaults] setObject:queuedQueries forKey:@"QueuedQueries"];
    }
    
    for (NSString *key in [queuedQueries allKeys]) {
        
        NSDictionary *queryDict = queuedQueries[key];
        
        if (queryDict[@"PushNotification"]) {
            
            NSMutableArray *notificationUsers = queryDict[@"NotificationUsers"] ? [queryDict[@"NotificationUsers"] mutableCopy] : [NSMutableArray array];
            NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
            NSMutableDictionary *notificationSettings = queryDict[@"NotificationSettings"] ? queryDict[@"NotificationSettings"] : [NSMutableDictionary dictionary];
            NSString *notificationTitle = queryDict[@"NotificationTitle"] ? queryDict[@"NotificationTitle"] : @"xxx";
            NSString *notificationBody = queryDict[@"NotificationBody"] ? queryDict[@"NotificationBody"] : @"xxx";
            NSString *itemType = queryDict[@"ItemType"] ? queryDict[@"ItemType"] : @"xxx";
            NSString *notificationType = queryDict[@"NotificationType"] ? queryDict[@"NotificationType"] : @"xxx";
            
            [[[NotificationsObject alloc] init] SendPushNotificationGroup:notificationUsers notificationTitle:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 dataDict:setDataDict notificationSettingsDict:notificationSettings notificationItemType:itemType notificationType:notificationType completionHandler:^(BOOL finished) {
                
            }];
            
        } else if (queryDict[@"SilentNotification"]) {
            
            NSMutableArray *notificationUsers = queryDict[@"NotificationUsers"] ? [queryDict[@"NotificationUsers"] mutableCopy] : [NSMutableArray array];
            NSMutableDictionary *setDataDict = queryDict[@"SetData"] ? queryDict[@"SetData"] : [NSMutableDictionary dictionary];
            NSMutableDictionary *notificationSettings = queryDict[@"NotificationSettings"] ? queryDict[@"NotificationSettings"] : [NSMutableDictionary dictionary];

            [[[NotificationsObject alloc] init] SendSilentNotificationGroup:notificationUsers dataDict:setDataDict notificationSettingsDict:notificationSettings completionHandler:^(BOOL finished) {
                
            }];
            
        } else if ([(NSArray *)queryDict[@"Collections"] count] == 1 && [(NSArray *)queryDict[@"Documents"] count] == 1) {
            
            [self OneCollectionAndDocumentQueries:queryDict key:key];
            
        } else if ([(NSArray *)queryDict[@"Collections"] count] == 2 && [(NSArray *)queryDict[@"Documents"] count] == 2) {
            
            [self TwoCollectionAndDocumentQueries:queryDict key:key];
            
        } else if ([(NSArray *)queryDict[@"Collections"] count] == 3 && [(NSArray *)queryDict[@"Documents"] count] == 3) {
            
            [self ThreeCollectionAndDocumentQueries:queryDict key:key];
            
        } else if ([(NSArray *)queryDict[@"Collections"] count] == 4 && [(NSArray *)queryDict[@"Documents"] count] == 4) {
            
            [self FourCollectionAndDocumentQueries:queryDict key:key];
            
        }
        
    }
    
}

#pragma mark

- (void)viewDidLoad {
    [super viewDidLoad];

//    NSArray *arr = @[@"A", @"B", @"C", @"D", @"E", @"F", @"G", @"H", @"I"];
//    
//    for (NSString *key in arr) {
//        
//        for (int i=0 ; i<26 ; i++) {
//            
//            NSString *keyToUse = [NSString stringWithFormat:@"%@%@", key, [[[GeneralObject alloc] init] GenerateRandomSmallNumberIntoString:0000 upperBound:9999]];
//            
//            FIRFirestore *defaultFirestore = [FIRFirestore firestore];
//            [[[defaultFirestore collectionWithPath:@"InvitationCodes"] documentWithPath:keyToUse] setData:@{@"InvitationCode" : keyToUse, @"InvitationCodeUsed" : @"No"} completion:^(NSError * _Nullable error) {
//
//            }];
//            
//        }
//        
//    }
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"ViewDidLoadShouldStart"] isEqualToString:@"Yes"] || [[[NSUserDefaults standardUserDefaults] objectForKey:@"ViewDidLoadShouldStartNo1"] isEqualToString:@"Yes"]) {
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"ViewDidLoadShouldStart"];
        
        [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.4)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
        
        
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
//        [self Analytics];
//        
//        NSLog(@"ViewHomeID: %@", [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"]);
//        
//        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"AppCrashed"];
//        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"AppCrashedReported"];
//
//        [[UNUserNotificationCenter currentNotificationCenter] getPendingNotificationRequestsWithCompletionHandler:^(NSArray<UNNotificationRequest *> * _Nonnull requests) {
//            
//            for (UNNotificationRequest *notificationRequest in requests) {
//                
//                NSLog(@"ViewDidLoad requests:123 \n--\n--\n--%@\n--%@\n--%@\n--%@--\n--\n--", notificationRequest.content.title, notificationRequest.content.body, notificationRequest.identifier, notificationRequest.trigger);
//               
//              }
//            
//        }];
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        
        
        DisplayDisplayLog = NO;
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [self DisplayDropDownAlertView:0];
            [self FetchAvailableProducts];
            
            [[[SetDataObject alloc] init] SetDataCrash:^(BOOL finished) {
                
            }];
            
        });
        
        
        
        [self InitMethod];
        
        [self TapGestures];
        
        [self NSNotificationObservers];
        
        [self KeyboardNSNotifications];
        
        [self ViewDidLoad_SetNSUserDefaultData];
        
        
        
        if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"QueryFirstTime"] isEqualToString:@"Yes"]) {
            
            [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.6)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
            
            [self QueryInitialData:^(BOOL finished) {
                
                [self ViewDidLoad_CompletionBlock];
                
                [[[GeneralObject alloc] init] DisplayWeDivvyPremiumPage:^(BOOL finished, BOOL DisplayDiscount) {
                    
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:NO comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Discount" selectedSlide:@"" promoCodeID:@"" premiumPlanProductsArray:self->premiumPlanProductsArray premiumPlanPricesDict:self->premiumPlanPricesDict premiumPlanExpensivePricesDict:self->premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:self->premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:self->premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                        
                    });
                    
                }];
                
            }];
            
        }
        
    }
    
}

-(void)viewDidLayoutSubviews {
    
    [[self navigationController] setNavigationBarHidden:YES animated:NO];
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    CGFloat bottomPadding = [[[GeneralObject alloc] init] GetBottomPaddingHeight];
    
    
    
    
    
    
    
    
    [self GenerateTopViewFrames:width height:height];
    
    [self GenerateTabBarView:width height:height bottomPadding:bottomPadding];
    
    //    [self GenerateSideBarView:width height:height bottomPadding:bottomPadding];
    
    [self GenerateBottomOptionsView:width height:height bottomPadding:bottomPadding];
    
    [self GeneratePendingInvitesView:width height:height];
    
    [self GenerateUnreadNotificationsView:width height:height];
    
    [self GenerateUnreadActivityView:width height:height];
    
    [self GenerateEmptyTableView:width height:height];
    
    [self GenerateColorViews];
    
    
    
    
    
    
    
    
    width = CGRectGetWidth(self.view.bounds);
    height = CGRectGetHeight(self.view.bounds);
    
    
    BOOL DisplayNotificationReminderAnimation = [[[NSUserDefaults standardUserDefaults] objectForKey:@"BeginNotificationReminderAnimation"] isEqualToString:@"Yes"];
    
    if (DisplayNotificationReminderAnimation == YES) {
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"BeginNotificationReminderAnimation"];
        
        [UIView animateWithDuration:0.25 animations:^{
            
            [self DisplayDropDownAlertView];
            
        }];
        
    } else {
        
        [self DisplayDropDownAlertView];
        
    }
    
    
    
    
    
    
    
    
    if (SelectClicked) {
        
        CGRect rect = self->_middleLabel.frame;
        rect.origin.y = self->_topView.frame.origin.y + (self->_topView.frame.size.height*0.5 - self->_middleLabel.frame.size.height*0.5) - self->_middleLabel.frame.size.height*0.5;
        self->_middleLabel.frame = rect;
        
        self->selectedAmountLabel.frame = CGRectMake(0, self->_middleLabel.frame.origin.y + self->_middleLabel.frame.size.height, self.view.frame.size.width, self->_sideBarImage.frame.size.height*0.85);
        
        self->_bottomOptionsView.alpha = 1.0f;
        
        [self SelectTaskUpdateBottomViewUI];
        [self SetUpBottomEllipsisContextMenu];
        [self SetUpBottomFolderContextMenu];
        
        
        
        [self SelectDeselectItems_CheckIfAllTasksSelected];
        
    }
    
}

-(void)viewWillAppear:(BOOL)animated {
    
    [tapGestureSideBarCustomScrollView removeFromSuperview];
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    CGFloat statusBarSizeHeight = [[[GeneralObject alloc] init] GetStatusBarHeight];
    CGFloat bottomPadding = [[[GeneralObject alloc] init] GetBottomPaddingHeight];
    
    CGFloat spacing = (self.view.frame.size.height*0.01390498 > 12?12:(self.view.frame.size.height*0.01390498));
    CGFloat textFieldEdges = (self.view.frame.size.height*0.005997 > 4?4:(self.view.frame.size.height*0.005997));
    CGFloat textFieldHeight = (self.view.frame.size.height*0.05997001 > 40?40:(self.view.frame.size.height*0.05997001)) - textFieldEdges;
    CGFloat scrollViewViewHeight = (self.view.frame.size.height*0.07196402 > 48?48:(self.view.frame.size.height*0.07196402));
    
    CGFloat addOnHeight = [chosenItemRepeats isEqualToString:@"Never"] ? 0 : scrollViewViewHeight;
    
    _statusBarOverView.frame = CGRectMake(0, 0, width, statusBarSizeHeight);
    _customScrollView.frame = CGRectMake(0, statusBarSizeHeight, width, height - _tabBarView.frame.size.height - statusBarSizeHeight);
    activityControl.frame = CGRectMake((_customScrollView.frame.size.width*0.5)-(25*0.5), _customScrollView.frame.size.height*0.5 - 25*0.5, 25, 25);
    _addTaskAddingView.frame = CGRectMake(0, height, width,
                                          [itemType isEqualToString:@"Expense"] || [itemType isEqualToString:@"List"] ?
                                          spacing + textFieldHeight + textFieldEdges + textFieldHeight + textFieldEdges + textFieldHeight + textFieldEdges + scrollViewViewHeight + addOnHeight :
                                          spacing + textFieldHeight + textFieldEdges + textFieldHeight + scrollViewViewHeight + textFieldEdges + addOnHeight);
    
    [self GenerateCrashAlertView:width height:height bottomPadding:bottomPadding];
    [self GenerateFeedbackAlertView:width height:height bottomPadding:bottomPadding];
    
    [self GenerateSideBarView:width height:height bottomPadding:bottomPadding];
    
}

-(void)viewDidAppear:(BOOL)animated {
    
    [[[GeneralObject alloc] init] InvitingHomeMembersAcceptedPopup:^(BOOL finished) {
        
    }];
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO && [[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
        
        alertView = [[AlertView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) viewControllerWidth:self.view.frame.size.width viewControllerHeight:self.view.frame.size.height text:[NSString stringWithFormat:@"No Internet Connection\n\nWould you like to use WeDivvy offline in the future?"] acceptButtonSelector:@selector(OfflinePushToPremium:) declineButtonSelector:@selector(RequestRejected:) viewControllerObject:[[TasksViewController alloc] init]];
        alertView.alpha = 0.0f;
        [self.view addSubview:alertView];
        
        [UIView animateWithDuration:0.25 animations:^{
            self->alertView.alpha = 1.0f;
        }];
        
    }
    
    [[[GeneralObject alloc] init] RegisterForNotifications:^(BOOL finished) {
        
        self->alertView = [[AlertView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) viewControllerWidth:self.view.frame.size.width viewControllerHeight:self.view.frame.size.height text:[NSString stringWithFormat:@"Turn on Notifications\n\nFind out when you're assigned to tasks, when their due, and when their completed"] acceptButtonSelector:@selector(EnableNotificationsRequestAccepted:) declineButtonSelector:@selector(RequestRejected:) viewControllerObject:[[TasksViewController alloc] init]];
        self->alertView.alpha = 0.0f;
        [self.view addSubview:self->alertView];
        
        [UIView animateWithDuration:0.25 animations:^{
            self->alertView.alpha = 1.0f;
        }];
        
    }];
    
//    [[[GeneralObject alloc] init] DisplayWeDivvyPremiumPage:^(BOOL finished, BOOL DisplayDiscount) {
//       
//        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:NO comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Discount" selectedSlide:@"" promoCodeID:@"" premiumPlanProductsArray:self->premiumPlanProductsArray premiumPlanPricesDict:self->premiumPlanPricesDict premiumPlanExpensivePricesDict:self->premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:self->premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:self->premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
//        
//    }];
    
    [self CallPopupMethods];
    
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    
    if ([[[BoolDataObject alloc] init] DarkModeIsOn]) {
        
        return UIStatusBarStyleLightContent;
        
    } else {
        
        return UIStatusBarStyleDefault;
        
    }
    
}

-(void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Tasks View Controller Scrolling"] completionHandler:^(BOOL finished) {
        
    }];
    
}

-(void)scrollViewDidScroll:(UIScrollView *)scrollView {
    
    if (_customScrollView.contentOffset.y != 0) {
        _statusBarOverView.layer.borderWidth = 0.0;
        _statusBarOverView.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
        _statusBarOverView.layer.shadowRadius = 5;
        _statusBarOverView.layer.shadowOpacity = 1.0;
        _statusBarOverView.layer.shadowOffset = CGSizeMake(0, 0);
    } else {
        _statusBarOverView.layer.borderWidth = 0.0;
        _statusBarOverView.layer.shadowColor = [UIColor clearColor].CGColor;
        _statusBarOverView.layer.shadowRadius = 5;
        _statusBarOverView.layer.shadowOpacity = 1.0;
        _statusBarOverView.layer.shadowOffset = CGSizeMake(0, 0);
    }
    
}

- (BOOL)gestureRecognizerShouldBegin:(UIPanGestureRecognizer *)gestureRecognizer
{
    UIView *cell = [gestureRecognizer view];
    CGPoint translation = [gestureRecognizer translationInView:[cell superview]];
    
    if (fabs(translation.x) > fabs(translation.y)) {
        return YES;
    }
    
    return NO;
}

#pragma mark - Text View Methods

- (BOOL) textViewShouldBeginEditing:(UITextView *)textView
{
    if (_requestFeedbackAlertViewNotesTextView.text.length == 0 || [_requestFeedbackAlertViewNotesTextView.text isEqualToString:@"Leave your feedback here"] == YES || [_requestFeedbackAlertViewNotesTextView.text isEqualToString:@"Tell us why here"] == YES) {
        
        _requestFeedbackAlertViewNotesTextView.text = @"";
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    }
    
    if (_reportCrashAlertViewNotesTextView.text.length == 0 || [_reportCrashAlertViewNotesTextView.text isEqualToString:@"Describe what happened here"] == YES) {
        
        _reportCrashAlertViewNotesTextView.text = @"";
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    }
    
    return YES;
}

- (BOOL) textViewShouldEndEditing:(UITextView *)textView
{
    if(_requestFeedbackAlertViewNotesTextView.text.length == 0 && FeedbackButtonClicked) {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _requestFeedbackAlertViewNotesTextView.text = @"Leave your feedback here";
        
    }
    
    if(_requestFeedbackAlertViewNotesTextView.text.length == 0 && PremiumSubscriptionCancelled) {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _requestFeedbackAlertViewNotesTextView.text = @"Tell us why here";
        
    }
    
    if(_reportCrashAlertViewNotesTextView.text.length == 0) {
        
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _reportCrashAlertViewNotesTextView.text = @"Describe what happened here";
        
    }
    
    return YES;
}

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
    
    if (textView == _addTaskItemNameTextView || textView == _addTaskItemAmountTextView || textView == _addTaskItemListItemsTextView || textView == _addTaskItemNotesTextView) {
       
        NSString *defaultText = @"Name";
        
        if (textView == _addTaskItemAmountTextView) {
            defaultText = [NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol];
        } else if (textView == _addTaskItemListItemsTextView) {
            defaultText = @"0 Items";
        } else if (textView == _addTaskItemNotesTextView) {
            defaultText = @"Notes";
        }
        
        if ((textView.text.length > 0 && [textView.text isEqualToString:defaultText] == NO) ||
            (textView.text.length == 0 && [text length] > 0) ||
            ([textView.text isEqualToString:defaultText] && [text length] > 0)) {
            
            textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
            
        } else {
            
            textView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
            
        }
        
        if (textView == _addTaskItemAmountTextView) {
            
            return [self FormatAmountTextField:textView shouldChangeCharactersInRange:range replacementString:text];
            
        } else if ([textView.text isEqualToString:defaultText] && [text isEqualToString:@"\n"] == NO) {
            
            if ([textView.text isEqualToString:defaultText] && [text isEqualToString:@"\n"] == NO) {
                
                NSString *str = [NSString stringWithFormat:@"%@%@", textView.text, text];
                
                str = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:str arrayOfSymbols:@[defaultText]];
                textView.text = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:textView.text arrayOfSymbols:@[defaultText]];
                
                textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
                
            } else {
                
                textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
                
            }
            
            return YES;
            
        } else if (([textView.text isEqualToString:@""] || [textView.text isEqualToString:defaultText]) && [text isEqualToString:@"\n"]) {
            
            if ([itemType isEqualToString:@"Chore"]) {
                
                NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
                NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
                
                if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
                    
                    [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
                    
                }
                
                
            } else if ([itemType isEqualToString:@"Expense"]) {
                
                NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
                NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
                NSString *trimmedStringItemAmount = [_addTaskItemAmountTextView.text stringByTrimmingCharactersInSet:charSet];
                
                if (([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) || ([trimmedStringItemAmount length] == 0 || [trimmedStringItemAmount isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]])) {
                    
                    if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
                        [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
                    }
                    if ([trimmedStringItemAmount length] == 0 || [trimmedStringItemAmount isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]]) {
                        [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemAmountTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
                    }
                    
                }
                
            } else if ([itemType isEqualToString:@"List"]) {
                
                NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
                NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
                NSString *trimmedStringItemListItems = [_addTaskItemListItemsTextView.text stringByTrimmingCharactersInSet:charSet];
                
                if (([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) || [[chosenItemListItems allKeys] count] == 0) {
                    
                    if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
                        [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
                    }
                    if ([trimmedStringItemListItems length] == 0 || [trimmedStringItemListItems isEqualToString:@"0 Items"]) {
                        [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemListItemsTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
                    }
                    
                }
                
            }
            
            return NO;
            
        } else if ([textView.text length] > 0 && [textView.text isEqualToString:defaultText] == NO && [text isEqualToString:@"\n"]) {
            
            [_addTaskItemNameTextView becomeFirstResponder];
            
            if (textView.text.length == 0) {
                
                textView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
                textView.text = defaultText;
                [[[GeneralObject alloc] init] SelectCursorPosition:textView pos:0 len:0];
                
            } else {
                
                textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
                
            }
            
            return NO;
            
        }
        
    }
    
    
    
    if (self->_requestFeedbackAlertViewNotesTextView.text.length > 0 && [_requestFeedbackAlertViewNotesTextView.text isEqualToString:@"Leave your feedback here"] == NO && [_requestFeedbackAlertViewNotesTextView.text isEqualToString:@"Tell us why here"] == NO) {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        
    }
    
    if([text isEqualToString:@"\n"] && textView == _requestFeedbackAlertViewNotesTextView) {
        
        [textView resignFirstResponder];
        
        if (_requestFeedbackAlertViewNotesTextView.text.length == 0){
            
            _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
            _requestFeedbackAlertViewNotesTextView.text = PremiumSubscriptionCancelled ? @"Tell us why here" : @"Leave your feedback here";
            [_requestFeedbackAlertViewNotesTextView resignFirstResponder];
            
        }
        
        return NO;
        
    } else if ([textView.text isEqualToString:@"Leave your feedback here"] && FeedbackButtonClicked) {
        
        NSString *str = [NSString stringWithFormat:@"%@%@", textView.text, text];
        
        str = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:str arrayOfSymbols:@[@"Leave your feedback here"]];
        textView.text = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:textView.text arrayOfSymbols:@[@"Leave your feedback here"]];
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else if ([textView.text isEqualToString:@"Tell us why here"] && PremiumSubscriptionCancelled) {
        
        NSString *str = [NSString stringWithFormat:@"%@%@", textView.text, text];
        
        str = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:str arrayOfSymbols:@[@"Tell us why here"]];
        textView.text = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:textView.text arrayOfSymbols:@[@"Tell us why here"]];
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    }
    
    
    
    if (self->_reportCrashAlertViewNotesTextView.text.length > 0 && [_reportCrashAlertViewNotesTextView.text isEqualToString:@"Describe what happened here"] == NO && [_reportCrashAlertViewNotesTextView.text isEqualToString:@"Describe what happened here"] == NO) {
        
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        
    }
    
    if([text isEqualToString:@"\n"] && textView == _reportCrashAlertViewNotesTextView) {
        
        [textView resignFirstResponder];
        
        if (_reportCrashAlertViewNotesTextView.text.length == 0){
            
            _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
            _reportCrashAlertViewNotesTextView.text = @"Describe what happened here";
            [_reportCrashAlertViewNotesTextView resignFirstResponder];
            
        }
        
        return NO;
        
    } else if ([textView.text isEqualToString:@"Describe what happened here"]) {
        
        NSString *str = [NSString stringWithFormat:@"%@%@", textView.text, text];
        
        str = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:str arrayOfSymbols:@[@"Describe what happened here"]];
        textView.text = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:textView.text arrayOfSymbols:@[@"Describe what happened here"]];
        
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    }
    
    return YES;
}

-(void)textViewDidBeginEditing:(UITextView *)textView {
    
    if (textView == _addTaskItemNameTextView || textView == _addTaskItemAmountTextView || textView == _addTaskItemListItemsTextView || textView == _addTaskItemNotesTextView) {
        
        NSString *defaultText = @"Name";
        
        if (textView == _addTaskItemAmountTextView) {
            defaultText = [NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol];
        } else if (textView == _addTaskItemListItemsTextView) {
            defaultText = @"0 Items";
        } else if (textView == _addTaskItemNotesTextView) {
            defaultText = @"Notes";
        }
        
        if (textView.text.length == 0 || [textView.text isEqualToString:defaultText] == YES) {
            
            textView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
            
        } else {
            
            textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
            
        }
        
    }
    
    if ([_addTaskItemNameTextView.text isEqualToString:@"Name"] == NO) {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemAmountTextView.text isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]] == NO) {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemListItemsTextView.text isEqualToString:@"0 Items"] == NO) {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemNotesTextView.text isEqualToString:@"Notes"] == NO) {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
}

-(void)textViewDidEndEditing:(UITextView *)textView {
    
    if (textView == _addTaskItemNameTextView || textView == _addTaskItemAmountTextView || textView == _addTaskItemListItemsTextView || textView == _addTaskItemNotesTextView) {
        
        NSString *defaultText = @"Name";
        
        if (textView == _addTaskItemAmountTextView) {
            defaultText = [NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol];
        } else if (textView == _addTaskItemListItemsTextView) {
            defaultText = @"0 Items";
        } else if (textView == _addTaskItemNotesTextView) {
            defaultText = @"Notes";
        }
        
        if (textView.text.length == 0) {
            
            textView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
            textView.text = defaultText;
            [[[GeneralObject alloc] init] SelectCursorPosition:textView pos:0 len:0];
            
        } else {
            
            textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
            
        }
        
    }
    
    if ([_addTaskItemNameTextView.text isEqualToString:@"Name"] == NO) {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemAmountTextView.text isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]] == NO) {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemListItemsTextView.text isEqualToString:@"0 Items"] == NO) {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemNotesTextView.text isEqualToString:@"Notes"] == NO) {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
}

-(void)textViewDidChange:(UITextView *)textView
{
    
    if (textView == _addTaskItemNameTextView || textView == _addTaskItemAmountTextView || textView == _addTaskItemListItemsTextView || textView == _addTaskItemNotesTextView) {
        
        NSString *defaultText = @"Name";
        
        if (textView == _addTaskItemAmountTextView) {
            defaultText = [NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol];
        } else if (textView == _addTaskItemListItemsTextView) {
            defaultText = @"0 Items";
        } else if (textView == _addTaskItemNotesTextView) {
            defaultText = @"Notes";
        }
        
        if (textView.text.length == 0) {
            
            textView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
            textView.text = defaultText;
            [[[GeneralObject alloc] init] SelectCursorPosition:textView pos:0 len:0];
            
        } else {
            
            textView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
            
        }
        
    }
    
    if ([_addTaskItemNameTextView.text isEqualToString:@"Name"] == NO) {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNameTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemAmountTextView.text isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]] == NO) {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemAmountTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemListItemsTextView.text isEqualToString:@"0 Items"] == NO) {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemListItemsTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if ([_addTaskItemNotesTextView.text isEqualToString:@"Notes"] == NO) {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:138.0f/255.0f green:137.0f/255.0f blue:142.0f/255.0f alpha:1.0f];
        
    } else {
        
        _addTaskItemNotesTextView.textColor = [UIColor colorWithRed:208.0f/255.0f green:207.0f/255.0f blue:212.0f/255.0f alpha:1.0f];
        
    }
    
    if(_requestFeedbackAlertViewNotesTextView.text.length == 0 && FeedbackButtonClicked) {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _requestFeedbackAlertViewNotesTextView.text = @"Leave your feedback here";
        
    }
    
    if(_requestFeedbackAlertViewNotesTextView.text.length == 0 && PremiumSubscriptionCancelled) {
        
        _requestFeedbackAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _requestFeedbackAlertViewNotesTextView.text = @"Tell us why here";
        
    }
    
    if(_reportCrashAlertViewNotesTextView.text.length == 0) {
        
        _reportCrashAlertViewNotesTextView.textColor = [UIColor colorWithRed:181.0f/255.0f green:188.0f/255.0f blue:193.0f/255.0f alpha:1.0f];
        _reportCrashAlertViewNotesTextView.text = @"Describe what happened here";
        
    }
    
}

-(BOOL)FormatAmountTextField:(UITextView *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {
    
    textField.text = [[[GeneralObject alloc] init] FormatAmountTextField:textField.text replacementString:string];
    
    NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
    NSString *trimmedStringItemAmount = [_addTaskItemAmountTextView.text stringByTrimmingCharactersInSet:charSet];
    
    BOOL CheckIfAddingExpense = [itemType isEqualToString:@"Expense"];
    
    if (CheckIfAddingExpense == YES && (trimmedStringItemAmount.length == 0 || [trimmedStringItemAmount isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]] == YES)) {
        
        [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemAmountTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
        
    } else {
        
        _addTaskItemAmountTextView.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTertiary] : [[[LightDarkModeObject alloc] init] LightModeSecondary];
        
    }
    
    return NO;
    
}

#pragma mark - Init Methods

-(void)InitMethod {
    
    [self SetUpGeneral];
    
    [self SetUpItemType];
    
    [self SetUpTextViews];
    
    [self SetUpDicts];
    
    [self SetUpMiddleLabel];
    
    [self SetUpAddTaskEllipsisContextMenu];
    
    [self SetUpTopEllipsisContextMenu];
    
    [self SetUpBottomEllipsisContextMenu];
    
    [self SetUpBottomFolderContextMenu];
    
    [self SetUpInvitationView];
    
    [self SetUpNotificationViewView];
    
    [self SetUpCollectionAssignedTo];
    
    [self SetUpEmptyTableViewView];
    
    [self SetUpitemReminderLabel];
    
    [self SetUpKeyArray];
    
    [self SetUpPinnedDict];
    
    [self SetUpTableView];
    
    [self SetUpRefreshControl];
    
    [self SetUpActivityControl];
    
    [self SetUpTabBarView];
    
}

-(void)TapGestures {
    
    UITapGestureRecognizer *tapGesture;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToHomeMembersViewController:)];
    [homeMembersOverlayView addGestureRecognizer:tapGesture];
    homeMembersOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureSideBarImage:)];
    [_sideBarImageOverlayView addGestureRecognizer:tapGesture];
    _sideBarImageOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToViewPaymentsViewController:)];
    [_walletOverlayView addGestureRecognizer:tapGesture];
    _walletOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToHomeMembersViewController:)];
    [_pendingInvitesView addGestureRecognizer:tapGesture];
    _pendingInvitesView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToHomeMembersViewController:)];
    [_pendingInvitesLabel addGestureRecognizer:tapGesture];
    _pendingInvitesLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToViewActivityViewController:)];
    [_unreadActivityView addGestureRecognizer:tapGesture];
    _unreadActivityView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToViewActivityViewController:)];
    [_unreadActivityLabel addGestureRecognizer:tapGesture];
    _unreadActivityLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToSettingsViewController:)];
    [settingsOverlayView addGestureRecognizer:tapGesture];
    settingsOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToNotificationsViewController:)];
    [notificationsOverlayView addGestureRecognizer:tapGesture];
    notificationsOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToViewCalendarViewController:)];
    [calendarOverlayView addGestureRecognizer:tapGesture];
    calendarOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToSearchViewController:)];
    [searchOverlayView addGestureRecognizer:tapGesture];
    searchOverlayView.userInteractionEnabled = YES;
    searchOverlayView.hidden = YES;
    
    //    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToViewActivityViewController:)];
    //    [activityhOverlayView addGestureRecognizer:tapGesture];
    //    activityhOverlayView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToNotificationsViewController:)];
    [_unreadNotificationsView addGestureRecognizer:tapGesture];
    _unreadNotificationsView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToNotificationsViewController:)];
    [_unreadNotificationsViewLabel addGestureRecognizer:tapGesture];
    _unreadNotificationsViewLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureDisplayEnableNotificationsRequest:)];
    [_notificationitemReminderLabel addGestureRecognizer:tapGesture];
    _notificationitemReminderLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureDismissDropdownAlertView:)];
    [_notificationitemReminderImage addGestureRecognizer:tapGesture];
    _notificationitemReminderImage.userInteractionEnabled = YES;
    
    //    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureAddTask:)];
    //    [_addTaskButton addGestureRecognizer:tapGesture];
    //    _addTaskButton.userInteractionEnabled = YES;
    //
    //    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureAddTask:)];
    //    [_addTaskButtonImage addGestureRecognizer:tapGesture];
    //    _addTaskButtonImage.userInteractionEnabled = YES;
    //
    //    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureAddTask:)];
    //    [_addTaskButtonCover addGestureRecognizer:tapGesture];
    //    _addTaskButtonCover.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToChoreViewController:)];
    [_choreIconTapView addGestureRecognizer:tapGesture];
    _choreIconTapView.userInteractionEnabled = [itemType isEqualToString:@"Chore"] ? NO : YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToExpenseViewController:)];
    [_expenseIconTapView addGestureRecognizer:tapGesture];
    _expenseIconTapView.userInteractionEnabled = [itemType isEqualToString:@"Expense"] ? NO : YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToListsViewController:)];
    [_listsIconTapView addGestureRecognizer:tapGesture];
    _listsIconTapView.userInteractionEnabled = [itemType isEqualToString:@"List"] ? NO : YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToGroupChatViewController:)];
    [_chatsIconTapView addGestureRecognizer:tapGesture];
    _chatsIconTapView.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption1 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption1.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption2 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption2.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption3 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption3.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption4 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption4.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption5 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption5.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption6 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption6.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption7 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption7.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption8 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption8.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption9 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption9.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackOptionView:)];
    [_requestFeedbackAlertViewOption10 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewOption10.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackNextButton:)];
    [_requestFeedbackAlertViewSubmitButtonLabel1 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewSubmitButtonLabel1.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackNextButton:)];
    [_requestFeedbackAlertViewSubmitButtonLabel2 addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewSubmitButtonLabel2.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackNextButton:)];
    [_requestFeedbackAlertViewRateOurAppButtonLabel addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewRateOurAppButtonLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackClose:)];
    [_requestFeedbackAlertViewXIcon1Cover addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewXIcon1Cover.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackClose:)];
    [_requestFeedbackAlertViewXIcon2Cover addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewXIcon2Cover.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureFeedbackClose:)];
    [_requestFeedbackAlertViewXIcon3Cover addGestureRecognizer:tapGesture];
    _requestFeedbackAlertViewXIcon3Cover.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureCrashNextButton:)];
    [_reportCrashAlertViewSubmitButtonLabel1 addGestureRecognizer:tapGesture];
    _reportCrashAlertViewSubmitButtonLabel1.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureCrashClose:)];
    [_reportCrashAlertViewXIcon1Cover addGestureRecognizer:tapGesture];
    _reportCrashAlertViewXIcon1Cover.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureSideBarAddTaskList:)];
    [_sideBarAddLabel addGestureRecognizer:tapGesture];
    _sideBarAddLabel.userInteractionEnabled = YES;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectOptionPinUnpin:)];
    [_bottomOptionsPinImageOverlay addGestureRecognizer:tapGesture];
    _bottomOptionsPinImageOverlay.userInteractionEnabled = NO;

    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectOptionMoveToTrash:)];
    [_bottomOptionsMoveToTrashImageOverlay addGestureRecognizer:tapGesture];
    _bottomOptionsMoveToTrashImageOverlay.userInteractionEnabled = NO;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectOptionMoveOutOfTrash:)];
    [_bottomOptionsMoveOutOfTrashImageOverlay addGestureRecognizer:tapGesture];
    _bottomOptionsMoveOutOfTrashImageOverlay.userInteractionEnabled = NO;
    
    tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectOptionDeleteTrashPermanently:)];
    [_bottomOptionsDeleteTrashImageOverlay addGestureRecognizer:tapGesture];
    _bottomOptionsDeleteTrashImageOverlay.userInteractionEnabled = NO;
    
    /*----------------------------------------------------------------------------------------*/
    
}

-(void)NSNotificationObservers {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DisplayAddTaskTutorialView" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_DisplayAddTaskTutorialView:) name:@"NSNotification_Tasks_DisplayAddTaskTutorialView" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddHomeMember" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddHomeMember:) name:@"NSNotification_Tasks_AddHomeMember" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_MultiAddTask" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_MultiAddTask:) name:@"NSNotification_Tasks_MultiAddTask" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddTask" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddTask:) name:@"NSNotification_Tasks_AddTask" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_EditTask" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_EditTask:) name:@"NSNotification_Tasks_EditTask" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteTask" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_DeleteTask:) name:@"NSNotification_Tasks_DeleteTask" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_MultiAddTaskToTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_MultiAddTaskToTaskList:) name:@"NSNotification_Tasks_MultiAddTaskToTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddTaskToTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddTaskToTaskList:) name:@"NSNotification_Tasks_AddTaskToTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_RemoveTaskFromTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_RemoveTaskFromTaskList:) name:@"NSNotification_Tasks_RemoveTaskFromTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_RemoveTaskFromAllTaskLists" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_RemoveTaskFromAllTaskLists:) name:@"NSNotification_Tasks_RemoveTaskFromAllTaskLists" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_MoveTaskToDifferentTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_MoveTaskToDifferentTaskList:) name:@"NSNotification_Tasks_MoveTaskToDifferentTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ReloadView" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ReloadView:) name:@"NSNotification_Tasks_ReloadView" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ReloadPage" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ReloadPage:) name:@"NSNotification_Tasks_ReloadPage" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_UpdateHomeMembersDict" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_UpdateHomeMembersDict:) name:@"NSNotification_Tasks_UpdateHomeMembersDict" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_UnreadNotifications" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_UnreadNotifications:) name:@"NSNotification_Tasks_UnreadNotifications" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_UnusedInvitations" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_UnusedInvitations:) name:@"NSNotification_Tasks_UnusedInvitations" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_UnreadHomeActivity" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_UnreadHomeActivity:) name:@"NSNotification_Tasks_UnreadHomeActivity" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ItemTags" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ItemTags:) name:@"NSNotification_Tasks_ItemTags" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_SelectTag" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_SelectTag:) name:@"NSNotification_Tasks_SelectTag" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_MultiAddOrEditTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_MultiAddOrEditTaskList:) name:@"NSNotification_Tasks_MultiAddOrEditTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditTaskList" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditTaskList:) name:@"NSNotification_Tasks_AddOrEditTaskList" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditTaskListInFolder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditTaskListInFolder:) name:@"NSNotification_Tasks_AddOrEditTaskListInFolder" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditFolder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditFolder:) name:@"NSNotification_Tasks_AddOrEditFolder" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteFolder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_DeleteFolder:) name:@"NSNotification_Tasks_DeleteFolder" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditSection" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditSection:) name:@"NSNotification_Tasks_AddOrEditSection" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditItemTemplate" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditItemTemplate:) name:@"NSNotification_Tasks_AddOrEditItemTemplate" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteItemTemplate" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_DeleteItemTemplate:) name:@"NSNotification_Tasks_DeleteItemTemplate" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddOrEditItemDraft" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_AddOrEditItemDraft:) name:@"NSNotification_Tasks_AddOrEditItemDraft" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteItemDraft" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_DeleteItemDraft:) name:@"NSNotification_Tasks_DeleteItemDraft" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_NotificationSettings" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_NotificationSettings:) name:@"NSNotification_Tasks_NotificationSettings" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ItemWeDivvyPremiumAccounts" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ItemWeDivvyPremiumAccounts:) name:@"NSNotification_Tasks_ItemWeDivvyPremiumAccounts" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_SaveMyLocalNotifications" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_SaveMyLocalNotifications:) name:@"NSNotification_Tasks_SaveMyLocalNotifications" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ItemShortcutItems" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ItemShortcutItems:) name:@"NSNotification_Tasks_ItemShortcutItems" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ItemTabBar" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ItemTabBar:) name:@"NSNotification_Tasks_ItemTabBar" object:nil];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_ItemPastDue" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NSNotification_Tasks_ItemPastDue:) name:@"NSNotification_Tasks_ItemPastDue" object:nil];
    
}

-(void)KeyboardNSNotifications {
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillShow:)
                                                 name:UIKeyboardWillShowNotification
                                               object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillHide:)
                                                 name:UIKeyboardWillHideNotification
                                               object:nil];
    
}

#pragma mark - Keyboard Methods

- (void)keyboardWillShow:(NSNotification *)notification {
    
    [UIView animateWithDuration:0.25 animations:^{
        
        NSDictionary* keyboardInfo = [notification userInfo];
        NSValue* keyboardFrameBegin = [keyboardInfo valueForKey:UIKeyboardFrameEndUserInfoKey];
        CGRect keyboardFrameBeginRect = [keyboardFrameBegin CGRectValue];
        
        self->keyboardFrame = keyboardFrameBeginRect;
        
        CGRect sendCoinsButton = self->_requestFeedbackAlertView.frame;
        CGRect sendCoinsButton1 = self->_reportCrashAlertView.frame;
        CGRect sendCoinsButton2 = self->_addTaskAddingView.frame;
        
        sendCoinsButton.origin.y = CGRectGetHeight(self.view.bounds)-keyboardFrameBeginRect.size.height-self->_requestFeedbackAlertView.frame.size.height;
        sendCoinsButton1.origin.y = CGRectGetHeight(self.view.bounds)-keyboardFrameBeginRect.size.height-self->_reportCrashAlertView.frame.size.height;
        sendCoinsButton2.origin.y = CGRectGetHeight(self.view.bounds)-keyboardFrameBeginRect.size.height-self->_addTaskAddingView.frame.size.height;
        
        self->_requestFeedbackAlertView.frame = sendCoinsButton;
        self->_reportCrashAlertView.frame = sendCoinsButton1;
        
        if (self->AddTaskShowing) {
            self->_addTaskAddingView.frame = sendCoinsButton2;
        }
        
    } completion:^(BOOL finished) {
        
    }];
    
}

- (void)keyboardWillHide: (NSNotification *) notification{
    
    [UIView animateWithDuration:0.25 animations:^{
        
        CGFloat width = CGRectGetWidth(self.view.bounds);
        CGFloat height = CGRectGetHeight(self.view.bounds);
        CGFloat bottomPadding = [[[GeneralObject alloc] init] GetBottomPaddingHeight];
        
        CGFloat questionLabelHeight = 36;
        CGFloat spacing = (width*0.06038647);
        CGFloat spacingNo1 = 10;
        CGFloat nextButtonHeight = 45;
        CGFloat circleButtonHeight = 50;
        CGFloat alertViewHeight = (((((height*0.1) > 20?(20):(height*0.1))*0.1)*2) + questionLabelHeight + spacing + circleButtonHeight + spacingNo1 + circleButtonHeight + spacing + nextButtonHeight);
        
        self->_requestFeedbackAlertView.frame = CGRectMake(0, height - alertViewHeight - bottomPadding, width, alertViewHeight + bottomPadding);
        self->_reportCrashAlertView.frame = CGRectMake(0, height - alertViewHeight - bottomPadding, width, alertViewHeight + bottomPadding);
        
        CGRect newRect = self->_addTaskAddingView.frame;
        newRect.origin.y = self.view.frame.size.height;
        self->_addTaskAddingView.frame = newRect;
        
        self->_addTaskBackDropView.alpha = 0.0f;
        
    }];
    
}

#pragma mark - Setup Methods

-(void)SetUpGeneral {
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"QueryFirstTime"] isEqualToString:@"Yes"]) {
        QueryFirstTime = YES;
    }
    
    mainTableViewCellHeight = (self.view.frame.size.height*0.11005435 > 81?(81):self.view.frame.size.height*0.11005435);
    mainTableViewSectionHeight = (self.view.frame.size.height*0.04076087 > 30?(30):self.view.frame.size.height*0.04076087);
    
    premiumSection = [[[BoolDataObject alloc] init] NoSignUp] ? 1 : 0;
    generalSection = [[[BoolDataObject alloc] init] NoSignUp] ? 2 : 1;
    groupSection = [[[BoolDataObject alloc] init] NoSignUp] ? 3 : 2;
    usersSection = [[[BoolDataObject alloc] init] NoSignUp] ? 4 : 3;
    tagsSection = [[[BoolDataObject alloc] init] NoSignUp] ? 5 : 4;
    colorsSection = [[[BoolDataObject alloc] init] NoSignUp] ? 6 : 5;
    folderSection = [[[BoolDataObject alloc] init] NoSignUp] ? 7 : 6;
    
    folderOriginalSection = [[[BoolDataObject alloc] init] NoSignUp] ? 4 : 3;
    taskListOriginalSection = [[[BoolDataObject alloc] init] NoSignUp] ? 5 : 4;
    sectionOriginalSection = [[[BoolDataObject alloc] init] NoSignUp] ? 6 : 5;
    
    localCurrencyDecimalSeparatorSymbol = [[[GeneralObject alloc] init] GenerateLocalCurrencyDecimalSeparatorSymbol];
    localCurrencyNumberSeparatorSymbol = [[[GeneralObject alloc] init] GenerateLocalCurrencyNumberSeparatorSymbol];
    
    BOOL WeDivvyPremiumPopupAfterSignUpWasDisplayed = ([[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUp"] && [[[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUp"] isEqualToString:@"Yes"]);
    
    if (WeDivvyPremiumPopupAfterSignUpWasDisplayed == NO) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"WeDivvyPremiumWasDisplayedAfterSignUp"];
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"WeDivvyPremiumWasDisplayedAfterSignUpOnThisSession"];
        
        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:NO comingFromSignUp:YES defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount" selectedSlide:@"" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
        
    }
    
    [[[NotificationsObject alloc] init] SaveMyLocalNotifications:^(BOOL finished) {
        
    }];
    
    [[[SceneDelegate alloc] init] SetUpShortcutIcons];
    
}

-(void)SetUpAnalytics {
    
    [[[GeneralObject alloc] init] TrackInMixPanel:[NSString stringWithFormat:@"%@ViewController", [[[GeneralObject alloc] init] GenerateItemType]]];
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewViewController:[NSString stringWithFormat:@"%@ViewController", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
}

-(void)SetUpItemType {
    
    homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
   
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    
    _requestFeedbackAlertViewNotesTextView.delegate = self;
    [self textViewDidChange:_requestFeedbackAlertViewNotesTextView];
    
    _reportCrashAlertViewNotesTextView.delegate = self;
    [self textViewDidChange:_reportCrashAlertViewNotesTextView];
    
}

-(void)SetUpTextViews {
    
    _addTaskItemNameTextView.text = @"Name";
    _addTaskItemNameTextView.delegate = self;
    
    _addTaskItemAmountTextView.text = [NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol];
    _addTaskItemAmountTextView.delegate = self;
    
    _addTaskItemNotesTextView.text = @"Notes";
    _addTaskItemNotesTextView.delegate = self;
    
}

-(void)SetUpDicts {
    
    sideBarSectionsArray = [[[BoolDataObject alloc] init] NoSignUp] ?
    [@[@"Get Started", @"Premium", @"General", @"Groups", @"Users", @"Tags", @"Colors", @"My Lists"] mutableCopy] :
    [@[@"Premium", @"General", @"Groups", @"Users", @"Tags", @"Colors", @"My Lists"] mutableCopy];
    
    self->sideBarCategorySectionArrayAltered = self->sideBarCategorySectionArrayAltered ? [self->sideBarCategorySectionArrayAltered mutableCopy] : [NSMutableArray array];
    
    taskListDict = [NSMutableDictionary dictionary];
    taskListDictNo1 = [NSMutableDictionary dictionary];
    sectionDict = [NSMutableDictionary dictionary];
    folderDict = [NSMutableDictionary dictionary];
    selectedItemsDict = [NSMutableDictionary dictionary];
    selectedSectionsDict = [NSMutableDictionary dictionary];
    cellHeightsDicts = [NSMutableDictionary dictionary];
    
}

-(void)SetUpMiddleLabel {
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    _middleLabel.text = sectionSelected;
    
}

-(void)SetUpAddTaskEllipsisContextMenu {
    
    NSMutableArray* actions = [[NSMutableArray alloc] init];
    
    [actions addObject:[UIAction actionWithTitle:@"Add One Task" image:[UIImage systemImageNamed:@"rectangle"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Single Tasks Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
        
        [UIView animateWithDuration:0.25 animations:^{
            
            self->addTaskTutorialView.alpha = 0.0;
            self->sideBarTutorialView.alpha = 0.0;
            
        }];
        
        [self TapGestureAddTask:self];
        
    }]];
    
    [actions addObject:[UIAction actionWithTitle:@"Add Multiple Tasks" image:[UIImage systemImageNamed:@"rectangle.stack"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Multiple Tasks Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
        
        if (self->EverythingIsThere == YES) {
            
            [UIView animateWithDuration:0.25 animations:^{
                
                self->addTaskTutorialView.alpha = 0.0;
                self->sideBarTutorialView.alpha = 0.0;
                
            }];
            
            [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ShowedMultiAddForTheFirstTime"];
            
            NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
            NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
            NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
            
            NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
            BOOL ListSelected = [self->taskListDict[@"TaskListName"] containsObject:sectionSelected];
            NSString *defaultTaskListName = ListSelected == YES ? sectionSelected : @"No List";
           
            [[[PushObject alloc] init] PushToMultiAddTasksViewController:NO itemDictFromPreviousPage:[NSMutableDictionary dictionary] itemDictKeysFromPreviousPage:[NSMutableDictionary dictionary] itemSelectedDict:[NSMutableDictionary dictionary] homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict folderDict:self->folderDict taskListDict:[self->taskListDict mutableCopy] templateDict:self->templateDict draftDict:self->draftDict homeMembersArray:self->homeMembersArray itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays defaultTaskListName:defaultTaskListName currentViewController:self Superficial:NO];
            
        } else {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
            
        }
        
    }]];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        //Post-Spike
        self->_addTaskButton.menu = [UIMenu menuWithTitle:@"" children:actions];
        self->_addTaskButton.showsMenuAsPrimaryAction = true;
        
        self->_addTaskButtonCover.menu = [UIMenu menuWithTitle:@"" children:actions];
        self->_addTaskButtonCover.showsMenuAsPrimaryAction = true;
        
    });
    
}

-(void)SetUpTopEllipsisContextMenu {
    
    NSMutableArray* actions = [[NSMutableArray alloc] init];
    
    
    
    UIMenu *menu = [self GenerateTopContextMenuSortMenu];
    [actions addObject:menu];
    
    UIMenu *viewMenu = [self GenerateTopContextMenuAssignedToMenu];
    [actions addObject:viewMenu];
    
    
    
    UIAction *showCompletedAction = [self GenerateTopContextMenuShowCompletedAction];
    if (showCompletedAction.title.length > 0) { [actions addObject:showCompletedAction]; }
    
    UIAction *manageSectionAction = [self GenerateTopContextMenuManageSectionAction];
    if (manageSectionAction.title.length > 0) { [actions addObject:manageSectionAction]; }
    
    UIAction *selectAction = [self GenerateTopContextMenuSelectAction];
    if (selectAction.title.length > 0) { [actions addObject:selectAction]; }
    
    UIAction *trashAction = [self GenerateTopContextMenuTrashAction];
    if (trashAction.title.length > 0) { [actions addObject:trashAction]; }
    
    
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        self->_ellipsisOverlayView.menu = [UIMenu menuWithTitle:@"" children:actions];
        self->_ellipsisOverlayView.showsMenuAsPrimaryAction = true;
        
    });
    
}

-(void)SetUpBottomEllipsisContextMenu {
    
    _bottomOptionsEllipsisImageOverlay.menu = [self GenerateItemContextMenu];
    
}

-(void)SetUpInvitationView {
    
    int customCount = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"InvitiationViewCount"]) {
        customCount = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"InvitiationViewCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", customCount] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", customCount] length] - 1));
    }
    
    CGFloat width = CGRectGetWidth(self.notificationReminderView.bounds);
    CGFloat height = CGRectGetHeight(self.notificationReminderView.bounds);
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
        
        _pendingInvitesView.frame = CGRectMake(_homeMemberImage.frame.origin.x + _homeMemberImage.frame.size.width - ((self.view.frame.size.width*0.02717391)*0.75), _homeMemberImage.frame.origin.y - ((self.view.frame.size.width*0.02717391)*0.25), self.view.frame.size.width*0.02717391, self.view.frame.size.width*0.02717391);
        _pendingInvitesLabel.hidden = YES;
        _pendingInvitesView.layer.cornerRadius = _pendingInvitesView.frame.size.height/2;
        
    } else {
        
        _pendingInvitesView.frame = CGRectMake(_homeMemberImage.frame.origin.x + _homeMemberImage.frame.size.width - ((self.view.frame.size.width*0.04227053)*0.67), _homeMemberImage.frame.origin.y - ((self.view.frame.size.width*0.04227053)*0.33), (self.view.frame.size.width*0.04227053)*multiple, self.view.frame.size.width*0.04227053);
        _pendingInvitesLabel.hidden = NO;
        _pendingInvitesView.layer.cornerRadius = _pendingInvitesView.frame.size.height/2;
        
    }
    
    
    width = CGRectGetWidth(self.pendingInvitesView.bounds);
    height = CGRectGetHeight(self.pendingInvitesView.bounds);
    
    self->_pendingInvitesLabel.frame = CGRectMake(0, 0, width, height);
    self->_pendingInvitesLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
    self->_pendingInvitesLabel.adjustsFontSizeToFitWidth = YES;
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
        _pendingInvitesLabel.hidden = YES;
    } else {
        if (customCount == 0) {
            _pendingInvitesView.hidden = YES;
            _pendingInvitesLabel.hidden = YES;
        } else {
            _pendingInvitesView.hidden = NO;
            _pendingInvitesLabel.hidden = NO;
            _pendingInvitesLabel.text = [NSString stringWithFormat:@"%d", customCount];
        }
        _pendingInvitesLabel.hidden = NO;
    }
    
}

-(void)SetUpUnreadActivityView {
    
    int customCount = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityCount"]) {
        customCount = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", customCount] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", customCount] length] - 1));
    }
    
    CGFloat width = CGRectGetWidth(self.notificationReminderView.bounds);
    CGFloat height = CGRectGetHeight(self.notificationReminderView.bounds);
    
    //    CGRect newRect = self->_unreadActivityView.frame;
    //    newRect.size.width = (self.view.frame.size.width*0.04227053)*multiple;
    //    self->_unreadActivityView.frame = newRect;
    
    width = CGRectGetWidth(self.unreadActivityView.bounds);
    height = CGRectGetHeight(self.unreadActivityView.bounds);
    
    self->_unreadActivityLabel.frame = CGRectMake(0, 0, width, height);
    self->_unreadActivityLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
    self->_unreadActivityLabel.adjustsFontSizeToFitWidth = YES;
    
    if (customCount == 0) {
        _unreadActivityView.hidden = YES;
        _unreadActivityLabel.hidden = YES;
    } else {
        _unreadActivityView.hidden = NO;
        _unreadActivityLabel.hidden = NO;
        _unreadActivityLabel.text = [NSString stringWithFormat:@"%d", customCount];
    }
    _unreadActivityLabel.hidden = YES;
    _unreadActivityView.hidden = YES;
    
}

-(void)SetUpNotificationViewView {
    
    int count = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationViewCount"]) {
        count = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationViewCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", count] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", count] length] - 1));
    }
    
    CGRect newRect = self->_unreadNotificationsView.frame;
    newRect.size.width = (self.view.frame.size.width*0.04227053)*multiple;
    self->_unreadNotificationsView.frame = newRect;
    
    CGFloat width = CGRectGetWidth(self.unreadNotificationsView.bounds);
    CGFloat height = CGRectGetHeight(self.unreadNotificationsView.bounds);
    
    self->_unreadNotificationsViewLabel.frame = CGRectMake(0, 0, width, height);
    self->_unreadNotificationsViewLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
    self->_unreadNotificationsViewLabel.adjustsFontSizeToFitWidth = YES;
    
    if (count == 0) {
        _unreadNotificationsView.hidden = YES;
        _unreadNotificationsViewLabel.hidden = YES;
    } else {
        _unreadNotificationsView.hidden = NO;
        _unreadNotificationsViewLabel.hidden = NO;
        _unreadNotificationsViewLabel.text = [NSString stringWithFormat:@"%d", count];
    }
    
}

-(void)SetUpEmptyTableViewView {
    
    _emptyTableViewView.hidden = YES;
    
    NSString *itemType = [[[GeneralObject alloc] init] GenerateItemType];
    
    if ([itemType containsString:@"Chore"]) {
        _emptyTableViewImage.image = [UIImage imageNamed:@"EmptyViewIcons.NoChores.png"];
        _emptyTableViewTitleLabel.text = @"Your Chores";
        _emptyTableViewBodyLabel.text = @"Tap the 'plus' button below to\nquickly add some chores to your home.";
    } else if ([itemType containsString:@"Expense"]) {
        _emptyTableViewImage.image = [UIImage imageNamed:@"EmptyViewIcons.NoExpenses.png"];
        _emptyTableViewTitleLabel.text = @"Your Expenses";
        _emptyTableViewBodyLabel.text = @"Tap the 'plus' button below to\nquickly add some expenses to your home.";
    } else if ([itemType containsString:@"List"]) {
        _emptyTableViewImage.image = [UIImage imageNamed:@"EmptyViewIcons.NoLists.png"];
        _emptyTableViewTitleLabel.text = @"Your Lists";
        _emptyTableViewBodyLabel.text = @"Tap the 'plus' button below to\nquickly add some lists to your home.";
    }
    
}

-(void)SetUpitemReminderLabel {
    
    _notificationitemReminderLabel.text = [NSString stringWithFormat:@"FIND OUT WHEN %@ ARE ASSIGNED AND DUE. CLICK HERE TO TURN ON NOTIFICATIONS 😄🔔", [itemTypeCollection uppercaseString]];
    
}

-(void)SetUpCollectionAssignedTo {
    
    itemTypeCollection = [NSString stringWithFormat:@"%@s", itemType];
    
}

-(void)SetUpKeyArray {
    
    keyArray = [[[GeneralObject alloc] init] GenerateKeyArray];
    
}

-(void)SetUpPinnedDict {
    
    NSString *itemType = [[[GeneralObject alloc] init] GenerateItemType];
    NSString *key = [NSString stringWithFormat:@"PinnedItems%@", itemType];
    pinnedDict = [[NSUserDefaults standardUserDefaults] objectForKey:key] ? [[[NSUserDefaults standardUserDefaults] objectForKey:key] mutableCopy] : [NSMutableDictionary dictionary];
    
}

-(void)SetUpTableView {
    
    _customTableView.dataSource = self;
    _customTableView.delegate = self;
    _sideBarTableView.dataSource = self;
    _sideBarTableView.delegate = self;
    _customScrollView.delegate = self;
    
    NSString *sortSelectedDefault = [[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultCategory"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultCategory"] : @"By Date";
    
    if ([sortSelectedDefault isEqualToString:@"Custom"]) {
        
        self.customTableView.dragDelegate = self;
        self.customTableView.dragInteractionEnabled = true;
        self.customTableView.dragDelegate = self;
        self.customTableView.dragInteractionEnabled = true;
        
    } else {
        
        self.customTableView.dragDelegate = nil;
        self.customTableView.dragInteractionEnabled = false;
        
    }
    
}

-(void)SetUpRefreshControl {
    
    if (refreshControl == nil){
        refreshControl = [[UIRefreshControl alloc] init];
    }
    
    refreshControl.tintColor = [UIColor lightGrayColor];
    [refreshControl addTarget:self action:@selector(RefreshPageAction:) forControlEvents:UIControlEventValueChanged];
    [_customScrollView addSubview:refreshControl];
    
}

-(void)SetUpActivityControl {
    
    //    BOOL CachedDictExists = ((([self->itemType isEqualToString:@"Chore"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"ChoreDict"]) ||
    //    ([self->itemType isEqualToString:@"Expense"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"ExpenseDict"]) ||
    //    ([self->itemType isEqualToString:@"List"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"ListDict"])) &&
    //    [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersDict"])
    //
    //    if (CachedDictExists == NO) {
    
    activityControl = [[UIActivityIndicatorView alloc] init];
    activityControl.color = [UIColor lightGrayColor];
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"QueryVeryFirstTime"] isEqualToString:@"Yes"]) {
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"QueryVeryFirstTime"];
        
        [activityControl setHidden:NO];
        [activityControl startAnimating];
        
        static dispatch_once_t onceToken;
        dispatch_once(&onceToken, ^{
            
            [activityControl startAnimating];
            
        });
        
    }
    
    [self.customScrollView addSubview:activityControl];
    
    //    }
    
}

-(void)SetUpTabBarView {
    
    UIColor *selectedColor = [UIColor colorWithRed:3.0f/255.0f green:122.0f/255.0f blue:252.0f/255.0f alpha:1.0f];
    UIColor *unSelectedColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextSecondary] : [[[LightDarkModeObject alloc] init] LightModeTextSecondary];
    
    if ([[[[GeneralObject alloc] init] GenerateItemType] isEqualToString:@"Expense"]) {
        
        _expenseIconTapView.userInteractionEnabled = NO;
        _expenseIconTapView.hidden = YES;
        
        _chatsIconTapView.userInteractionEnabled = YES;
        _chatsIconTapView.hidden = NO;
        
        _listsIconTapView.userInteractionEnabled = YES;
        _listsIconTapView.hidden = NO;
        
        _choreIconTapView.userInteractionEnabled = YES;
        _choreIconTapView.hidden = NO;
        
        _expenseIconImage.image = [UIImage imageNamed:@"TabBarIcons.ExpenseTabClicked.png"];
        _listsIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked.png"];
        _chatsIconImage.image = [UIImage imageNamed:@"TabBarIcons.GroupChatTabNotClicked.png"];
        _choreIconImage.image = [UIImage imageNamed:@"TabBarIcons.ChoreTabNotClicked.png"];
        
        _choreIconLabel.textColor = unSelectedColor;
        _expenseLabelImage.textColor = selectedColor;
        _chatsLabelImage.textColor = unSelectedColor;
        _listsLabelImage.textColor = unSelectedColor;
        
    } else if ([[[[GeneralObject alloc] init] GenerateItemType] isEqualToString:@"List"]) {
        
        _expenseIconTapView.userInteractionEnabled = YES;
        _expenseIconTapView.hidden = NO;
        
        _chatsIconTapView.userInteractionEnabled = YES;
        _chatsIconTapView.hidden = NO;
        
        _listsIconTapView.userInteractionEnabled = NO;
        _listsIconTapView.hidden = YES;
        
        _choreIconTapView.userInteractionEnabled = YES;
        _choreIconTapView.hidden = NO;
        
        _expenseIconImage.image = [UIImage imageNamed:@"TabBarIcons.ExpenseTabNotClicked.png"];
        _listsIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabClicked.png"];
        _chatsIconImage.image = [UIImage imageNamed:@"TabBarIcons.GroupChatTabNotClicked.png"];
        _choreIconImage.image = [UIImage imageNamed:@"TabBarIcons.ChoreTabNotClicked.png"];
        
        _choreIconLabel.textColor = unSelectedColor;
        _expenseLabelImage.textColor = unSelectedColor;
        _chatsLabelImage.textColor = unSelectedColor;
        _listsLabelImage.textColor = selectedColor;
        
        
    } else {
        
        _expenseIconTapView.userInteractionEnabled = YES;
        _expenseIconTapView.hidden = NO;
        
        _chatsIconTapView.userInteractionEnabled = YES;
        _chatsIconTapView.hidden = NO;
        
        _listsIconTapView.userInteractionEnabled = YES;
        _listsIconTapView.hidden = NO;
        
        _choreIconTapView.userInteractionEnabled = NO;
        _choreIconTapView.hidden = YES;
        
        _expenseIconImage.image = [UIImage imageNamed:@"TabBarIcons.ExpenseTabNotClicked.png"];
        _listsIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked.png"];
        _chatsIconImage.image = [UIImage imageNamed:@"TabBarIcons.GroupChatTabNotClicked.png"];
        _choreIconImage.image = [UIImage imageNamed:@"TabBarIcons.ChoreTabClicked.png"];
        
        _choreIconLabel.textColor = selectedColor;
        _expenseLabelImage.textColor = unSelectedColor;
        _chatsLabelImage.textColor = unSelectedColor;
        _listsLabelImage.textColor = unSelectedColor;
        
        
    }
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Primary Parent Data Methods

-(void)SaveQueriedDataToUserDefaults:(BOOL)SaveOnlyPrimaryItemDict {
    
    if ([self->itemType isEqualToString:@"Chore"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:self->itemDict ? self->itemDict : [NSMutableDictionary dictionary] forKey:@"TempItemDict"];
        
        if (SaveOnlyPrimaryItemDict == NO) {
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDict forKey:@"TempItemDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDict forKey:@"TempItemOccurrenceDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArray forKey:@"TempDisplaySectionsArray"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDict forKey:@"TempDisplayDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDict forKey:@"TempDisplayAmountDict"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo2 forKey:@"TempItemDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo2 forKey:@"TempItemOccurrenceDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo2 forKey:@"TempDisplaySectionsArrayNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo2 forKey:@"TempDisplayDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo2 forKey:@"TempDisplayAmountDictNo1"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo3 forKey:@"TempItemDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo3 forKey:@"TempItemOccurrenceDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo3 forKey:@"TempDisplaySectionsArrayNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo3 forKey:@"TempDisplayDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo3 forKey:@"TempDisplayAmountDictNo2"];
            
        }
        
    } else if ([self->itemType isEqualToString:@"Expense"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:self->itemDict ? self->itemDict : [NSMutableDictionary dictionary] forKey:@"TempItemDictNo1"];
        
        if (SaveOnlyPrimaryItemDict == NO) {
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo3 forKey:@"TempItemDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo3 forKey:@"TempItemOccurrenceDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo3 forKey:@"TempDisplaySectionsArray"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo3 forKey:@"TempDisplayDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo3 forKey:@"TempDisplayAmountDict"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDict forKey:@"TempItemDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDict forKey:@"TempItemOccurrenceDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArray forKey:@"TempDisplaySectionsArrayNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDict forKey:@"TempDisplayDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDict forKey:@"TempDisplayAmountDictNo1"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo2 forKey:@"TempItemDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo2 forKey:@"TempItemOccurrenceDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo2 forKey:@"TempDisplaySectionsArrayNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo2 forKey:@"TempDisplayDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo2 forKey:@"TempDisplayAmountDictNo2"];
            
        }
        
    } else if ([self->itemType isEqualToString:@"List"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:self->itemDict forKey:@"TempItemDictNo2"];
        
        if (SaveOnlyPrimaryItemDict == NO) {
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo2 forKey:@"TempItemDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo2 forKey:@"TempItemOccurrenceDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo2 forKey:@"TempDisplaySectionsArray"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo2 forKey:@"TempDisplayDict"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo2 forKey:@"TempDisplayAmountDict"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDictNo3 forKey:@"TempItemDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDictNo3 forKey:@"TempItemOccurrenceDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArrayNo3 forKey:@"TempDisplaySectionsArrayNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDictNo3 forKey:@"TempDisplayDictNo1"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDictNo3 forKey:@"TempDisplayAmountDictNo1"];
            
            [[NSUserDefaults standardUserDefaults] setObject:self->itemDict forKey:@"TempItemDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->itemOccurrencesDict forKey:@"TempItemOccurrenceDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplaySectionsArray forKey:@"TempDisplaySectionsArrayNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayDict forKey:@"TempDisplayDictNo2"];
            [[NSUserDefaults standardUserDefaults] setObject:self->dataDisplayAmountDict forKey:@"TempDisplayAmountDictNo2"];
            
        }
        
    }
    
    [[NSUserDefaults standardUserDefaults] setObject:self->defaultCategoryNameArray forKey:@"TempCategoryNameArray"];
    [[NSUserDefaults standardUserDefaults] setObject:self->defaultCategoryImageArray forKey:@"TempCategoryImageArray"];
    [[NSUserDefaults standardUserDefaults] setObject:self->defaultCategoryIDArray forKey:@"TempCategoryIDArray"];
    
    [[NSUserDefaults standardUserDefaults] setObject:self->sideBarSectionsArray forKey:@"TempSideBarSectionsArray"];
    [[NSUserDefaults standardUserDefaults] setObject:self->sideBarCategorySectionArrayOriginal forKey:@"TempSideBarCategorySectionArrayOriginal"];
    [[NSUserDefaults standardUserDefaults] setObject:self->sideBarCategorySectionArrayAltered forKey:@"TempSideBarCategorySectionArrayAltered"];
    
    [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersArray forKey:@"HomeMembersArray"];
    [[NSUserDefaults standardUserDefaults] setObject:self->homeKeysDict forKey:@"HomeKeysDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->homeKeysArray forKey:@"HomeKeysArray"];
    [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersUnclaimedDict forKey:@"HomeMembersUnclaimedDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersDict forKey:@"HomeMembersDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->notificationSettingsDict forKey:@"NotificationSettingsDict"];

    [[NSUserDefaults standardUserDefaults] setObject:self->topicDict forKey:@"TopicDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->folderDict forKey:@"FolderDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->taskListDict forKey:@"TaskListDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->sectionDict forKey:@"SectionDict"];
    [[NSUserDefaults standardUserDefaults] setObject:self->templateDict forKey:@"TemplateDict"];
    
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", sectionOriginalSection] forKey:@"sectionOriginalSection"];
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", usersSection] forKey:@"usersSection"];
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", tagsSection] forKey:@"tagsSection"];
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", colorsSection] forKey:@"colorsSection"];
    
}

-(void)QueryInitialData_CompletionBlock:(int)totalQueries completedQueries:(int)completedQueries date1:(NSDate *)date1 crashlyticsString:(NSString *)crashlyticsString returningDataDictLocal:(NSMutableDictionary *)returningDataDictLocal completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if (totalQueries == completedQueries) {
        
        NSDate *date2 = [NSDate date];
        if (DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-1 %f", [date2 timeIntervalSinceDate:date1]); }
        
        NSDate *date1_GetItemsForEachItemType = [NSDate date];
        
        [self QueryInitialData_FirstQuery_GetItemsForEachItemType:self->itemDict itemDictNo2:self->itemDictNo2 itemDictNo3:self->itemDictNo3 dataDisplaySectionsArray:self->dataDisplaySectionsArray dataDisplayDict:self->dataDisplayDict dataDisplayAmountDict:self->dataDisplayAmountDict keyArray:self->keyArray itemType:self->itemType homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict taskListDict:self->taskListDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:self->sideBarCategorySectionArrayOriginal returningDataDict:returningDataDictLocal crashlyticsString:crashlyticsString completionHandler:^(BOOL finished) {
            
            self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDictNo1:@[self->taskListDictNo1] taskListDict:self->taskListDict];
            
            NSDate *date4 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.3 %f", [date4 timeIntervalSinceDate:date1_GetItemsForEachItemType]); }
            
            [self General_GenerateItemsToDisplayInBackground:^(BOOL finished) {
                
                NSDate *date3 = [NSDate date];
                NSLog(@"GenerateItemsToDisplay-10 %f", [date3 timeIntervalSinceDate:date1]);
                
                self->EverythingIsThere = YES;
                
                finishBlock(YES);
                
            }];
            
        }];
        
    }
    
}

-(void)QueryInitialData:(void (^)(BOOL finished))finishBlock {
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.7)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    NSDate *date1 = [NSDate date];
    
    if (OriginalDataStored == NO) {
        
        self->itemOccurrencesDict = [NSMutableDictionary dictionary];
        self->itemOccurrencesDictNo2 = [NSMutableDictionary dictionary];
        self->itemOccurrencesDictNo3 = [NSMutableDictionary dictionary];
        
        self->itemDict = [NSMutableDictionary dictionary];
        self->itemDictNo2 = [NSMutableDictionary dictionary];
        self->itemDictNo3 = [NSMutableDictionary dictionary];
        
        self->dataDisplaySectionsArray = [NSMutableArray array];
        self->dataDisplaySectionsArrayNo2 = [NSMutableArray array];
        self->dataDisplaySectionsArrayNo3 = [NSMutableArray array];
        
        self->dataDisplayDict = [NSMutableDictionary dictionary];
        self->dataDisplayDictNo2 = [NSMutableDictionary dictionary];
        self->dataDisplayDictNo3 = [NSMutableDictionary dictionary];
        
        self->dataDisplayAmountDict = [NSMutableDictionary dictionary];
        self->dataDisplayAmountDictNo1 = [NSMutableDictionary dictionary];
        self->dataDisplayAmountDictNo2 = [NSMutableDictionary dictionary];
        self->dataDisplayAmountDictNo3 = [NSMutableDictionary dictionary];
        
    }
    
    NSMutableArray *getStartedNameArray = [@[@"Sign In / Sign Up", @"Find Home"] mutableCopy];
    NSMutableArray *getStartedImageArray = [@[@"SideBarIcons.SignIn", @"SideBarIcons.FindHome"] mutableCopy];
    NSMutableArray *getStartedIDArray = [@[@"", @""] mutableCopy];
    
    defaultCategoryNameArray = @[@"All", @"Today", @"Tomorrow", @"Next 7 Days", @"Assigned To Me", @"Completed", @"Past Due", @"Trash"];
    defaultCategoryImageArray = @[@"SideBarIcons.All", @"SideBarIcons.Today", @"SideBarIcons.Tomorrow", @"SideBarIcons.Next7Days", @"SideBarIcons.AssignedToMe", @"SideBarIcons.Completed", @"SideBarIcons.PastDue", @"SideBarIcons.Trash"];
    defaultCategoryIDArray = @[@"xxx", @"xxx", @"xxx", @"xxx", @"xxx", @"xxx", @"xxx"];
    
    sideBarCategorySectionArrayOriginal = [NSMutableArray array];
    
    if ([[[BoolDataObject alloc] init] NoSignUp]) {
        [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : getStartedNameArray, @"Images" : getStartedImageArray, @"IDs" : getStartedIDArray}];
    }
    
    [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : [@[[[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] ? @"Premium Settings" : @"WeDivvy Premium"] mutableCopy], @"Images" : [@[@"MainCellIcons.PremiumStar"] mutableCopy], @"IDs" : [@[@""] mutableCopy]}];
    [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : defaultCategoryNameArray, @"Images" : defaultCategoryImageArray, @"IDs" : defaultCategoryIDArray}];
    [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : [NSMutableArray array], @"Images" : [NSMutableArray array], @"IDs" : [NSMutableArray array]}];
    [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : [NSMutableArray array], @"Images" : [NSMutableArray array], @"IDs" : [NSMutableArray array]}];
    [sideBarCategorySectionArrayOriginal addObject:@{@"Names" : [NSMutableArray array], @"Images" : [NSMutableArray array], @"IDs" : [NSMutableArray array]}];
    
    __block NSMutableDictionary *returningDataDictLocal = [NSMutableDictionary dictionary];
    
    //    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    //    NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
    //    NSString *collection = [NSString stringWithFormat:@"%@s", itemType];
    
    //    NSString *categoryName = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"];
    //    NSString *currentTabSelected = [[[GeneralObject alloc] init] GenerateItemType];
    //
    //    NSString *dateAppOpenned = [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"];
    //    NSString *currentDate = [NSString stringWithFormat:@"%@", [NSDate date]];
    //
    NSString *crashlyticsString = @"";//[NSString stringWithFormat:@"CategorySelected:%@ CurrentTabSelected:%@ Attempt:1 AttemptItemType:%@ UserID:%@ DateAppOpenned:%@ CurrentDate:%@", categoryName, currentTabSelected, self->itemType, userID, dateAppOpenned, currentDate];
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
                [self GetQueuedQueries];
        
    });
    
    __block int totalQueries = 11;
    __block int completedQueries = 0;
    
    
    
    
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.8)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    
    
    
    
    NSDate *date1_UpdateNotificationStatus = [NSDate date];
    
    [self QueryInitialData_FirstQuery_UpdateNotificationStatus:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.1 %f", [date4 timeIntervalSinceDate:date1_UpdateNotificationStatus]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetSpecificHomeData = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetSpecificHomeData:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.2 %f", [date4 timeIntervalSinceDate:date1_GetSpecificHomeData]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetItemsForEachItemType = [NSDate date];
//    
//    [self QueryInitialData_FirstQuery_GetItemsForEachItemType:self->itemDict itemDictNo2:self->itemDictNo2 itemDictNo3:self->itemDictNo3 dataDisplaySectionsArray:self->dataDisplaySectionsArray dataDisplayDict:self->dataDisplayDict dataDisplayAmountDict:self->dataDisplayAmountDict keyArray:self->keyArray itemType:self->itemType homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict taskListDict:self->taskListDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:self->sideBarCategorySectionArrayOriginal returningDataDict:returningDataDictLocal crashlyticsString:crashlyticsString completionHandler:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.3 %f", [date4 timeIntervalSinceDate:date1_GetItemsForEachItemType]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
//    }];
    
    
    
    
    
    /*
     //
     //
     //Get Folders, TaskLists, Sections, Drafts, Templates, Topics
     //
     //
     */
    
    NSDate *date1_GetFolders = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetFolders:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.4 %f", [date4 timeIntervalSinceDate:date1_GetFolders]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetTaskLists = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetTaskLists:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.5 %f", [date4 timeIntervalSinceDate:date1_GetTaskLists]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetSections = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetSections:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.6 %f", [date4 timeIntervalSinceDate:date1_GetSections]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetTemplates = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetTemplates:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.7 %f", [date4 timeIntervalSinceDate:date1_GetTemplates]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetDrafts = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetDrafts:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.8 %f", [date4 timeIntervalSinceDate:date1_GetDrafts]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetTopics = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GeTopicData:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.9 %f", [date4 timeIntervalSinceDate:date1_GetTopics]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    
    
    
    
    /*
     //
     //
     //Get Unread Notifications, MixPanelID
     //
     //
     */
    
    NSDate *date1_GetUnreadNotifictions = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetUnreadNotifictions:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.11 %f", [date4 timeIntervalSinceDate:date1_GetUnreadNotifictions]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
    NSDate *date1_GetMixPanelID = [NSDate date];
    
    [self QueryInitialData_FirstQuery_GetMixPanelID:^(BOOL finished) {
        
        NSDate *date4 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-0.12 %f", [date4 timeIntervalSinceDate:date1_GetMixPanelID]); }
        
        [self QueryInitialData_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) date1:date1 crashlyticsString:crashlyticsString returningDataDictLocal:returningDataDictLocal completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }];
    
}

#pragma mark - Secondary Parent Data Methods

-(void)GenerateItemsToDisplay:(NSMutableDictionary *)itemDictToUse dataDisplaySectionsArrayToUse:(NSMutableArray *)dataDisplaySectionsArrayToUse dataDisplayDict:(NSMutableDictionary *)dataDisplayDictToUse dataDisplayAmountDict:(NSMutableDictionary *)dataDisplayAmountDictToUse itemTypeToUse:(NSString *)itemTypeToUse keyArrayToUse:(NSArray *)keyArrayToUse dateToCheck:(NSString *)dateToCheck homeMembersDict:(NSMutableDictionary *)homeMembersDict taskListDict:(NSMutableDictionary *)taskListDict sectionDict:(NSMutableDictionary *)sectionDict sideBarCategorySectionArrayAltered:(NSMutableArray *)sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:(NSMutableArray *)sideBarCategorySectionArrayOriginal currentItemDict:(NSMutableDictionary *)currentItemDict completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningItemDictToUse, NSMutableArray *returningDataDisplaySectionsArrayToUse, NSMutableDictionary *returningDataDisplayDict, NSMutableDictionary *returningDataDisplayAmountDict))finishBlock {
    
    __block NSMutableArray *sideBarCategorySectionArrayAlteredCopy = [sideBarCategorySectionArrayAltered mutableCopy];
    __block NSMutableArray *dataDisplaySectionsArrayToUseCopy = [dataDisplaySectionsArrayToUse mutableCopy];
    __block NSMutableDictionary *dataDisplayDictToUseCopy = [dataDisplayDictToUse mutableCopy];
    __block NSMutableDictionary *dataDisplayAmountDictToUseCopy = [dataDisplayAmountDictToUse mutableCopy];
    
    __block int totalQueries = [itemTypeToUse isEqualToString:self->itemType] ? 3 : 2;
    __block int completedQueries = 0;
    
    NSDate *date1 = [NSDate date];
    
    
    
    
    
    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay0 %@", itemDictToUse[@"ItemName"]); }
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemDictToUse[@"ItemTags"] classArr:@[[NSArray class], [NSMutableArray class]]];
    NSMutableArray *itemTagArrayOfArrays = ObjectIsKindOfClass == YES ? itemDictToUse[@"ItemTags"] : [NSMutableArray array];
    
    [self GenerateSectionsArray:itemTagArrayOfArrays taskListDict:taskListDict sectionDict:sectionDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal sectionOriginalSection:sectionOriginalSection usersSection:usersSection tagsSection:tagsSection colorsSection:colorsSection];
    [self GenerateSideBarCategoryArray:sideBarCategorySectionArrayOriginal itemDict:currentItemDict homeMembersDict:homeMembersDict completionHandler:^(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered) {
        
        self->sideBarSectionsArray = [returningSideBarSectionsArray mutableCopy];
        self->sideBarCategorySectionArrayAltered = [returningSideBarCategorySectionArrayAltered mutableCopy];
        
        [self SetUpTopEllipsisContextMenu];
        
        sideBarCategorySectionArrayAlteredCopy = self->sideBarCategorySectionArrayAltered;
       
        [[[DisplayTasksObject alloc] init] GenerateItemsToDisplay:itemDictToUse homeMembersDict:homeMembersDict keyArray:keyArrayToUse itemType:itemTypeToUse completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemsToDisplayDataDict) {
           
            NSDate *date2 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay1 %f", [date2 timeIntervalSinceDate:date1]); }
            
            [[[DisplayTasksObject alloc] init] GenerateItemsToDisplayInSelectedCategory:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemsToDisplayInSelectedCategory) {
                
                BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemsToDisplayInSelectedCategory[@"ItemTags"] classArr:@[[NSArray class], [NSMutableArray class]]];
                NSMutableArray *itemTagArrayOfArrays = ObjectIsKindOfClass == YES ? itemsToDisplayInSelectedCategory[@"ItemTags"] : [NSMutableArray array];
                
                NSMutableArray *dataDisplaySectionsArrayCopy = [self GenerateSectionsArray:itemTagArrayOfArrays taskListDict:taskListDict sectionDict:sectionDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal sectionOriginalSection:self->sectionOriginalSection usersSection:self->usersSection tagsSection:self->tagsSection colorsSection:self->colorsSection];
                
                NSDate *date3 = [NSDate date];
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay2 %f", [date3 timeIntervalSinceDate:date2]); }
                
                [[[DisplayTasksObject alloc] init] GenerateItemsInSelectedCategorySpecificSections:itemsToDisplayInSelectedCategory keyArray:keyArrayToUse itemType:itemTypeToUse sectionsArray:dataDisplaySectionsArrayCopy homeMembersDict:homeMembersDict pinnedDict:self->pinnedDict taskListDict:taskListDict sectionDict:sectionDict completionHandler:^(BOOL finished, NSMutableArray * _Nonnull sectionsArray, NSMutableDictionary * _Nonnull itemsInSelectedCategorySpecificSections) {
                    
                    NSDate *date4 = [NSDate date];
                    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay3 %f", [date4 timeIntervalSinceDate:date3]); }
                    
                    dataDisplaySectionsArrayToUseCopy = sectionsArray ? [sectionsArray mutableCopy] : [NSMutableArray array];
                    dataDisplayDictToUseCopy = itemsInSelectedCategorySpecificSections ? [itemsInSelectedCategorySpecificSections mutableCopy] : [NSMutableDictionary dictionary];
                    
                    if (totalQueries == (completedQueries+=1)) {
                        
                        NSDate *date5 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.1 %f", [date5 timeIntervalSinceDate:date1]); }
                        
                        //                        if ([itemTypeToUse isEqualToString:self->itemType]) {
                        //
                        //                            [self CompleteGenerateItemsToDisplay];
                        //
                        //                        }
                        
                        dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                        
                        finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                        
                    }
                    
                }];
                
            }];
            
            
            
            
            
            if ([itemTypeToUse isEqualToString:self->itemType]) {
                
                //Get Item Amounts For General ItemDict
                
                [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategories:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategories) {
                    
                    NSDate *date5 = [NSDate date];
                    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay4 %f", [date5 timeIntervalSinceDate:date2]); }
                    
                    dataDisplayAmountDictToUseCopy = itemAmountForAllCategories ? [itemAmountForAllCategories mutableCopy] : [NSMutableDictionary dictionary];
                    
                    if (totalQueries == (completedQueries+=1)) {
                        
                        NSDate *date6 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.2 %f", [date6 timeIntervalSinceDate:date1]); }
                        
                        //                        if ([itemTypeToUse isEqualToString:self->itemType]) {
                        //
                        //                            [self CompleteGenerateItemsToDisplay];
                        //
                        //                        }
                        
                        dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                        
                        finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                        
                    }
                    
                }];
                
                //Get Item Amounts For General ItemDict Summary Notification
                
                [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategoriesCopy:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict dateToCheck:dateToCheck completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategoriesNo1) {
                    
                    NSDate *date5 = [NSDate date];
                    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay5 %f", [date5 timeIntervalSinceDate:date2]); }
                    
                    self->dataDisplayAmountDictNo1 = itemAmountForAllCategoriesNo1 ? [itemAmountForAllCategoriesNo1 mutableCopy] : [NSMutableDictionary dictionary];
                    
                    if (totalQueries == (completedQueries+=1)) {
                        
                        NSDate *date6 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.3 %f", [date6 timeIntervalSinceDate:date1]); }
                        
                        //                        if ([itemTypeToUse isEqualToString:self->itemType]) {
                        //
                        //                            [self CompleteGenerateItemsToDisplay];
                        //
                        //                        }
                        
                        dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                        
                        finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                        
                    }
                    
                }];
                
            } else {
                
                //Get Item Amounts For ItemDictNo2 And ItemDictNo3 Summary Notification
                
                [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategoriesCopy:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict dateToCheck:dateToCheck completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategories) {
                    
                    NSDate *date5 = [NSDate date];
                    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay6 %f", [date5 timeIntervalSinceDate:date2]); }
                    
                    dataDisplayAmountDictToUseCopy = itemAmountForAllCategories ? [itemAmountForAllCategories mutableCopy] : [NSMutableDictionary dictionary];
                    
                    if (totalQueries == (completedQueries+=1)) {
                        
                        NSDate *date6 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.4 %f", [date6 timeIntervalSinceDate:date1]); }
                        
                        dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                        
                        finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                        
                    }
                    
                }];
                
            }
            
        }];
        
    }];
    
}

-(void)GenerateItemsToDisplayInBackground:(NSMutableDictionary *)itemDictToUse dataDisplaySectionsArrayToUse:(NSMutableArray *)dataDisplaySectionsArrayToUse dataDisplayDict:(NSMutableDictionary *)dataDisplayDictToUse dataDisplayAmountDict:(NSMutableDictionary *)dataDisplayAmountDictToUse itemTypeToUse:(NSString *)itemTypeToUse keyArrayToUse:(NSArray *)keyArrayToUse dateToCheck:(NSString *)dateToCheck homeMembersDict:(NSMutableDictionary *)homeMembersDict taskListDict:(NSMutableDictionary *)taskListDict sectionDict:(NSMutableDictionary *)sectionDict sideBarCategorySectionArrayAltered:(NSMutableArray *)sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:(NSMutableArray *)sideBarCategorySectionArrayOriginal currentItemDict:(NSMutableDictionary *)currentItemDict completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningItemDictToUse, NSMutableArray *returningDataDisplaySectionsArrayToUse, NSMutableDictionary *returningDataDisplayDict, NSMutableDictionary *returningDataDisplayAmountDict))finishBlock {
    
    __block NSMutableArray *sideBarCategorySectionArrayAlteredCopy = [sideBarCategorySectionArrayAltered mutableCopy];
    __block NSMutableArray *dataDisplaySectionsArrayToUseCopy = [dataDisplaySectionsArrayToUse mutableCopy];
    __block NSMutableDictionary *dataDisplayDictToUseCopy = [dataDisplayDictToUse mutableCopy];
    __block NSMutableDictionary *dataDisplayAmountDictToUseCopy = [dataDisplayAmountDictToUse mutableCopy];
    
    __block int totalQueries = [itemTypeToUse isEqualToString:self->itemType] ? 3 : 2;
    __block int completedQueries = 0;
    
    NSDate *date1 = [NSDate date];
    
    
    
    
    
    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay0 %@", itemDictToUse[@"ItemName"]); }
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemDictToUse[@"ItemTags"] classArr:@[[NSArray class], [NSMutableArray class]]];
    NSMutableArray *itemTagArrayOfArrays = ObjectIsKindOfClass == YES ? itemDictToUse[@"ItemTags"] : [NSMutableArray array];
    
    [self GenerateSectionsArray:itemTagArrayOfArrays taskListDict:taskListDict sectionDict:sectionDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal sectionOriginalSection:sectionOriginalSection usersSection:usersSection tagsSection:tagsSection colorsSection:colorsSection];
    [self GenerateSideBarCategoryArray:sideBarCategorySectionArrayOriginal itemDict:currentItemDict homeMembersDict:homeMembersDict completionHandler:^(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered) {
        
        self->sideBarSectionsArray = [returningSideBarSectionsArray mutableCopy];
        self->sideBarCategorySectionArrayAltered = [returningSideBarCategorySectionArrayAltered mutableCopy];
        
        [self SetUpTopEllipsisContextMenu];
        
        sideBarCategorySectionArrayAlteredCopy = self->sideBarCategorySectionArrayAltered;
        
        [[[DisplayTasksObject alloc] init] GenerateItemsToDisplay:itemDictToUse homeMembersDict:homeMembersDict keyArray:keyArrayToUse itemType:itemTypeToUse completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemsToDisplayDataDict) {
            
            NSDate *date2 = [NSDate date];
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay1 %f -- %@", [date2 timeIntervalSinceDate:date1], itemsToDisplayDataDict[@"ItemName"]); }
                
                [[[DisplayTasksObject alloc] init] GenerateItemsToDisplayInSelectedCategory:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemsToDisplayInSelectedCategory) {
                    
                    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemsToDisplayInSelectedCategory[@"ItemTags"] classArr:@[[NSArray class], [NSMutableArray class]]];
                    NSMutableArray *itemTagArrayOfArrays = ObjectIsKindOfClass == YES ? itemsToDisplayInSelectedCategory[@"ItemTags"] : [NSMutableArray array];
                    
                    NSMutableArray *dataDisplaySectionsArrayCopy = [self GenerateSectionsArray:itemTagArrayOfArrays taskListDict:taskListDict sectionDict:sectionDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal sectionOriginalSection:self->sectionOriginalSection usersSection:self->usersSection tagsSection:self->tagsSection colorsSection:self->colorsSection];
                    
                    NSDate *date3 = [NSDate date];
                    if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay2 %f -- %@", [date3 timeIntervalSinceDate:date2], itemsToDisplayInSelectedCategory[@"ItemName"]); }
                    
                    [[[DisplayTasksObject alloc] init] GenerateItemsInSelectedCategorySpecificSections:itemsToDisplayInSelectedCategory keyArray:keyArrayToUse itemType:itemTypeToUse sectionsArray:dataDisplaySectionsArrayCopy homeMembersDict:homeMembersDict pinnedDict:self->pinnedDict taskListDict:taskListDict sectionDict:sectionDict completionHandler:^(BOOL finished, NSMutableArray * _Nonnull sectionsArray, NSMutableDictionary * _Nonnull itemsInSelectedCategorySpecificSections) {
                        
                        NSDate *date4 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay3 %f -- %@", [date4 timeIntervalSinceDate:date3], itemsInSelectedCategorySpecificSections); }
                        
                        dataDisplaySectionsArrayToUseCopy = sectionsArray ? [sectionsArray mutableCopy] : [NSMutableArray array];
                        
                        dataDisplayDictToUseCopy = itemsInSelectedCategorySpecificSections ? [itemsInSelectedCategorySpecificSections mutableCopy] : [NSMutableDictionary dictionary];
                        
                        if (totalQueries == (completedQueries+=1)) {
                            
                            NSDate *date5 = [NSDate date];
                            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.1 %f", [date5 timeIntervalSinceDate:date1]); }
                           
                            dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                            
                            finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                            
                        }
                        
                    }];
                    
                }];
                
            });
            
            
            
            
            
            if ([itemTypeToUse isEqualToString:self->itemType]) {
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    //Get Item Amounts For General ItemDict
                    
                    [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategories:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategories) {
                        
                        NSDate *date5 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay4 %f -- %@", [date5 timeIntervalSinceDate:date2], itemAmountForAllCategories); }
                        
                        dataDisplayAmountDictToUseCopy = itemAmountForAllCategories ? [itemAmountForAllCategories mutableCopy] : [NSMutableDictionary dictionary];
                        
                        if (totalQueries == (completedQueries+=1)) {
                            
                            NSDate *date6 = [NSDate date];
                            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.2 %f", [date6 timeIntervalSinceDate:date1]); }
                           
                            dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                            
                            finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                            
                        }
                        
                    }];
                    
                });
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    //Get Item Amounts For General ItemDict Summary Notification
                    
                    [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategoriesCopy:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict dateToCheck:dateToCheck completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategoriesNo1) {
                        
                        NSDate *date5 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay5 %f", [date5 timeIntervalSinceDate:date2]); }
                        
                        self->dataDisplayAmountDictNo1 = itemAmountForAllCategoriesNo1 ? [itemAmountForAllCategoriesNo1 mutableCopy] : [NSMutableDictionary dictionary];
                        
                        if (totalQueries == (completedQueries+=1)) {
                            
                            NSDate *date6 = [NSDate date];
                            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.3 %f", [date6 timeIntervalSinceDate:date1]); }
                            
                            //                            if ([itemTypeToUse isEqualToString:self->itemType]) {
                            //
                            //                                [self CompleteGenerateItemsToDisplay];
                            //
                            //                            }
                            
                            dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                            
                            finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                            
                        }
                        
                    }];
                    
                });
                
            } else {
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    //Get Item Amounts For ItemDictNo2 And ItemDictNo3 Summary Notification
                    
                    [[[DisplayTasksObject alloc] init] GenerateItemAmountForAllCategoriesCopy:itemsToDisplayDataDict itemType:itemTypeToUse keyArray:keyArrayToUse homeMembersDict:homeMembersDict sideBarCategoryArray:sideBarCategorySectionArrayAlteredCopy taskListDict:taskListDict dateToCheck:dateToCheck completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull itemAmountForAllCategories) {
                        
                        NSDate *date5 = [NSDate date];
                        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay6 %f", [date5 timeIntervalSinceDate:date2]); }
                        
                        dataDisplayAmountDictToUseCopy = itemAmountForAllCategories ? [itemAmountForAllCategories mutableCopy] : [NSMutableDictionary dictionary];
                        
                        if (totalQueries == (completedQueries+=1)) {
                            
                            NSDate *date6 = [NSDate date];
                            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay7.4 %f", [date6 timeIntervalSinceDate:date1]); }
                            
                            dataDisplaySectionsArrayToUseCopy = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:dataDisplaySectionsArrayToUseCopy];
                            
                            finishBlock(YES, itemDictToUse, dataDisplaySectionsArrayToUseCopy, dataDisplayDictToUseCopy, dataDisplayAmountDictToUseCopy);
                            
                        }
                        
                    }];
                    
                });
                
            }
            
        }];
        
    }];
    
}

#pragma mark -
#pragma mark
#pragma mark

#pragma mark Primary Internal Methods

-(void)QueryInitialData_FirstQuery_UpdateNotificationStatus:(void (^)(BOOL finished))finishBlock {
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.9)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];
    
    [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings *settings) {
        
        BOOL granted = settings.authorizationStatus == UNAuthorizationStatusAuthorized;
        
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"userID == %@", userID];
        [[[SetDataObject alloc] init] SetDataEditCoreData:@"Users" predicate:predicate setDataObject:@{@"Notifications" : granted ? @"Yes" : @"No"}];
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [[[SetDataObject alloc] init] UpdateDataUserData:userID userDict:@{@"Notifications" : granted ? @"Yes" : @"No"} completionHandler:^(BOOL finished, NSError * _Nonnull error) {
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.9.1)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
                
            }];
            
        });
        
        finishBlock(YES);
        
    }];
    
}

-(void)QueryInitialData_FirstQuery_GetSpecificHomeData:(void (^)(BOOL finished))finishBlock {
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.10)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateKeyArrayManually:NO Expense:NO List:NO Home:YES];
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataSpecificHomeData:homeID keyArray:keyArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeToJoinDict, NSMutableArray * _Nonnull queriedHomeMemberArray, NSString * _Nonnull queriedHomeID) {
            
            [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.10.1)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
            
            self->homeDict = returningHomeToJoinDict ? [returningHomeToJoinDict mutableCopy] : [NSMutableDictionary dictionary];
            self->homeMembersArray = returningHomeToJoinDict[@"HomeMembers"] ? [returningHomeToJoinDict[@"HomeMembers"] mutableCopy] : [NSMutableArray array];
            self->homeKeysDict = returningHomeToJoinDict[@"HomeKeys"] ? [returningHomeToJoinDict[@"HomeKeys"] mutableCopy] : [NSMutableDictionary dictionary];
            self->homeKeysArray = returningHomeToJoinDict[@"HomeKeysArray"] ? [returningHomeToJoinDict[@"HomeKeysArray"] mutableCopy] : [NSMutableArray array];
            self->homeMembersUnclaimedDict = returningHomeToJoinDict[@"HomeMembersUnclaimed"] ? [returningHomeToJoinDict[@"HomeMembersUnclaimed"] mutableCopy] : [NSMutableDictionary dictionary];
            
            NSString *myUserID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            NSDictionary *dataDict = [[[GeneralObject alloc] init] GenerateSpecificUserDataBasedOnKey:@"UserID" object:myUserID homeMembersDict:self->homeMembersDict];

            if (dataDict[@"Username"] && [dataDict[@"Username"] length] > 0) {
                [[NSUserDefaults standardUserDefaults] setObject:dataDict[@"Username"] forKey:@"UsersUsername"];
            }
            if (dataDict[@"UsersEmail"] && [dataDict[@"UsersEmail"] length] > 0) {
                [[NSUserDefaults standardUserDefaults] setObject:dataDict[@"UsersEmail"] forKey:@"UsersEmail"];
            }
            if (dataDict[@"UsersProfileImage"] && [dataDict[@"UsersProfileImage"] length] > 0) {
                [[NSUserDefaults standardUserDefaults] setObject:dataDict[@"UsersProfileImage"] forKey:@"UsersProfileImage"];
            }
            
            [self QueryInitialData_FirstQuery_GetSpecificHomeData_AllGetSpecificHomeDataQueries:^(BOOL finished) {
                
                finishBlock(YES);
                
            }];
            
        }];
        
    });
    
}

#pragma mark

-(void)QueryInitialData_FirstQuery_GetUserData:(NSMutableArray *)homeMembersArray completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        //Get Home Member Dict And Check Subscription Status
        
        [[[GetDataObject alloc] init] GetDataUserDataArray:homeMembersArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningUserDict) {
            
            self->homeMembersDict = [returningUserDict mutableCopy];
            
            [[[GeneralObject alloc] init] CheckPremiumSubscriptionStatus:self->homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeMembersDict) {
                
            }];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetNotificationSettingsData:(NSMutableArray *)homeMembersArray completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[GetDataObject alloc] init] GetDataUserNotificationSettingsData:homeMembersArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningNotificationSettingsDict) {
            
            self->notificationSettingsDict = [returningNotificationSettingsDict mutableCopy];
            
            BOOL NotificationSettingsDictFound = YES;
            
            NotificationSettingsDictFound = (self->notificationSettingsDict && self->notificationSettingsDict[userID] && [[self->notificationSettingsDict[userID] allKeys] count] > 0);
            
            if (NotificationSettingsDictFound) {
                
                finishBlock(YES);
                
            } else {
                
                NSDictionary *dataDict = [[[GeneralObject alloc] init] GenerateDefaultNotificationSettingsDict:userID addMorningOverView:YES addEveningOverView:NO];
                
                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"userID == %@", userID];
                [[[SetDataObject alloc] init] SetDataAddCoreData:@"NotificationSettings" predicate:predicate setDataObject:[dataDict mutableCopy]];
                
                [[[SetDataObject alloc] init] SetDataNotificationSettings:userID dataDict:dataDict completionHandler:^(BOOL finished, NSError * _Nonnull error) {
                    
                    self->notificationSettingsDict = [dataDict mutableCopy];
                    
                    finishBlock(YES);
                    
                }];
                
            }
            
        }];
        
    });
    
}

#pragma mark

-(void)QueryInitialData_FirstQuery_GetItemsForEachItemType:(NSMutableDictionary *)itemDict itemDictNo2:(NSMutableDictionary *)itemDictNo2 itemDictNo3:(NSMutableDictionary *)itemDictNo3 dataDisplaySectionsArray:(NSMutableArray *)dataDisplaySectionsArray dataDisplayDict:(NSMutableDictionary *)dataDisplayDict dataDisplayAmountDict:(NSMutableDictionary *)dataDisplayAmountDict keyArray:(NSArray *)keyArray itemType:(NSString *)itemType homeMembersDict:(NSMutableDictionary *)homeMembersDict notificationSettingsDict:(NSMutableDictionary *)notificationSettingsDict topicDict:(NSMutableDictionary *)topicDict taskListDict:(NSMutableDictionary *)taskListDict sideBarCategorySectionArrayAltered:(NSMutableArray *)sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:(NSMutableArray *)sideBarCategorySectionArrayOriginal returningDataDict:(NSMutableDictionary *)returningDataDict crashlyticsString:(NSString *)crashlyticsString completionHandler:(void (^)(BOOL finished))finishBlock {
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.11)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    NSDate *date1 = [NSDate date];
    
    
    
    __block int totalQueries = 3;
    __block int completedQueries = 0;
    
    
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.12)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
        
        [self QueryEachItem_FirstQuery_AllQueries:YES SecondaryType:NO TertiaryType:NO itemDict:itemDict dataDisplaySectionsArray:dataDisplaySectionsArray dataDisplayDict:dataDisplayDict dataDisplayAmountDict:dataDisplayAmountDict homeMembersDict:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal returningDataDict:returningDataDict crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo2, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-6.0 %f", [date11 timeIntervalSinceDate:date1]); }
            
            self->itemDict = [returningDataDictLocalNo1 mutableCopy];
            self->itemOccurrencesDict = [returningDataDictOccurrencesLocalNo1 mutableCopy];
            self->itemOccurrencesDictNo2 = [returningDataDictOccurrencesLocalNo2 mutableCopy];
            
            if (totalQueries == (completedQueries += 1)) {
                
                NSDate *date12 = [NSDate date];
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-7.0 %f", [date12 timeIntervalSinceDate:date1]); }
                
                finishBlock(YES);
                
            }
            
        }];
        
    });
    
    
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [self QueryEachItem_FirstQuery_AllQueries:NO SecondaryType:YES TertiaryType:NO itemDict:itemDict dataDisplaySectionsArray:dataDisplaySectionsArray dataDisplayDict:dataDisplayDict dataDisplayAmountDict:dataDisplayAmountDict homeMembersDict:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal returningDataDict:returningDataDict crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo2, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-6.1 %f", [date11 timeIntervalSinceDate:date1]); }
            
            self->itemDictNo2 = [returningDataDictLocalNo1 mutableCopy];
            self->itemOccurrencesDictNo2 = [returningDataDictOccurrencesLocalNo1 mutableCopy];
            
            if (totalQueries == (completedQueries += 1)) {
                
                NSDate *date12 = [NSDate date];
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-7.1 %f", [date12 timeIntervalSinceDate:date1]); }
              
                finishBlock(YES);
                
            }
            
        }];
        
    });
    
    
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [self QueryEachItem_FirstQuery_AllQueries:NO SecondaryType:NO TertiaryType:YES itemDict:itemDict dataDisplaySectionsArray:dataDisplaySectionsArray dataDisplayDict:dataDisplayDict dataDisplayAmountDict:dataDisplayAmountDict homeMembersDict:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict sideBarCategorySectionArrayAltered:sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal returningDataDict:returningDataDict crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo2, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-6.2 %f", [date11 timeIntervalSinceDate:date1]); }
            
            self->itemDictNo3 = [returningDataDictLocalNo1 mutableCopy];
            self->itemOccurrencesDictNo3 = [returningDataDictOccurrencesLocalNo1 mutableCopy];
            
            if (totalQueries == (completedQueries += 1)) {
                
                NSDate *date12 = [NSDate date];
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-7.2 %f", [date12 timeIntervalSinceDate:date1]); }
                
                finishBlock(YES);
                
            }
            
        }];
        
    });
    
}

-(void)QueryEachItem_FirstQuery_AllQueries:(BOOL)PrimaryType SecondaryType:(BOOL)SecondaryType TertiaryType:(BOOL)TertiaryType itemDict:(NSMutableDictionary *)itemDict dataDisplaySectionsArray:(NSMutableArray *)dataDisplaySectionsArray dataDisplayDict:(NSMutableDictionary *)dataDisplayDict dataDisplayAmountDict:(NSMutableDictionary *)dataDisplayAmountDict homeMembersDict:(NSMutableDictionary *)homeMembersDict notificationSettingsDict:(NSMutableDictionary *)notificationSettingsDict topicDict:(NSMutableDictionary *)topicDict taskListDict:(NSMutableDictionary *)taskListDict sideBarCategorySectionArrayAltered:(NSMutableArray *)sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:(NSMutableArray *)sideBarCategorySectionArrayOriginal returningDataDict:(NSMutableDictionary *)returningDataDict crashlyticsString:(NSString *)crashlyticsString completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo2, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1))finishBlock {
    
    NSDate *date1 = [NSDate date];
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.13)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
    
    
    
    
    __block int totalItemTypeNo1Queries = 4;
    __block int completedItemTypeNo1Queries = 0;
    
    
    
    
    __block NSMutableDictionary *dataDictLocalNo1 = [NSMutableDictionary dictionary];
    __block NSMutableDictionary *dataDictOccurrencesLocalNo1 = [NSMutableDictionary dictionary];
    __block NSMutableDictionary *dataDictOccurrencesLocalNo2 = [NSMutableDictionary dictionary];
    __block NSMutableArray *itemNamesAlreadyUsedLocalNo1 = [NSMutableArray array];
    __block NSMutableArray *allItemAssignedToArraysLocalNo1 = [NSMutableArray array];
    __block NSMutableArray *allItemTagsArraysLocalNo1 = [NSMutableArray array];
    
    
    
    
    NSDictionary *itemTypeDict = [self QueryEachItem_FirstQuery_AllQueries_GenerateItemTypeVariables:PrimaryType SecondaryType:SecondaryType TertiaryType:TertiaryType];
    NSString *itemType = itemTypeDict[@"ItemType"];
    NSArray *keyArray = itemTypeDict[@"KeyArray"];
    NSString *collection = [NSString stringWithFormat:@"%@s", itemTypeDict[@"ItemType"]];
    
    
    
    
    
    [self QueryEachItem_FirstQuery_HomeItemOccurrences_OccurrenceStatusNone_NotFullyCompleted:collection keyArray:keyArray itemType:itemType homeID:homeID homeMembersDict:homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1) {
      
        dataDictOccurrencesLocalNo1 = [returningOccurrencesDictNo1 mutableCopy];
        
        NSDate *date11 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.1 %f -- %d -- %d", [date11 timeIntervalSinceDate:date1], totalItemTypeNo1Queries, completedItemTypeNo1Queries); }
        
        if (totalItemTypeNo1Queries == (completedItemTypeNo1Queries += 1)) {
            
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.0.1"); }
            
            [self QueryEachItem_FirstQuery_AllQueries_CompletionBlock:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict homeID:homeID itemType:itemType keyArray:keyArray date1:date1 dataDictLocalNo1:dataDictLocalNo1 dataDictOccurrencesLocalNo1:dataDictOccurrencesLocalNo1 dataDictOccurrencesLocalNo2:dataDictOccurrencesLocalNo2 itemNamesAlreadyUsedLocalNo1:itemNamesAlreadyUsedLocalNo1 allItemAssignedToArraysLocalNo1:allItemAssignedToArraysLocalNo1 allItemTagsArraysLocalNo1:allItemTagsArraysLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
                
                finishBlock(YES, returningDataDictLocalNo1, returningDataDictOccurrencesLocalNo1, dataDictOccurrencesLocalNo2, returningItemNamesAlreadyUsedLocalNo1, returningAllItemAssignedToArraysLocalNo1, returningAllItemTagsArraysLocalNo1);
                
            }];
            
        }
        
    }];
    
    
    
    
    
    [self QueryEachItem_FirstQuery_HomeItems:collection keyArray:keyArray homeID:homeID crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1) {
        
        NSDate *date11 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.0+2.00 %f", [date11 timeIntervalSinceDate:date1]); }
        
        dataDictLocalNo1 = [returningDataDictLocalNo1 mutableCopy];
        
        itemNamesAlreadyUsedLocalNo1 = dataDictLocalNo1[@"ItemName"] ? [dataDictLocalNo1[@"ItemName"] mutableCopy] : [NSMutableArray array];
        allItemAssignedToArraysLocalNo1 = [[self GenerateAllItemAssignedToArrays:[dataDictLocalNo1 mutableCopy] homeMembersDict:homeMembersDict] mutableCopy];
        allItemTagsArraysLocalNo1 = [[self GenerateAllItemTagsArrays:[dataDictLocalNo1 mutableCopy]] mutableCopy];
        
        
        
        
        
        [self QueryEachItem_FirstQuery_HomeItemOccurrencesEndNumberOfTimes:collection keyArray:keyArray homeID:homeID dictToUse:dataDictLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.2 %f -- %d -- %d", [date11 timeIntervalSinceDate:date1], totalItemTypeNo1Queries, completedItemTypeNo1Queries); }
            
            [dataDictOccurrencesLocalNo2 setObject:returningOccurrencesDictNo1 forKey:@"Occurrences_EndNumberOfTimes"];
            
            if (totalItemTypeNo1Queries == (completedItemTypeNo1Queries += 1)) {
                
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.0.2"); }
                
                [self QueryEachItem_FirstQuery_AllQueries_CompletionBlock:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict homeID:homeID itemType:itemType keyArray:keyArray date1:date1 dataDictLocalNo1:dataDictLocalNo1 dataDictOccurrencesLocalNo1:dataDictOccurrencesLocalNo1 dataDictOccurrencesLocalNo2:dataDictOccurrencesLocalNo2 itemNamesAlreadyUsedLocalNo1:itemNamesAlreadyUsedLocalNo1 allItemAssignedToArraysLocalNo1:allItemAssignedToArraysLocalNo1 allItemTagsArraysLocalNo1:allItemTagsArraysLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
                    
                    finishBlock(YES, returningDataDictLocalNo1, returningDataDictOccurrencesLocalNo1, dataDictOccurrencesLocalNo2, returningItemNamesAlreadyUsedLocalNo1, returningAllItemAssignedToArraysLocalNo1, returningAllItemTagsArraysLocalNo1);
                    
                }];
                
            }
            
        }];
        
        
        
        
        
        [self QueryEachItem_FirstQuery_HomeItemOccurrencesAlternatingTurns_Completions:collection keyArray:keyArray homeID:homeID dictToUse:dataDictLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.3 %f -- %d -- %d", [date11 timeIntervalSinceDate:date1], totalItemTypeNo1Queries, completedItemTypeNo1Queries); }
    
            [dataDictOccurrencesLocalNo2 setObject:returningOccurrencesDictNo1 forKey:@"Completions_AlternatingTurns"];
            
            if (totalItemTypeNo1Queries == (completedItemTypeNo1Queries += 1)) {
                
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.0.3"); }
                
                [self QueryEachItem_FirstQuery_AllQueries_CompletionBlock:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict homeID:homeID itemType:itemType keyArray:keyArray date1:date1 dataDictLocalNo1:dataDictLocalNo1 dataDictOccurrencesLocalNo1:dataDictOccurrencesLocalNo1 dataDictOccurrencesLocalNo2:dataDictOccurrencesLocalNo2 itemNamesAlreadyUsedLocalNo1:itemNamesAlreadyUsedLocalNo1 allItemAssignedToArraysLocalNo1:allItemAssignedToArraysLocalNo1 allItemTagsArraysLocalNo1:allItemTagsArraysLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
                    
                    finishBlock(YES, returningDataDictLocalNo1, returningDataDictOccurrencesLocalNo1, dataDictOccurrencesLocalNo2, returningItemNamesAlreadyUsedLocalNo1, returningAllItemAssignedToArraysLocalNo1, returningAllItemTagsArraysLocalNo1);
                    
                }];
                
            }
            
        }];
        
        
        
        
        
        [self QueryEachItem_FirstQuery_HomeItemOccurrencesAlternatingTurns_Occurrences:collection keyArray:keyArray homeID:homeID dictToUse:dataDictLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1) {
            
            NSDate *date11 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.4 %f -- %d -- %d", [date11 timeIntervalSinceDate:date1], totalItemTypeNo1Queries, completedItemTypeNo1Queries); }
           
            [dataDictOccurrencesLocalNo2 setObject:returningOccurrencesDictNo1 forKey:@"Occurrences_AlternatingTurns"];
            
            if (totalItemTypeNo1Queries == (completedItemTypeNo1Queries += 1)) {
                
                if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-8.0.4"); }
                
                [self QueryEachItem_FirstQuery_AllQueries_CompletionBlock:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict homeID:homeID itemType:itemType keyArray:keyArray date1:date1 dataDictLocalNo1:dataDictLocalNo1 dataDictOccurrencesLocalNo1:dataDictOccurrencesLocalNo1 dataDictOccurrencesLocalNo2:dataDictOccurrencesLocalNo2 itemNamesAlreadyUsedLocalNo1:itemNamesAlreadyUsedLocalNo1 allItemAssignedToArraysLocalNo1:allItemAssignedToArraysLocalNo1 allItemTagsArraysLocalNo1:allItemTagsArraysLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1) {
                    
                    finishBlock(YES, returningDataDictLocalNo1, returningDataDictOccurrencesLocalNo1, dataDictOccurrencesLocalNo2, returningItemNamesAlreadyUsedLocalNo1, returningAllItemAssignedToArraysLocalNo1, returningAllItemTagsArraysLocalNo1);
                    
                }];
                
            }
            
        }];
        
    }];
    
}

-(void)QueryEachItem_FirstQuery_AllQueries_CompletionBlock:(NSMutableDictionary *)homeMembersDict notificationSettingsDict:(NSMutableDictionary *)notificationSettingsDict topicDict:(NSMutableDictionary *)topicDict taskListDict:(NSMutableDictionary *)taskListDict homeID:(NSString *)homeID itemType:(NSString *)itemType keyArray:(NSArray *)keyArray date1:(NSDate *)date1 dataDictLocalNo1:(NSMutableDictionary *)dataDictLocalNo1 dataDictOccurrencesLocalNo1:(NSMutableDictionary *)dataDictOccurrencesLocalNo1 dataDictOccurrencesLocalNo2:(NSMutableDictionary *)dataDictOccurrencesLocalNo2 itemNamesAlreadyUsedLocalNo1:(NSMutableArray *)itemNamesAlreadyUsedLocalNo1 allItemAssignedToArraysLocalNo1:(NSMutableArray *)allItemAssignedToArraysLocalNo1 allItemTagsArraysLocalNo1:(NSMutableArray *)allItemTagsArraysLocalNo1 completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1, NSMutableDictionary *returningDataDictOccurrencesLocalNo1, NSMutableArray *returningItemNamesAlreadyUsedLocalNo1, NSMutableArray *returningAllItemAssignedToArraysLocalNo1, NSMutableArray *returningAllItemTagsArraysLocalNo1))finishBlock {
    
    NSDate *date11 = [NSDate date];
    if (DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-9.2.0 %f", [date11 timeIntervalSinceDate:date1]); }
    
    [self QueryEachItem_FirstQuery_AllQueries_UpdateItemDictWithPastDueOccurrences:dataDictOccurrencesLocalNo1 itemDictCopy:dataDictLocalNo1 completionHandler:^(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1) {
        
        NSDate *date12 = [NSDate date];
        if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-10.2.0 %f", [date12 timeIntervalSinceDate:date11]); }
        
        [[[SetDataObject alloc] init] UpdateDataResetRepeatingTask:returningDataDictLocalNo1 itemOccurrencesDict:dataDictOccurrencesLocalNo2 homeID:homeID itemType:itemType keyArray:keyArray homeMembersDict:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict taskListDict:taskListDict allItemAssignedToArrays:allItemAssignedToArraysLocalNo1 allItemTagsArrays:allItemTagsArraysLocalNo1 SkipOccurrence:NO completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningItemDict, NSMutableDictionary * _Nonnull returningItemOccurrencesDict, NSMutableDictionary * _Nonnull returningUpdatedTaskListDict) {
          
            self->taskListDictNo1 = [returningUpdatedTaskListDict mutableCopy];
            
            NSDate *date13 = [NSDate date];
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-11.2.0 %f", [date13 timeIntervalSinceDate:date12]); }
            
            finishBlock(YES, returningItemDict, returningItemOccurrencesDict, itemNamesAlreadyUsedLocalNo1, allItemAssignedToArraysLocalNo1, allItemTagsArraysLocalNo1);
            
        }];
        
    }];
    
}

-(void)QueryEachItem_FirstQuery_HomeItems:(NSString *)collection keyArray:(NSArray *)keyArray homeID:(NSString *)homeID crashlyticsString:(NSString *)crashlyticsString completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1))finishBlock {
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.15)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    
    NSString *categoryName = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"];
    NSString *currentTabSelected = [[[GeneralObject alloc] init] GenerateItemType];
    
    NSString *dateAppOpenned = [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"];
    NSString *currentDate = [NSString stringWithFormat:@"%@", [NSDate date]];
    
    crashlyticsString = [NSString stringWithFormat:@"CategorySelected:%@ CurrentTabSelected:%@ Attempt:1 CurrentItemType:%@ AttemptCollectionType:%@ UserID:%@ DateAppOpenned:%@ CurrentDate:%@", categoryName, currentTabSelected, self->itemType, collection, userID, dateAppOpenned, currentDate];
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.16)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    if ([collection containsString:@"Chore"]) {
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [[[GetDataObject alloc] init] GetDataItemsInSpecificHome_Chores_BugFix:homeID collection:collection keyArray:keyArray currentViewController:self crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
                
                NSMutableDictionary *dataDictLocalNo1 = [returningDataDict mutableCopy];
                
                finishBlock(YES, dataDictLocalNo1);
                
            }];
            
        });
        
    } else {
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [[[GetDataObject alloc] init] GetDataItemsInSpecificHome:homeID collection:collection keyArray:keyArray currentViewController:self crashlyticsString:crashlyticsString completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
                
                NSMutableDictionary *dataDictLocalNo1 = [returningDataDict mutableCopy];
                
                finishBlock(YES, dataDictLocalNo1);
                
            }];
            
        });
        
    }
    
}

-(void)QueryEachItem_FirstQuery_HomeItemOccurrences_OccurrenceStatusNone_NotFullyCompleted:(NSString *)collection keyArray:(NSArray *)keyArray itemType:(NSString *)itemType homeID:(NSString *)homeID homeMembersDict:(NSMutableDictionary *)homeMembersDict completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[GetDataObject alloc] init] GetDataItemOccurrences_OccurrenceStatusNone_NotFullyCompleted:collection homeID:homeID keyArray:keyArray itemType:itemType homeMembersDict:homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningOccurrencesDict) {
            
            [self QueryEachItem_FirstQuery_HomeItemOccurrences_OccurrenceStatusNone_NotFullyCompleted_UpdateExpiredTasks:[returningOccurrencesDict mutableCopy] collection:collection homeID:homeID completionHandler:^(BOOL finished, NSMutableDictionary *returningOccurrencesDict) {
                
                NSMutableDictionary *dataDictOccurrencesLocalNo1 = [returningOccurrencesDict mutableCopy];
                
                finishBlock(YES, dataDictOccurrencesLocalNo1);
                
            }];
            
        }];
        
    });
    
}

-(void)QueryEachItem_FirstQuery_HomeItemOccurrencesEndNumberOfTimes:(NSString *)collection keyArray:(NSArray *)keyArray homeID:(NSString *)homeID dictToUse:(NSMutableDictionary *)dictToUse completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[GetDataObject alloc] init] GetDataItemOccurrencesEndNumberOfTimes_Amounts:collection homeID:homeID dictToUse:dictToUse keyArray:keyArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningOccurrencesDict) {
            
            NSMutableDictionary *dataDictOccurrencesLocalNo1 = [returningOccurrencesDict mutableCopy];
            
            finishBlock(YES, dataDictOccurrencesLocalNo1);
            
        }];
        
    });
    
}

-(void)QueryEachItem_FirstQuery_HomeItemOccurrencesAlternatingTurns_Completions:(NSString *)collection keyArray:(NSArray *)keyArray homeID:(NSString *)homeID dictToUse:(NSMutableDictionary *)dictToUse completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1))finishBlock {
    
    NSTimeInterval delayInSeconds = 0.1;
    
    dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
   
    dispatch_after(delayTime, dispatch_get_main_queue(), ^{
        
        [[[GetDataObject alloc] init] GetDataItemOccurrencesAlternatingTurnsCompleted_Amounts:collection homeID:homeID dictToUse:dictToUse keyArray:keyArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningOccurrencesDict) {
            
            NSMutableDictionary *dataDictOccurrencesLocalNo1 = [returningOccurrencesDict mutableCopy];
            
            finishBlock(YES, dataDictOccurrencesLocalNo1);
            
        }];
        
    });
    
}

-(void)QueryEachItem_FirstQuery_HomeItemOccurrencesAlternatingTurns_Occurrences:(NSString *)collection keyArray:(NSArray *)keyArray homeID:(NSString *)homeID dictToUse:(NSMutableDictionary *)dictToUse completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningOccurrencesDictNo1))finishBlock {
    
    NSTimeInterval delayInSeconds = 0.2;
    
    dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    
    dispatch_after(delayTime, dispatch_get_main_queue(), ^{
        
        [[[GetDataObject alloc] init] GetDataItemOccurrencesAlternatingTurnsOccurrences_Amounts:collection homeID:homeID dictToUse:dictToUse keyArray:keyArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningOccurrencesDict) {
            
            NSMutableDictionary *dataDictOccurrencesLocalNo1 = [returningOccurrencesDict mutableCopy];
            
            finishBlock(YES, dataDictOccurrencesLocalNo1);
            
        }];
        
    });
    
}

#pragma mark

-(void)QueryInitialData_FirstQuery_GetFolders:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateFolderKeyArray];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataFolders:keyArray userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
            
            self->folderDict = [returningDataDict mutableCopy];
            
            [self QueryInitialData_FirstQuery_GetFolders_AddFolderSideBar];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetTaskLists:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateTaskListKeyArray];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataTaskLists:keyArray userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
            
            self->taskListDict = [returningDataDict mutableCopy];
            
            [self QueryInitialData_FirstQuery_GetTaskLists_AddTaskListSideBar:self->taskListDict];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetSections:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateSectionKeyArray];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataSections:keyArray userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
            
            self->sectionDict = [returningDataDict mutableCopy];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetTemplates:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateTemplateKeyArray];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataTemplates:keyArray userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
            
            self->templateDict = [returningDataDict mutableCopy];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetDrafts:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateDraftKeyArray];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataDrafts:keyArray userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
            
            self->draftDict = [returningDataDict mutableCopy];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GeTopicData:(void (^)(BOOL finished))finishBlock {
    
    NSMutableDictionary *homeMembersDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersDict"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersDict"] : [NSMutableDictionary dictionary];
    
    BOOL UseLocallyGeneratedTopics = [[[BoolDataObject alloc] init] UseLocallyGeneratedTopics:homeMembersDict];
    
    if (UseLocallyGeneratedTopics == YES) {
        
        self->topicDict = [NSMutableDictionary dictionary];
        
        finishBlock(YES);
        
    } else {
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            NSArray *keyArray = [[[GeneralObject alloc] init] GenerateTopicKeyArray];
            
            [[[GetDataObject alloc] init] GetDataTopics:keyArray homeID:self->homeID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDataDict) {
                
                self->topicDict = [returningDataDict mutableCopy];
                
                [self QueryInitialData_FirstQuery_GeTopicData_UpdateTopicData:^(BOOL finished) {
                    
                    finishBlock(YES);
                    
                }];
                
            }];
            
        });
        
    }
    
}

#pragma mark

-(void)QueryInitialData_FirstQuery_GetUnreadNotifictions:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
        [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataUnreadNotificationsCountNotCreatedBySpecificUser:homeID userID:userID completionHandler:^(BOOL finished, NSString * _Nonnull unreadNotificationCount) {
            
            self->unreadNotificationsCount = unreadNotificationCount;
            
            [[NSUserDefaults standardUserDefaults] setObject:self->unreadNotificationsCount forKey:@"NotificationViewCount"];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)QueryInitialData_FirstQuery_GetUnreadHomeActivity:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
        [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataUnreadHomeActivity:homeID userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningActivityDict) {
            
            self->unreadActivityDict = [returningActivityDict mutableCopy];
            
            [[NSUserDefaults standardUserDefaults] setObject:[self->unreadActivityDict mutableCopy] forKey:@"UnreadActivityDict"];
            [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%lu", [(NSArray *)self->unreadActivityDict[@"ActivityID"] count]] forKey:@"UnreadActivityCount"];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

#pragma mark

-(void)QueryInitialData_FirstQuery_GetMixPanelID:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        if (![[NSUserDefaults standardUserDefaults] objectForKey:@"MixPanelID"]) {
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            
            [[[GetDataObject alloc] init] GetDataMixpanelID:userID completionHandler:^(BOOL finished, NSString * _Nonnull mixPanelID) {
                
                [[NSUserDefaults standardUserDefaults] setObject:mixPanelID forKey:@"MixPanelID"];
                
                finishBlock(YES);
                
            }];
            
        } else {
            
            finishBlock(YES);
            
        }
        
    });
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Secondary Sub-Internal Methods

-(void)QueryInitialData_FirstQuery_GetSpecificHomeData_AllGetSpecificHomeDataQueries:(void (^)(BOOL finished))finishBlock {
    
    __block int totalQueries = 2;
    __block int completedQueries = 0;
    
    [self QueryInitialData_FirstQuery_GetUserData:[self->homeMembersArray mutableCopy] completionHandler:^(BOOL finished) {
        
        completedQueries += 1;
        
        if (totalQueries == completedQueries) {
            
            finishBlock(YES);
            
        }
        
    }];
    
    [self QueryInitialData_FirstQuery_GetNotificationSettingsData:[self->homeMembersArray mutableCopy] completionHandler:^(BOOL finished) {
        
        completedQueries += 1;
        
        if (totalQueries == completedQueries) {
            
            finishBlock(YES);
            
        }
        
    }];
    
}

-(void)QueryEachItem_FirstQuery_HomeItemOccurrences_OccurrenceStatusNone_NotFullyCompleted_UpdateExpiredTasks:(NSMutableDictionary *)itemOccurrencesDict collection:(NSString *)collection homeID:(NSString *)homeID completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningOccurrencesDict))finishBlock {
    
    NSMutableArray *objectArr = [NSMutableArray array];
    
    NSMutableArray *itemUniqueIDArray = [itemOccurrencesDict[@"ItemUniqueID"] mutableCopy];
    
    if (itemUniqueIDArray.count == 0) {
        finishBlock(YES, itemOccurrencesDict);
    }
    
    for (NSString *itemUniqueID in itemUniqueIDArray) {
        
        NSUInteger indexRow = [itemUniqueIDArray indexOfObject:itemUniqueID];
        
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:[itemOccurrencesDict mutableCopy] keyArray:self->keyArray indexPath:[NSIndexPath indexPathForRow:indexRow inSection:0]];
        
        BOOL TaskIsExpired = [[[BoolDataObject alloc] init] TaskIsExpired:singleObjectItemDict itemType:itemType homeMembersDict:homeMembersDict];
        BOOL TaskIsOccurrence = [[[BoolDataObject alloc] init] TaskIsOccurrence:singleObjectItemDict itemType:itemType];
        BOOL TaskIsFullyCompleted = [[[BoolDataObject alloc] init] TaskIsFullyCompleted:singleObjectItemDict itemType:itemType homeMembersDict:homeMembersDict];
        
        if (TaskIsExpired == YES && TaskIsOccurrence == YES && TaskIsFullyCompleted == NO) {
            
            NSUInteger index = [itemOccurrencesDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            
            for (NSString *key in [itemOccurrencesDict allKeys]) {
                NSMutableArray *arr = itemOccurrencesDict[key] ? [itemOccurrencesDict[key] mutableCopy] : [NSMutableArray array];
                if ([arr count] > index) { [arr removeObjectAtIndex:index]; }
                [itemOccurrencesDict setObject:arr forKey:key];
            }
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemOccurrenceStatus" : @"Expired"} itemID:singleObjectItemDict[@"ItemID"] itemOccurrenceID:singleObjectItemDict[@"ItemOccurrenceID"] collection:collection homeID:homeID completionHandler:^(BOOL finished) {
                    
                    if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:itemUniqueIDArray objectArr:objectArr]) {
                        
                        finishBlock(YES, itemOccurrencesDict);
                        
                    }
                    
                }];
                
            });
            
        } else {
            
            if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:itemUniqueIDArray objectArr:objectArr]) {
                
                finishBlock(YES, itemOccurrencesDict);
                
            }
            
        }
        
    }
    
}

-(void)QueryEachItem_FirstQuery_AllQueries_UpdateItemDictWithPastDueOccurrences:(NSMutableDictionary *)returningOccurrencesDict itemDictCopy:(NSMutableDictionary *)itemDictCopy completionHandler:(void (^)(BOOL finished, NSMutableDictionary *returningDataDictLocalNo1))finishBlock {
    
    if (returningOccurrencesDict[@"ItemOccurrenceID"]) {
        
        for (int i=0 ; i<[(NSArray *)returningOccurrencesDict[@"ItemOccurrenceID"] count] ; i++) {
            
            //Get ItemDict Of Specific ItemOccurrence
            NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
            
            for (NSString *key in [returningOccurrencesDict allKeys]) {
                
                id object = returningOccurrencesDict[key] && [(NSArray *)returningOccurrencesDict[key] count] > i ? returningOccurrencesDict[key][i] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                [setDataDict setObject:object forKey:key];
                
            }
            
            //Add Specific ItemOccurrence To General ItemDict
            NSDictionary *userInfo = setDataDict ? [setDataDict mutableCopy] : [NSMutableDictionary dictionary];
            
            if ([itemDictCopy[@"ItemUniqueID"] containsObject:userInfo[@"ItemUniqueID"]] == NO) {
                
                for (NSString *key in [userInfo allKeys]) {
                    
                    NSMutableArray *arr = itemDictCopy[key] ? [itemDictCopy[key] mutableCopy] : [NSMutableArray array];
                    id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                    [arr addObject:object];
                    [itemDictCopy setObject:arr forKey:key];
                    
                }
                
            }
            
        }
        
    }
    
    finishBlock(YES, itemDictCopy);
    
}

-(NSDictionary *)QueryEachItem_FirstQuery_AllQueries_GenerateItemTypeVariables:(BOOL)PrimaryType SecondaryType:(BOOL)SecondaryType TertiaryType:(BOOL)TertiaryType {
    
    if (PrimaryType) {
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateKeyArrayManually:[self->itemType containsString:@"Chore"] Expense:[self->itemType containsString:@"Expense"] List:[self->itemType containsString:@"List"] Home:NO];
        
        return @{@"ItemType" : self->itemType, @"KeyArray" : keyArray};
        
    } else if (SecondaryType) {
        
        NSString *itemTypeLocal = @"";
        
        if ([self->itemType containsString:@"Chore"]) {
            itemTypeLocal = @"Expense";
        } else if ([self->itemType containsString:@"Expense"]) {
            itemTypeLocal = @"List";
        } else if ([self->itemType containsString:@"List"]) {
            itemTypeLocal = @"Chore";
        }
        
        self->itemTypeNo2 = itemTypeLocal;
        
        NSArray *keyArrayLocal = [[[GeneralObject alloc] init] GenerateKeyArrayManually:[itemTypeLocal containsString:@"Chore"] Expense:[itemTypeLocal containsString:@"Expense"] List:[itemTypeLocal containsString:@"List"] Home:NO];
        
        self->keyArrayNo2 = keyArrayLocal;
        
        return @{@"ItemType" : itemTypeLocal, @"KeyArray" : keyArrayLocal};
        
    } else if (TertiaryType) {
        
        NSString *itemTypeLocal = @"";
        
        if ([self->itemType containsString:@"Chore"]) {
            itemTypeLocal = @"List";
        } else if ([self->itemType containsString:@"Expense"]) {
            itemTypeLocal = @"Chore";
        } else if ([self->itemType containsString:@"List"]) {
            itemTypeLocal = @"Expense";
        }
        
        self->itemTypeNo3 = itemTypeLocal;
        
        NSArray *keyArrayLocal = [[[GeneralObject alloc] init] GenerateKeyArrayManually:[itemTypeLocal containsString:@"Chore"] Expense:[itemTypeLocal containsString:@"Expense"] List:[itemTypeLocal containsString:@"List"] Home:NO];
        
        self->keyArrayNo3 = keyArrayLocal;
        
        return @{@"ItemType" : itemTypeLocal, @"KeyArray" : keyArrayLocal};
        
    }
    
    NSArray *keyArray = [[[GeneralObject alloc] init] GenerateKeyArrayManually:[self->itemType containsString:@"Chore"] Expense:[self->itemType containsString:@"Expense"] List:[self->itemType containsString:@"List"] Home:NO];
    
    return @{@"ItemType" : self->itemType, @"KeyArray" : keyArray};
    
}

-(void)QueryInitialData_FirstQuery_GetFolders_AddFolderSideBar {
    
    NSMutableArray *folderNames = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    
    NSMutableArray *folderImages = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Images"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Images"] mutableCopy] : [NSMutableArray array];
    
    NSMutableArray *folderIDs = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    
    if (self->folderDict[@"FolderID"]) {
        
        for (NSString *folderID in self->folderDict[@"FolderID"]) {
            
            if ([self->folderDict[@"FolderID"] containsObject:folderID] && [folderIDs containsObject:folderID] == NO) {
                
                NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
                NSString *folderName = self->folderDict[@"FolderName"] && [(NSArray *)self->folderDict[@"FolderName"] count] > index ? self->folderDict[@"FolderName"][index] : @"";
                
                [folderNames addObject:folderName];
                [folderImages addObject:@"SideBarIcons.Folder.png"];
                [folderIDs addObject:folderID];
                
            }
            
        }
        
    }
    
    if ([self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection) {
        
        [self->sideBarCategorySectionArrayOriginal replaceObjectAtIndex:self->folderOriginalSection withObject:@{@"Names" : folderNames, @"Images" : folderImages, @"IDs" : folderIDs}];
        
    }
    
}

-(void)QueryInitialData_FirstQuery_GetFolders_ReplaceFolderSideBar:(NSString *)folderID folderName:(NSString *)folderName {
    
    NSMutableArray *folderNames = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *folderIDs = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    
    NSUInteger index = [folderIDs containsObject:folderID] ? [folderIDs indexOfObject:folderID] : 1000;
    if ([folderNames count] > index) { [folderNames replaceObjectAtIndex:index withObject:folderName]; }
    
    NSMutableArray *sideBarCategorySectionArrayOriginalCopy = self->sideBarCategorySectionArrayOriginal ? [self->sideBarCategorySectionArrayOriginal mutableCopy] : [NSMutableArray array];
    NSMutableDictionary *sideBarCategorySectionInnerDict = [sideBarCategorySectionArrayOriginalCopy count] > self->folderOriginalSection ? [sideBarCategorySectionArrayOriginalCopy[self->folderOriginalSection] mutableCopy] : [NSMutableArray array];
    
    [sideBarCategorySectionInnerDict setObject:folderNames forKey:@"Names"];
    
    if ([sideBarCategorySectionArrayOriginalCopy count] > self->folderOriginalSection) { [sideBarCategorySectionArrayOriginalCopy replaceObjectAtIndex:self->folderOriginalSection withObject:sideBarCategorySectionInnerDict]; }
    [self->sideBarCategorySectionArrayOriginal = sideBarCategorySectionArrayOriginalCopy mutableCopy];
    
}

-(void)QueryInitialData_FirstQuery_GetFolders_RemoveFolderSideBar:(NSString *)folderID folderName:(NSString *)folderName {
    
    NSMutableArray *folderNames = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *folderIDs = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *folderImages = [self->sideBarCategorySectionArrayOriginal count] > self->folderOriginalSection && self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Images"] ? [self->sideBarCategorySectionArrayOriginal[self->folderOriginalSection][@"Images"] mutableCopy] : [NSMutableArray array];
    
    NSUInteger index = [folderIDs containsObject:folderID] ? [folderIDs indexOfObject:folderID] : 1000;
    if ([folderNames count] > index) { [folderNames removeObjectAtIndex:index]; }
    if ([folderIDs count] > index) { [folderIDs removeObjectAtIndex:index]; }
    if ([folderImages count] > index) { [folderImages removeObjectAtIndex:index]; }
    
    NSMutableArray *sideBarCategorySectionArrayOriginalCopy = self->sideBarCategorySectionArrayOriginal ? [self->sideBarCategorySectionArrayOriginal mutableCopy] : [NSMutableArray array];
    NSMutableDictionary *sideBarCategorySectionInnerDict = [sideBarCategorySectionArrayOriginalCopy count] > self->folderOriginalSection ? [sideBarCategorySectionArrayOriginalCopy[self->folderOriginalSection] mutableCopy] : [NSMutableArray array];
    
    [sideBarCategorySectionInnerDict setObject:folderNames forKey:@"Names"];
    [sideBarCategorySectionInnerDict setObject:folderIDs forKey:@"IDs"];
    [sideBarCategorySectionInnerDict setObject:folderImages forKey:@"Images"];
    
    if ([sideBarCategorySectionArrayOriginalCopy count] > self->folderOriginalSection) { [sideBarCategorySectionArrayOriginalCopy replaceObjectAtIndex:self->folderOriginalSection withObject:sideBarCategorySectionInnerDict]; }
    [self->sideBarCategorySectionArrayOriginal = sideBarCategorySectionArrayOriginalCopy mutableCopy];
    
}

-(void)QueryInitialData_FirstQuery_GetTaskLists_AddTaskListSideBar:(NSMutableDictionary *)taskListDict {
    
    NSMutableArray *taskListNames = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection && self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Names"] ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *taskListImages = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection && self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Images"] ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Images"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *taskListIDs = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection && self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"IDs"] ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    
    if (taskListDict[@"TaskListID"]) {
        
        for (NSString *taskListID in taskListDict[@"TaskListID"]) {
            
            if ([taskListDict[@"TaskListID"] containsObject:taskListID] && [taskListIDs containsObject:taskListID] == NO) {
                
                NSUInteger index = [taskListDict[@"TaskListID"] indexOfObject:taskListID];
                NSString *taskListName = [(NSArray *)taskListDict[@"TaskListName"] count] > index ? taskListDict[@"TaskListName"][index] : @"";
                
                [taskListNames addObject:taskListName];
                [taskListImages addObject:@"SideBarIcons.TaskList.png"];
                [taskListIDs addObject:taskListID];
                
            }
            
        }
        
    }
    
    if ([self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection) {
        
        [self->sideBarCategorySectionArrayOriginal replaceObjectAtIndex:self->taskListOriginalSection withObject:@{@"Names" : taskListNames, @"Images" : taskListImages, @"IDs" : taskListIDs}];
        
    }
    
}

-(void)QueryInitialData_FirstQuery_GetTaskLists_ReplaceTaskListSideBar:(NSString *)taskListID taskListName:(NSString *)taskListName oldTaskListName:(NSString *)oldTaskListName {
    
    NSMutableArray *taskListNames = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection && self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Names"] ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *taskListIDs = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection && self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"IDs"] ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    
    NSUInteger index = [taskListIDs containsObject:taskListID] ? [taskListIDs indexOfObject:taskListID] : 1000;
    if ([taskListNames count] > index) { [taskListNames replaceObjectAtIndex:index withObject:taskListName]; }
    
    NSMutableArray *sideBarCategorySectionArrayOriginalCopy = self->sideBarCategorySectionArrayOriginal ? [self->sideBarCategorySectionArrayOriginal mutableCopy] : [NSMutableArray array];
    NSMutableDictionary *sideBarCategorySectionInnerDict = [sideBarCategorySectionArrayOriginalCopy count] > self->taskListOriginalSection ? [sideBarCategorySectionArrayOriginalCopy[self->taskListOriginalSection] mutableCopy] : [NSMutableArray array];
    
    [sideBarCategorySectionInnerDict setObject:taskListNames forKey:@"Names"];
    
    if ([sideBarCategorySectionArrayOriginalCopy count] > self->taskListOriginalSection) { [sideBarCategorySectionArrayOriginalCopy replaceObjectAtIndex:self->taskListOriginalSection withObject:sideBarCategorySectionInnerDict]; }
    [self->sideBarCategorySectionArrayOriginal = sideBarCategorySectionArrayOriginalCopy mutableCopy];
    
    if (dataDisplayAmountDict[oldTaskListName]) {
        NSString *amount = [dataDisplayAmountDict[oldTaskListName] mutableCopy];
        [dataDisplayAmountDict removeObjectForKey:oldTaskListName];
        [dataDisplayAmountDict setObject:amount forKey:taskListName];
    }
    
}

-(void)QueryInitialData_FirstQuery_GeTopicData_UpdateTopicData:(void (^)(BOOL finished))finishBlock {
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    
    if ([(NSArray *)self->topicDict[@"TopicID"] count] == 0) {
        
        finishBlock(YES);
        
    }
    
    NSMutableArray *objectArr = [NSMutableArray array];
    
    for (NSString *topicID in self->topicDict[@"TopicID"]) {
        
        NSUInteger index = [self->topicDict[@"TopicID"] indexOfObject:topicID];
        NSMutableArray *topicAssignedTo = self->topicDict[@"TopicAssignedTo"][index];
        NSMutableArray *topicSubscribedTo = self->topicDict[@"TopicSubscribedTo"][index];
        NSString *topicDeleted = self->topicDict[@"TopicDeleted"][index];
        
        if ([topicSubscribedTo containsObject:userID] && [topicDeleted isEqualToString:@"Yes"]) {
            
            NSMutableArray *topicSubscribedToCopy = [self->topicDict[@"TopicSubscribedTo"][index] mutableCopy];
            if ([topicSubscribedToCopy containsObject:userID]) { [topicSubscribedToCopy removeObject:userID]; }
            
            [[[SetDataObject alloc] init] SubsribeOrUnsubscribeAndUpdateTopic:homeID topicID:topicID itemOccurrenceID:@"" dataDict:@{@"TopicSubscribedTo" : topicSubscribedToCopy} SubscribeToTopic:NO UnsubscribeFromTopic:YES completionHandler:^(BOOL finished) {
                
                if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[self->topicDict[@"TopicID"] mutableCopy] objectArr:objectArr]) {
                    
                    finishBlock(YES);
                    
                }
                
            }];
            
        } else if ([topicSubscribedTo containsObject:userID] && [topicAssignedTo containsObject:userID] == NO) {
            
            NSMutableArray *topicSubscribedToCopy = [self->topicDict[@"TopicSubscribedTo"][index] mutableCopy];
            if ([topicSubscribedToCopy containsObject:userID]) { [topicSubscribedToCopy removeObject:userID]; }
            
            [[[SetDataObject alloc] init] SubsribeOrUnsubscribeAndUpdateTopic:homeID topicID:topicID itemOccurrenceID:@"" dataDict:@{@"TopicSubscribedTo" : topicSubscribedToCopy} SubscribeToTopic:NO UnsubscribeFromTopic:YES completionHandler:^(BOOL finished) {
                
                if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[self->topicDict[@"TopicID"] mutableCopy] objectArr:objectArr]) {
                    
                    finishBlock(YES);
                    
                }
                
            }];
            
        } else if ([topicSubscribedTo containsObject:userID] == NO && [topicAssignedTo containsObject:userID] == YES) {
            
            NSMutableArray *topicSubscribedToCopy = [self->topicDict[@"TopicSubscribedTo"][index] mutableCopy];
            if ([topicSubscribedToCopy containsObject:userID] == NO) { [topicSubscribedToCopy addObject:userID]; }
            
            [[[SetDataObject alloc] init] SubsribeOrUnsubscribeAndUpdateTopic:homeID topicID:topicID itemOccurrenceID:@"" dataDict:@{@"TopicSubscribedTo" : topicSubscribedToCopy} SubscribeToTopic:YES UnsubscribeFromTopic:NO completionHandler:^(BOOL finished) {
                
                if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[self->topicDict[@"TopicID"] mutableCopy] objectArr:objectArr]) {
                    
                    finishBlock(YES);
                    
                }
                
            }];
            
        } else {
            
            if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[self->topicDict[@"TopicID"] mutableCopy] objectArr:objectArr]) {
                
                finishBlock(YES);
                
            }
            
        }
        
    }
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Tertiary Internal Methods

-(void)GenerateSideBarCategoryArray:(NSMutableArray *)sideBarCategorySectionArrayOriginal itemDict:(NSMutableDictionary *)itemDict homeMembersDict:(NSMutableDictionary *)homeMembersDict completionHandler:(void (^)(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered))finishBlock {
    
    NSMutableArray *sideBarSectionsArray = [NSMutableArray array];
    NSMutableArray *sideBarCategorySectionArrayAltered = [NSMutableArray array];
    
    NSMutableArray *getStartedNameArray = [@[@"Sign In / Sign Up", @"Find Home"] mutableCopy];
    NSMutableArray *getStartedImageArray = [@[@"SideBarIcons.SignIn", @"SideBarIcons.FindHome"] mutableCopy];
    NSMutableArray *getStartedIDArray = [@[@"", @""] mutableCopy];
    
    NSMutableArray *premiumNameArray = [@[[[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] ? @"Premium Settings" : @"WeDivvy Premium"] mutableCopy];
    NSMutableArray *premiumImageArray = [@[@"MainCellIcons.PremiumStar"] mutableCopy];
    NSMutableArray *premiumIDArray = [@[@""] mutableCopy];
    
    NSMutableArray *defaultNameArray = [sideBarCategorySectionArrayOriginal count] > generalSection && sideBarCategorySectionArrayOriginal[generalSection][@"Names"] ? [sideBarCategorySectionArrayOriginal[generalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *defaultImageArray = [sideBarCategorySectionArrayOriginal count] > generalSection && sideBarCategorySectionArrayOriginal[generalSection][@"Images"] ? [sideBarCategorySectionArrayOriginal[generalSection][@"Images"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *defaultIDArray = [sideBarCategorySectionArrayOriginal count] > generalSection && sideBarCategorySectionArrayOriginal[generalSection][@"IDs"] ? [sideBarCategorySectionArrayOriginal[generalSection][@"IDs"] mutableCopy] : [NSMutableArray array];
    
    NSMutableArray *folderNameArray = [sideBarCategorySectionArrayOriginal count] > folderOriginalSection && sideBarCategorySectionArrayOriginal[folderOriginalSection][@"Names"] ? [sideBarCategorySectionArrayOriginal[folderOriginalSection][@"Names"] mutableCopy] : [NSMutableArray array];
    
    NSMutableArray *taskListNameArray = [NSMutableArray array];
    NSMutableArray *taskListImageArray = [NSMutableArray array];
    NSMutableArray *taskListIDArray = [NSMutableArray array];
    
    
    
    
    NSMutableArray *userNameArray = [NSMutableArray array];
    
    if (homeMembersDict[@"Username"]) {
        
        for (NSString *username in homeMembersDict[@"Username"]) {
            
            if ([userNameArray containsObject:username] == NO) {
                
                [userNameArray addObject:username];
                
            }
            
        }
        
    }
    
    userNameArray = [[userNameArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
    
    NSMutableArray *userImageArray = [NSMutableArray array];
    NSMutableArray *userIDArray = [NSMutableArray array];
    
    for (int i=0 ; i<userNameArray.count ; i++) {
        
        [userImageArray addObject:@"SideBarIcons.AssignedToMe.png"];
        
        NSUInteger indexOfUsername = homeMembersDict && homeMembersDict[@"Username"] && [homeMembersDict[@"Username"] containsObject:userNameArray[i]] ? [homeMembersDict[@"Username"] indexOfObject:userNameArray[i]] : -1;
        NSString *userID =
        indexOfUsername != -1 && homeMembersDict && homeMembersDict[@"UserID"] && [(NSArray *)homeMembersDict[@"UserID"] count] > indexOfUsername ?
        homeMembersDict[@"UserID"][indexOfUsername] : @"xxx";
        
        [userIDArray addObject:userID];
        
    }
    
    
    
    
    NSMutableArray *tagNameArray = [NSMutableArray array];
    
    if (itemDict[@"ItemTags"]) {
        
        for (NSMutableArray *tagArray in itemDict[@"ItemTags"]) {
            
            for (NSString *itemTag in tagArray) {
                
                if ([tagNameArray containsObject:itemTag] == NO) {
                    
                    [tagNameArray addObject:itemTag];
                    
                }
                
            }
            
        }
        
    }
    
    tagNameArray = [[tagNameArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
    
    NSMutableArray *tagImageArray = [NSMutableArray array];
    NSMutableArray *tagIDArray = [NSMutableArray array];
    
    for (int i=0 ; i<tagNameArray.count ; i++) {
        [tagImageArray addObject:@"SideBarIcons.Tag.png"];
        [tagIDArray addObject:@"xxx"];
    }
    
    
    
    
    NSMutableArray *allColorsArray = [NSMutableArray array];
    
    if (itemDict[@"ItemColor"]) {
        
        for (NSString *itemColor in itemDict[@"ItemColor"]) {
            
            if ([itemColor isEqualToString:@"None"] == NO && [itemColor isEqualToString:@""] == NO) {
                
                if ([allColorsArray containsObject:itemColor] == NO) {
                    
                    [allColorsArray addObject:itemColor];
                    
                }
                
            }
            
        }
        
    }
    
    allColorsArray = [[allColorsArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
    
    NSMutableArray *colorImageArray = [NSMutableArray array];
    NSMutableArray *colorIDArray = [NSMutableArray array];
    
    for (int i=0 ; i<allColorsArray.count ; i++) {
        [colorImageArray addObject:@"SideBarIcons.Color.png"];
        [colorIDArray addObject:@"xxx"];
    }
    
    
    
    
    
    NSMutableDictionary *taskListsFound = [NSMutableDictionary dictionary];
    
    if ([sideBarCategorySectionArrayOriginal count] > taskListOriginalSection && sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"IDs"]) {
        
        for (int i=0 ; i<[(NSArray *)sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"IDs"] count] ; i++) {
            
            NSString *taskListName = [sideBarCategorySectionArrayOriginal count] > taskListOriginalSection && sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Names"] && [(NSArray *)sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Names"] count] > i ? sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Names"][i] : @"";
            NSString *taskListImage = [sideBarCategorySectionArrayOriginal count] > taskListOriginalSection && sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Images"] && [(NSArray *)sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Images"] count] > i ? sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"Images"][i] : @"";
            NSString *taskListID = [sideBarCategorySectionArrayOriginal count] > taskListOriginalSection && sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"IDs"] && [(NSArray *)sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"IDs"] count] > i ? sideBarCategorySectionArrayOriginal[taskListOriginalSection][@"IDs"][i] : @"";
           
            BOOL TaskListBelongsToFolder = false;
            
            for (NSString *folderID in folderDict[@"FolderID"]) {
                
                NSUInteger indexOfFolder = [folderDict[@"FolderID"] indexOfObject:folderID];
                
                NSString *folderName = [(NSArray *)folderDict[@"FolderName"] count] > indexOfFolder ? folderDict[@"FolderName"][indexOfFolder] : @"";
                NSMutableDictionary *folderTaskLists = [(NSArray *)folderDict[@"FolderTaskLists"] count] > indexOfFolder ? [folderDict[@"FolderTaskLists"][indexOfFolder] mutableCopy] : [NSMutableDictionary dictionary];
                
                for (NSString *taskListID in [folderTaskLists allKeys]) {
                    
                    if ([taskListDict[@"TaskListID"] containsObject:taskListID]) {
                        
                        NSUInteger index = [taskListDict[@"TaskListID"] indexOfObject:taskListID];
                        NSString *taskListNameInner = [(NSArray *)taskListDict[@"TaskListName"] count] > index ? taskListDict[@"TaskListName"][index] : @"";
                        
                        if ([taskListName isEqualToString:taskListNameInner]) {
                            
                            TaskListBelongsToFolder = true;
                            
                            if (taskListsFound[folderName]) {
                                
                                NSMutableArray *nameArr = [taskListsFound[folderName][@"Names"] mutableCopy];
                                NSMutableArray *imageArr = [taskListsFound[folderName][@"Images"] mutableCopy];
                                NSMutableArray *IDArr = [taskListsFound[folderName][@"IDs"] mutableCopy];
                                
                                [nameArr addObject:taskListName];
                                [imageArr addObject:taskListImage];
                                [IDArr addObject:taskListID];
                                
                                [taskListsFound setObject:@{@"Names" : nameArr, @"Images" : imageArr, @"IDs" : IDArr} forKey:folderName];
                                
                            } else {
                                
                                [taskListsFound setObject:@{@"Names" : @[taskListName], @"Images" : @[taskListImage], @"IDs" : @[taskListID]} forKey:folderName];
                                
                            }
                            
                            break;
                            
                        }
                        
                    }
                    
                }
                
            }
          
            if (TaskListBelongsToFolder == false) {
               
                [taskListNameArray addObject:taskListName];
                [taskListImageArray addObject:taskListImage];
                [taskListIDArray addObject:taskListID];
                
            }
            
        }
        
    }
    
    taskListNameArray = [[taskListNameArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
    
    
    
    
    
    NSDictionary *getStartedDict = @{@"Names" : getStartedNameArray, @"Images" : getStartedImageArray, @"IDs" : getStartedIDArray};
    NSDictionary *premiumdDict = @{@"Names" : premiumNameArray, @"Images" : premiumImageArray, @"IDs" : premiumIDArray};
    NSDictionary *defaultDict = @{@"Names" : defaultNameArray, @"Images" : defaultImageArray, @"IDs" : defaultIDArray};
    NSDictionary *groupsDict = @{@"Names" : [NSMutableArray array], @"Images" : [NSMutableArray array], @"IDs" : [NSMutableArray array]};
    NSDictionary *userDict = @{@"Names" : userNameArray, @"Images" : userImageArray, @"IDs" : userIDArray};
    NSDictionary *tagDict = @{@"Names" : tagNameArray, @"Images" : tagImageArray, @"IDs" : tagIDArray};
    NSDictionary *colorDict = @{@"Names" : allColorsArray, @"Images" : colorImageArray, @"IDs" : colorIDArray};
    NSDictionary *taskListDict = @{@"Names" : taskListNameArray, @"Images" : taskListImageArray, @"IDs" : taskListIDArray};
    
    if ([[[BoolDataObject alloc] init] NoSignUp]) {
        
        NSArray *arrayOfSideBarDicts = @[getStartedDict, premiumdDict, defaultDict, groupsDict, userDict, tagDict, colorDict, taskListDict];
        
        for (int i=0 ; i<arrayOfSideBarDicts.count ; i++) {
            
            NSDictionary *dictToUse = arrayOfSideBarDicts[i];
            
            if ([sideBarCategorySectionArrayAltered count] > i && [sideBarCategorySectionArrayAltered containsObject:dictToUse] == NO) {
                [sideBarCategorySectionArrayAltered replaceObjectAtIndex:i withObject:dictToUse];
            } else {
                [sideBarCategorySectionArrayAltered addObject:dictToUse];
            }
            
        }
        
    } else {
        
        NSArray *arrayOfSideBarDicts = @[premiumdDict, defaultDict, groupsDict, userDict, tagDict, colorDict, taskListDict];
        
        for (int i=0 ; i<arrayOfSideBarDicts.count ; i++) {
            
            NSDictionary *dictToUse = arrayOfSideBarDicts[i];
            
            if ([sideBarCategorySectionArrayAltered count] > i && [sideBarCategorySectionArrayAltered containsObject:dictToUse] == NO) {
                
                [sideBarCategorySectionArrayAltered replaceObjectAtIndex:i withObject:dictToUse];
                
            } else {
                
                BOOL DictToUseIsEmpty =
                [(NSArray *)dictToUse[@"Names"] count] == 0 &&
                [(NSArray *)dictToUse[@"Images"] count] == 0 &&
                [(NSArray *)dictToUse[@"IDs"] count] == 0;
                
                if ([sideBarCategorySectionArrayAltered containsObject:dictToUse] == NO || DictToUseIsEmpty == YES) {
                    [sideBarCategorySectionArrayAltered addObject:dictToUse];
                }
                
            }
            
        }
        
    }
    
    
    
    
    
    NSMutableArray *arrayToUse = [[[BoolDataObject alloc] init] NoSignUp] ?
    [@[@"Get Started", @"Premium", @"General", @"Groups", @"Users", @"Tags", @"Colors", @"My Lists"] mutableCopy] :
    [@[@"Premium", @"General", @"Groups", @"Users", @"Tags", @"Colors", @"My Lists"] mutableCopy];
    
    for (NSString *sectionName in arrayToUse) {
        
        if ([sideBarSectionsArray containsObject:sectionName] == NO) {
            
            [sideBarSectionsArray addObject:sectionName];
            
        }
        
    }
    
    for (NSString *folderName in folderNameArray) {
        
        if ([sideBarSectionsArray containsObject:folderName] == NO) {
            [sideBarSectionsArray addObject:folderName];
        }
        
        NSMutableArray *nameArr = taskListsFound[folderName] && taskListsFound[folderName][@"Names"] ? taskListsFound[folderName][@"Names"] : [NSMutableArray array];
        NSMutableArray *imageArr = taskListsFound[folderName] && taskListsFound[folderName][@"Images"] ? taskListsFound[folderName][@"Images"] : [NSMutableArray array];
        NSMutableArray *IDArr = taskListsFound[folderName] && taskListsFound[folderName][@"IDs"] ? taskListsFound[folderName][@"IDs"] : [NSMutableArray array];
        
        NSDictionary *dictToUse = @{@"Names" : nameArr, @"Images" : imageArr, @"IDs" : IDArr};
        
        //        if ([sideBarCategorySectionArrayAltered containsObject:dictToUse] == NO) {
        [sideBarCategorySectionArrayAltered addObject:dictToUse];
        //        }
        
    }
    
    sideBarSectionsArray = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:sideBarSectionsArray];
   
    finishBlock(YES, sideBarSectionsArray, sideBarCategorySectionArrayAltered);
}

-(NSMutableArray *)GenerateSectionsArray:(NSMutableArray *)itemTagsArrayOfArrays taskListDict:(NSMutableDictionary *)taskListDict sectionDict:(NSMutableDictionary *)sectionDict sideBarCategorySectionArrayAltered:(NSMutableArray *)sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:(NSMutableArray *)sideBarCategorySectionArrayOriginal sectionOriginalSection:(int)sectionOriginalSection usersSection:(int)usersSection tagsSection:(int)tagsSection colorsSection:(int)colorsSection {
    
    NSMutableArray *sectionsArray = [NSMutableArray array];
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    
    BOOL UserSelected = [sideBarCategorySectionArrayAltered count] > usersSection && sideBarCategorySectionArrayAltered[usersSection][@"Names"] ? [sideBarCategorySectionArrayAltered[usersSection][@"Names"] containsObject:sectionSelected] : NO;
    BOOL TagSelected = [sideBarCategorySectionArrayAltered count] > tagsSection && sideBarCategorySectionArrayAltered[tagsSection][@"Names"] ? [sideBarCategorySectionArrayAltered[tagsSection][@"Names"] containsObject:sectionSelected] : NO;
    BOOL ColorSelected = [sideBarCategorySectionArrayAltered count] > colorsSection && sideBarCategorySectionArrayAltered[colorsSection][@"Names"] ? [sideBarCategorySectionArrayAltered[colorsSection][@"Names"] containsObject:sectionSelected] : NO;
    BOOL ListSelected = taskListDict[@"TaskListName"] && [taskListDict[@"TaskListName"] containsObject:sectionSelected];
    
    NSString *sortSelectedDefault = [[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultCategory"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultCategory"] : @"By Date";
    
    if ((TagSelected && [sortSelectedDefault isEqualToString:@"By Tag"]) ||
        (ColorSelected && [sortSelectedDefault isEqualToString:@"By Color"]) ||
        (ListSelected && [sortSelectedDefault isEqualToString:@"By List"]) ||
        (UserSelected == NO && TagSelected == NO && ColorSelected == NO && ListSelected == NO && [sortSelectedDefault isEqualToString:@"Custom"])) {
        
        sortSelectedDefault = @"By Date";
        
        [[NSUserDefaults standardUserDefaults] setObject:sortSelectedDefault forKey:@"SortSelectedDefaultCategory"];
        
        [self SetUpTopEllipsisContextMenu];
        
        if (UserSelected == NO && TagSelected == NO && ColorSelected == NO && ListSelected == NO && [sortSelectedDefault isEqualToString:@"Custom"]) {
            self.customTableView.dragDelegate = nil;
            self.customTableView.dragInteractionEnabled = false;
        }
   
    }
  
    if ([sortSelectedDefault isEqualToString:@"By Name"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Name" forKey:@"SortSelectedDefaultCategory"];
        
        [sectionsArray addObject:@"Pinned To Home"];
        
        [sectionsArray addObject:@"Pinned"];
        
        [sectionsArray addObject:@"@"];
        [sectionsArray addObject:@"%"];
        [sectionsArray addObject:@"+"];
        [sectionsArray addObject:@"\\"];
        [sectionsArray addObject:@"/"];
        [sectionsArray addObject:@"'"];
        [sectionsArray addObject:@"!"];
        [sectionsArray addObject:@"#"];
        [sectionsArray addObject:@"$"];
        [sectionsArray addObject:@"^"];
        [sectionsArray addObject:@"?"];
        [sectionsArray addObject:@":"];
        [sectionsArray addObject:@","];
        [sectionsArray addObject:@"."];
        [sectionsArray addObject:@"("];
        [sectionsArray addObject:@")"];
        [sectionsArray addObject:@"{"];
        [sectionsArray addObject:@"}"];
        [sectionsArray addObject:@"["];
        [sectionsArray addObject:@"]"];
        [sectionsArray addObject:@"~"];
        
        [sectionsArray addObject:@"0"];
        [sectionsArray addObject:@"1"];
        [sectionsArray addObject:@"2"];
        [sectionsArray addObject:@"3"];
        [sectionsArray addObject:@"4"];
        [sectionsArray addObject:@"5"];
        [sectionsArray addObject:@"6"];
        [sectionsArray addObject:@"7"];
        [sectionsArray addObject:@"8"];
        [sectionsArray addObject:@"9"];
        
        [sectionsArray addObject:@"A"];
        [sectionsArray addObject:@"B"];
        [sectionsArray addObject:@"C"];
        [sectionsArray addObject:@"D"];
        [sectionsArray addObject:@"E"];
        [sectionsArray addObject:@"F"];
        [sectionsArray addObject:@"G"];
        [sectionsArray addObject:@"H"];
        [sectionsArray addObject:@"I"];
        [sectionsArray addObject:@"J"];
        [sectionsArray addObject:@"K"];
        [sectionsArray addObject:@"L"];
        [sectionsArray addObject:@"M"];
        [sectionsArray addObject:@"N"];
        [sectionsArray addObject:@"O"];
        [sectionsArray addObject:@"P"];
        [sectionsArray addObject:@"Q"];
        [sectionsArray addObject:@"R"];
        [sectionsArray addObject:@"S"];
        [sectionsArray addObject:@"T"];
        [sectionsArray addObject:@"U"];
        [sectionsArray addObject:@"V"];
        [sectionsArray addObject:@"W"];
        [sectionsArray addObject:@"X"];
        [sectionsArray addObject:@"Y"];
        [sectionsArray addObject:@"Z"];
        //sectionsArray = [@[@"Pinned", @"Unpinned"] mutableCopy];
        
    } else if ([sortSelectedDefault isEqualToString:@"By Date"] || sortSelectedDefault == nil || sortSelectedDefault == NULL || sortSelectedDefault.length == 0) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Date" forKey:@"SortSelectedDefaultCategory"];
       
        if ([sectionSelected isEqualToString:@"All"] || UserSelected == YES || TagSelected == YES || ColorSelected == YES || ListSelected == YES) {
            
            sectionsArray = [@[@"Pinned", @"Past Due", @"Today", @"Tomorrow", @"Next 7 Days", @"Upcoming", @"No Due Date", @"Scheduled"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Today"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Today"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Tomorrow"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Tomorrow"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Next 7 Days"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Today", @"Tomorrow", @"Next 7 Days"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Assigned To Me"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Past Due", @"Today", @"Tomorrow", @"Next 7 Days", @"Upcoming", @"No Due Date", @"Scheduled"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Completed"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Completed"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Past Due"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Past Due"] mutableCopy];
            
        } else if ([sectionSelected isEqualToString:@"Trash"]) {
            
            sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Past Due", @"Today", @"Tomorrow", @"Next 7 Days", @"Upcoming", @"No Due Date", @"Scheduled"] mutableCopy];
            
        }
        
    } else if ([sortSelectedDefault isEqualToString:@"By Difficulty"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Difficulty" forKey:@"SortSelectedDefaultCategory"];
        
        sectionsArray = [@[@"Pinned To Home", @"Pinned", @"Hard", @"Medium", @"Easy", @"No Difficulty"] mutableCopy];
        
    } else if ([sortSelectedDefault isEqualToString:@"By Priority"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Priority" forKey:@"SortSelectedDefaultCategory"];
        
        sectionsArray = [@[@"Pinned To Home", @"Pinned", @"High Priority", @"Medium Priority", @"Low Priority", @"No Priority"] mutableCopy];
        
    } else if ([sortSelectedDefault isEqualToString:@"By Color"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Color" forKey:@"SortSelectedDefaultCategory"];
        
        sectionsArray = [[[[GeneralObject alloc] init] GenerateColorOptionsArray] mutableCopy];
        
        if ([sectionsArray count] > 0) { [sectionsArray replaceObjectAtIndex:0 withObject:@"No Color"]; }
        
    } else if ([sortSelectedDefault isEqualToString:@"By Tag"]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"By Tag" forKey:@"SortSelectedDefaultCategory"];
        
        NSMutableArray *allTags = [NSMutableArray array];
        
        BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemTagsArrayOfArrays classArr:@[[NSArray class], [NSMutableArray class]]];
        
        if (ObjectIsKindOfClass == YES) {
            
            for (NSMutableArray *tagArray in itemTagsArrayOfArrays) {
                
                BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:tagArray classArr:@[[NSArray class], [NSMutableArray class]]];
                
                if (ObjectIsKindOfClass == YES) {
                    
                    for (NSString *tag in tagArray) {
                        
                        [allTags addObject:tag];
                        
                    }
                    
                }
                
            }
            
        }
        
        sectionsArray = [[allTags sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
        
        [sectionsArray insertObject:@"Pinned" atIndex:0];
        [sectionsArray insertObject:@"Pinned To Home" atIndex:0];
        [sectionsArray addObject:@"No Tag"];
        
    } else if ([sortSelectedDefault isEqualToString:@"By List"]) {
        
        sectionsArray = [sideBarCategorySectionArrayOriginal count] > sectionOriginalSection && sideBarCategorySectionArrayOriginal[sectionOriginalSection][@"Names"] ? [[sideBarCategorySectionArrayOriginal[sectionOriginalSection][@"Names"] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy] : [NSMutableArray array];
        
        [sectionsArray insertObject:@"Pinned" atIndex:0];
        [sectionsArray insertObject:@"Pinned To Home" atIndex:0];
        [sectionsArray addObject:@"No List"];
        
    } else if ([sortSelectedDefault isEqualToString:@"Custom"]) {
        
        for (NSString *sectionName in sectionDict[@"SectionName"]) {
            
            [sectionsArray addObject:sectionName];
            
        }
        
        sectionsArray = [[sectionsArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
        
        [sectionsArray insertObject:@"Not Sectioned" atIndex:0];
        [sectionsArray insertObject:@"Pinned To Home" atIndex:0];
        
    } else if ([sortSelectedDefault containsString:@"Assigned To"]) {
        
        NSString *sectionName = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:sortSelectedDefault arrayOfSymbols:@[@"Assigned To"]];
        
        [sectionsArray addObject:sectionName];
        
        sectionsArray = [[sectionsArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
        
        [sectionsArray insertObject:@"Pinned To Home" atIndex:0];
        
    } else if ([sortSelectedDefault containsString:@"Created By ••• "]) {
        
        NSString *sectionName = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:sortSelectedDefault arrayOfSymbols:@[@"Created By ••• "]];
        
        [sectionsArray addObject:sectionName];
        
        sectionsArray = [[sectionsArray sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
        
        [sectionsArray insertObject:@"Pinned To Home" atIndex:0];
        
    }
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] isEqualToString:@"Yes"] ||
        [[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] == NULL ||
        [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompletedToggledAtLeastOnce"] isEqualToString:@"Yes"] == NO) {
        
        [sectionsArray addObject:@"Completed"];
        
    }
    
    NSMutableArray *sectionsArrayWithoutDuplicates = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:sectionsArray];
    
    return sectionsArrayWithoutDuplicates;
    
}

-(void)CompleteGenerateItemsToDisplay {
    
    [[[GeneralObject alloc] init] AllGenerateTokenMethod:@"AllHomeTopics" Subscribe:YES GrantedNotifications:NO];
    
    
    
    int completedNum = self->dataDisplayAmountDict[@"Completed"] ? [(NSString *)self->dataDisplayAmountDict[@"Completed"] intValue] : 0;
    
    if (completedNum == 0 && [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompletedToggledAtLeastOnce"] isEqualToString:@"Yes"] == NO) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"ShowCompleted"];
        
        if ([dataDisplaySectionsArray containsObject:@"Completed"]) {
            [dataDisplaySectionsArray removeObject:@"Completed"];
        }
        if ([[dataDisplayDict allKeys] containsObject:@"Completed"]) {
            [dataDisplayDict removeObjectForKey:@"Completed"];
        }
        
    }
    
    
    
    if (self->dataDisplayDict.count == 0) {
        [self SetUpTopEllipsisContextMenu];
    }
    
    [self SetUpBottomFolderContextMenu];
    
    
    
    [self UpdateSideBarRedCircleViews];
    
    
    NSLog(@"SaveQueriedDataToUserDefaults CompleteGenerateItemsToDisplay");
    [self SaveQueriedDataToUserDefaults:NO];
    
    
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self EmptyTableViewHiddenStatus];
        [self AdjustTableViewHeight];
        
        [self.customTableView reloadData];
        [self.sideBarTableView reloadData];
        
        [self->progressView setHidden:YES];
        [self->activityControl stopAnimating];
      
        BOOL PremiumUserHasHousemateOrFamilyPlan = [[[BoolDataObject alloc] init] PremiumUserHasHousemateOrFamilyPlan:self->homeMembersDict purchasingUserID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
        
        if (PremiumUserHasHousemateOrFamilyPlan == NO && [[[NSUserDefaults standardUserDefaults] objectForKey:@"UgradeWeDivvyPremiumPopupDismissed"] isEqualToString:@"Yes"] == NO) {
            
            [[[GeneralObject alloc] init] DisplayWeDivvyPremiumSideBarPopup:^(BOOL finished) {
                
                self->DisplayUpgradePremiumView = YES;
                
                [self.sideBarTableView beginUpdates];
                [self.sideBarTableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:0 inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
                [self.sideBarTableView endUpdates];
                
            }];
            
        }
        
        
        
        BOOL PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium = [[[BoolDataObject alloc] init] PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium:self->homeMembersDict purchasingUserID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
        
        if (PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium) {
            
            BOOL UnusedPremiumNotificationExists = [[[BoolDataObject alloc] init] PremiumUnusedAccountsNotificationExists];
            
            if (UnusedPremiumNotificationExists == NO) {
                
                [[[NotificationsObject alloc] init] SendLocalNotificationUnusedPremiumAccountsReminderNotification_LocalOnly:^(BOOL finished) {
                    
                }];
                
            }
            
        } else {
            
            [[[NotificationsObject alloc] init] RemoveLocalNotificationUnusedPremiumAccountsNotifications_LocalOnly:^(BOOL finished) {
                
            }];
            
        }
        
        
        
        [[[NotificationsObject alloc] init] SendLocalNotificationHomeMemberNoInvitationNotification_LocalOnly:self->homeKeysDict homeMembersUnclaimedDict:self->homeMembersUnclaimedDict completionHandler:^(BOOL finished) {
            
        }];
        
        [[[NotificationsObject alloc] init] SendLocalNotificationHomeMemberHasNotJoinedNotification_LocalOnly:self->homeKeysDict homeMembersUnclaimedDict:self->homeMembersUnclaimedDict completionHandler:^(BOOL finished) {
            
        }];
        
        [[[NotificationsObject alloc] init] SendLocalNotificationPurchasePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
            
        }];
        
        [[[NotificationsObject alloc] init] SendLocalNotificationUpgradePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
            
        }];
        
    });
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark UI Methods

-(void)StartProgressView {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        self->progressView = [MRProgressOverlayView showOverlayAddedTo:self.navigationController.view animated:YES];
        self->progressView.mode = MRProgressOverlayViewModeIndeterminateSmall;
        
    });
    
}

//-(void)StartProgressViewCircular {
//
//    self->progressViewNo1 = [MRProgressOverlayView showOverlayAddedTo:self.navigationController.view animated:YES];
//    self->progressViewNo1.mode = MRProgressOverlayViewModeDeterminateHorizontalBar;
//
//}

-(void)AdjustTabBarFrame {
    
    _addTaskButtonCover.hidden = YES;
    
    NSArray *arr =
    [[NSUserDefaults standardUserDefaults] objectForKey:@"VisibleTabBarOptions"] ?
    [[NSUserDefaults standardUserDefaults] objectForKey:@"VisibleTabBarOptions"] :
    @[@"🧹 Chores", @"💵 Expenses", @"📝 Lists", @"💬 Group Chats"];
    
    UIImageView *imageView1 = nil;
    UIImageView *imageView2 = nil;
    UIImageView *imageView3 = nil;
    UIImageView *imageView4 = nil;
    
    UILabel *label1 = nil;
    UILabel *label2 = nil;
    UILabel *label3 = nil;
    UILabel *label4 = nil;
    
    UIView *view1 = nil;
    UIView *view2 = nil;
    UIView *view3 = nil;
    UIView *view4 = nil;
    
    //    _choreIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked"];
    //    _expenseIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked"];
    //    _listsIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked"];
    //    _chatsIconImage.image = [UIImage imageNamed:@"TabBarIcons.ListTabNotClicked"];
    //
    //    _choreIconLabel.text = @"Lists";
    //    _expenseLabelImage.text = @"Lists";
    //    _listsLabelImage.text = @"Lists";
    //    _chatsLabelImage.text = @"Lists";
    
    for (int i=0 ; i<arr.count ; i++) {
        
        if (i == 0) {
            
            if ([arr[i] containsString:@"Chores"]) {
                
                imageView1 = _choreIconImage;
                label1 = _choreIconLabel;
                view1 = _choreIconTapView;
                
            } else if ([arr[i] containsString:@"Expenses"]) {
                
                imageView1 = _expenseIconImage;
                label1 = _expenseLabelImage;
                view1 = _expenseIconTapView;
                
            } else if ([arr[i] containsString:@"Lists"]) {
                
                imageView1 = _listsIconImage;
                label1 = _listsLabelImage;
                view1 = _listsIconTapView;
                
            } else if ([arr[i] containsString:@"Chats"]) {
                
                imageView1 = _chatsIconImage;
                label1 = _chatsLabelImage;
                view1 = _chatsIconTapView;
                
            }
            
        } else if (i == 1) {
            
            if ([arr[i] containsString:@"Chores"]) {
                
                imageView2 = _choreIconImage;
                label2 = _choreIconLabel;
                view2 = _choreIconTapView;
                
            } else if ([arr[i] containsString:@"Expenses"]) {
                
                imageView2 = _expenseIconImage;
                label2 = _expenseLabelImage;
                view2 = _expenseIconTapView;
                
            } else if ([arr[i] containsString:@"Lists"]) {
                
                imageView2 = _listsIconImage;
                label2 = _listsLabelImage;
                view2 = _listsIconTapView;
                
            } else if ([arr[i] containsString:@"Chats"]) {
                
                imageView2 = _chatsIconImage;
                label2 = _chatsLabelImage;
                view2 = _chatsIconTapView;
                
            }
            
        } else if (i == 2) {
            
            if ([arr[i] containsString:@"Chores"]) {
                
                imageView3 = _choreIconImage;
                label3 = _choreIconLabel;
                view3 = _choreIconTapView;
                
            } else if ([arr[i] containsString:@"Expenses"]) {
                
                imageView3 = _expenseIconImage;
                label3 = _expenseLabelImage;
                view3 = _expenseIconTapView;
                
            } else if ([arr[i] containsString:@"Lists"]) {
                
                imageView3 = _listsIconImage;
                label3 = _listsLabelImage;
                view3 = _listsIconTapView;
                
            } else if ([arr[i] containsString:@"Chats"]) {
                
                imageView3 = _chatsIconImage;
                label3 = _chatsLabelImage;
                view3 = _chatsIconTapView;
                
            }
            
        } else if (i == 3) {
            
            if ([arr[i] containsString:@"Chores"]) {
                
                imageView4 = _choreIconImage;
                label4 = _choreIconLabel;
                view4 = _choreIconTapView;
                
            } else if ([arr[i] containsString:@"Expenses"]) {
                
                imageView4 = _expenseIconImage;
                label4 = _expenseLabelImage;
                view4 = _expenseIconTapView;
                
            } else if ([arr[i] containsString:@"Lists"]) {
                
                imageView4 = _listsIconImage;
                label4 = _listsLabelImage;
                view4 = _listsIconTapView;
                
            } else if ([arr[i] containsString:@"Chats"]) {
                
                imageView4 = _chatsIconImage;
                label4 = _chatsLabelImage;
                view4 = _chatsIconTapView;
                
            }
            
        }
        
    }
    
    if ([arr containsObject:@"🧹 Chores"] == NO) {
        
        _choreIconImage.hidden = YES;
        _choreIconLabel.hidden = YES;
        _choreIconTapView.hidden = YES;
        
    } else {
        
        _choreIconImage.hidden = NO;
        _choreIconLabel.hidden = NO;
        _choreIconTapView.hidden = NO;
        
    }
    
    if ([arr containsObject:@"💵 Expenses"] == NO) {
        
        _expenseIconImage.hidden = YES;
        _expenseLabelImage.hidden = YES;
        _expenseIconTapView.hidden = YES;
        
    } else {
        
        _expenseIconImage.hidden = NO;
        _expenseLabelImage.hidden = NO;
        _expenseIconTapView.hidden = NO;
        
    }
    
    if ([arr containsObject:@"📝 Lists"] == NO) {
        
        _listsIconImage.hidden = YES;
        _listsLabelImage.hidden = YES;
        _listsIconTapView.hidden = YES;
        
    } else {
        
        _listsIconImage.hidden = NO;
        _listsLabelImage.hidden = NO;
        _listsIconTapView.hidden = NO;
        
    }
    
    if ([arr containsObject:@"💬 Group Chats"] == NO) {
        
        _chatsIconImage.hidden = YES;
        _chatsLabelImage.hidden = YES;
        _chatsIconTapView.hidden = YES;
        
    } else {
        
        _chatsIconImage.hidden = NO;
        _chatsLabelImage.hidden = NO;
        _chatsIconTapView.hidden = NO;
        
    }
    
    CGFloat width = CGRectGetWidth(_tabBarView.bounds);
    CGFloat height = CGRectGetHeight(_tabBarView.bounds);
    
    //    CGFloat xView1 = 0;
    //    CGFloat xView2 = 0;
    //    CGFloat xView3 = 0;
    //    CGFloat xView4 = 0;
    
    if (arr.count == 1) {
        
        imageView1.frame = CGRectMake(self.view.frame.size.width*0.25 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label1.frame = CGRectMake(imageView1.frame.origin.x - 50 + ((imageView1.frame.size.width)*0.5), imageView1.frame.origin.y + imageView1.frame.size.height + 2.33, 100, ((imageView1.frame.size.width)*0.325));
        
        view1.frame = CGRectMake(imageView1.frame.origin.x - (((width*0.09661836))*0.5), imageView1.frame.origin.y - (((width*0.09661836))*0.5), imageView1.frame.size.width + (width*0.09661836), imageView1.frame.size.height + (width*0.09661836));
        
        
        
        _addTaskButton.frame = CGRectMake(self.view.frame.size.width*0.75 - ((width*0.133)*0.5), 0 - ((width*0.133)*0.25), (width*0.133), (width*0.133));
        _addTaskButtonImage.frame = CGRectMake(_addTaskButton.frame.origin.x + (_addTaskButton.frame.size.width*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), _addTaskButton.frame.origin.y + (_addTaskButton.frame.size.height*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), (_addTaskButton.frame.size.width*0.412), (_addTaskButton.frame.size.width*0.412));
        
    } else if (arr.count == 2) {
        
        imageView1.frame = CGRectMake(self.view.frame.size.width*0.225 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label1.frame = CGRectMake(imageView1.frame.origin.x - 50 + ((imageView1.frame.size.width)*0.5), imageView1.frame.origin.y + imageView1.frame.size.height + 2.33, 100, ((imageView1.frame.size.width)*0.325));
        
        view1.frame = CGRectMake(imageView1.frame.origin.x - (((width*0.09661836))*0.5), imageView1.frame.origin.y - (((width*0.09661836))*0.5), imageView1.frame.size.width + (width*0.09661836), imageView1.frame.size.height + (width*0.09661836));
        
        
        
        _addTaskButton.frame = CGRectMake(self.view.frame.size.width*0.5 - ((width*0.133)*0.5), 0 - ((width*0.133)*0.25), (width*0.133), (width*0.133));
        _addTaskButtonImage.frame = CGRectMake(_addTaskButton.frame.origin.x + (_addTaskButton.frame.size.width*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), _addTaskButton.frame.origin.y + (_addTaskButton.frame.size.height*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), (_addTaskButton.frame.size.width*0.412), (_addTaskButton.frame.size.width*0.412));
        
        
        
        imageView2.frame = CGRectMake(self.view.frame.size.width*0.775 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label2.frame = CGRectMake(imageView2.frame.origin.x - 50 + ((imageView2.frame.size.width)*0.5), imageView2.frame.origin.y + imageView2.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view2.frame = CGRectMake(imageView2.frame.origin.x - (((width*0.09661836))*0.5), imageView2.frame.origin.y - (((width*0.09661836))*0.5), imageView2.frame.size.width + (width*0.09661836), imageView2.frame.size.height + (width*0.09661836));
        
    } else if (arr.count == 3) {
        
        imageView1.frame = CGRectMake(self.view.frame.size.width*0.185 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label1.frame = CGRectMake(imageView1.frame.origin.x - 50 + ((imageView1.frame.size.width)*0.5), imageView1.frame.origin.y + imageView1.frame.size.height + 2.33, 100, ((imageView1.frame.size.width)*0.325));
        
        view1.frame = CGRectMake(imageView1.frame.origin.x - (((width*0.09661836))*0.5), imageView1.frame.origin.y - (((width*0.09661836))*0.5), imageView1.frame.size.width + (width*0.09661836), imageView1.frame.size.height + (width*0.09661836));
        
        
        
        imageView2.frame = CGRectMake(self.view.frame.size.width*0.395 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label2.frame = CGRectMake(imageView2.frame.origin.x - 50 + ((imageView2.frame.size.width)*0.5), imageView2.frame.origin.y + imageView2.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view2.frame = CGRectMake(imageView2.frame.origin.x - (((width*0.09661836))*0.5), imageView2.frame.origin.y - (((width*0.09661836))*0.5), imageView2.frame.size.width + (width*0.09661836), imageView2.frame.size.height + (width*0.09661836));
        
        
        
        imageView3.frame = CGRectMake(self.view.frame.size.width*0.605 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label3.frame = CGRectMake(imageView3.frame.origin.x - 50 + ((imageView3.frame.size.width)*0.5), imageView3.frame.origin.y + imageView3.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view3.frame = CGRectMake(imageView3.frame.origin.x - (((width*0.09661836))*0.5), imageView3.frame.origin.y - (((width*0.09661836))*0.5), imageView3.frame.size.width + (width*0.09661836), imageView3.frame.size.height + (width*0.09661836));
        
        
        
        _addTaskButton.frame = CGRectMake(self.view.frame.size.width*0.815 - ((width*0.133)*0.5), 0 - ((width*0.133)*0.25), (width*0.133), (width*0.133));
        _addTaskButtonImage.frame = CGRectMake(_addTaskButton.frame.origin.x + (_addTaskButton.frame.size.width*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), _addTaskButton.frame.origin.y + (_addTaskButton.frame.size.height*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), (_addTaskButton.frame.size.width*0.412), (_addTaskButton.frame.size.width*0.412));
        
        
    } else if (arr.count == 4) {
        
        imageView1.frame = CGRectMake(self.view.frame.size.width*0.5 - ((width*0.09661836)*0.5) - width*0.09661836 - self.view.frame.size.width*0.2675, height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label1.frame = CGRectMake(imageView1.frame.origin.x - 50 + ((imageView1.frame.size.width)*0.5), imageView1.frame.origin.y + imageView1.frame.size.height + 2.33, 100, ((imageView1.frame.size.width)*0.325));
        
        view1.frame = CGRectMake(imageView1.frame.origin.x - (((width*0.09661836))*0.5), imageView1.frame.origin.y - (((width*0.09661836))*0.5), imageView1.frame.size.width + (width*0.09661836), imageView1.frame.size.height + (width*0.09661836));
        
        
        
        imageView2.frame = CGRectMake(self.view.frame.size.width*0.5 - ((width*0.09661836)*0.5) - self.view.frame.size.width*0.195, height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label2.frame = CGRectMake(imageView2.frame.origin.x - 50 + ((imageView2.frame.size.width)*0.5), imageView2.frame.origin.y + imageView2.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view2.frame = CGRectMake(imageView2.frame.origin.x - (((width*0.09661836))*0.5), imageView2.frame.origin.y - (((width*0.09661836))*0.5), imageView2.frame.size.width + (width*0.09661836), imageView2.frame.size.height + (width*0.09661836));
        
        
        
        _addTaskButton.frame = CGRectMake(width*0.5 - ((width*0.133)*0.5), 0 - ((width*0.133)*0.25), (width*0.133), (width*0.133));
        _addTaskButtonImage.frame = CGRectMake(_addTaskButton.frame.origin.x + (_addTaskButton.frame.size.width*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), _addTaskButton.frame.origin.y + (_addTaskButton.frame.size.height*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), (_addTaskButton.frame.size.width*0.412), (_addTaskButton.frame.size.width*0.412));
        
        
        
        imageView3.frame = CGRectMake(self.view.frame.size.width*0.5 - ((width*0.09661836)*0.5) + self.view.frame.size.width*0.195, height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label3.frame = CGRectMake(imageView3.frame.origin.x - 50 + ((imageView3.frame.size.width)*0.5), imageView3.frame.origin.y + imageView3.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view3.frame = CGRectMake(imageView3.frame.origin.x - (((width*0.09661836))*0.5), imageView3.frame.origin.y - (((width*0.09661836))*0.5), imageView3.frame.size.width + (width*0.09661836), imageView3.frame.size.height + (width*0.09661836));
        
        
        
        imageView4.frame = CGRectMake(self.view.frame.size.width*0.5 - ((width*0.09661836)*0.5) + width*0.09661836 + self.view.frame.size.width*0.2675, height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
        label4.frame = CGRectMake(imageView4.frame.origin.x - 50 + ((imageView4.frame.size.width)*0.5), imageView4.frame.origin.y + imageView4.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
        
        view4.frame = CGRectMake(imageView4.frame.origin.x - (((width*0.09661836))*0.5), imageView4.frame.origin.y - (((width*0.09661836))*0.5), imageView4.frame.size.width + (width*0.09661836), imageView4.frame.size.height + (width*0.09661836));
        
    }
    
}

-(void)AdjustTableViewHeight {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    CGFloat bottomPadding = [[[GeneralObject alloc] init] GetBottomPaddingHeight];
    CGFloat scrollViewHeight = self.view.frame.size.height*10;
    
    int totalAmountOfCells = 0;
    int totalAmountOfSections = (int)dataDisplaySectionsArray.count;
    
    
    
    for (NSString *section in self->dataDisplaySectionsArray) {
        
        NSMutableDictionary *dictToUse = self->dataDisplayDict[section] ? self->dataDisplayDict[section] : [NSMutableDictionary dictionary];
        
        if (dictToUse[@"ItemID"]) {
            
            totalAmountOfCells += [(NSArray *)dictToUse[@"ItemID"] count];
            
        }
        
    }
    
    
    
    CGFloat totalCellHeight = 0;
    
    for (NSString *section in dataDisplaySectionsArray) {
        
        if (cellHeightsDicts[section]) {
            
            for (NSDictionary *dict in cellHeightsDicts[section]) {
                
                for (NSString *key in [dict allKeys]) {
                    
                    NSString *cell = dict[key];
                    
                    totalCellHeight += [cell floatValue];
                    
                }
                
            }
            
        }
        
    }
    
    
    
    CGFloat tableViewHeight = totalCellHeight;
    tableViewHeight += totalAmountOfSections * mainTableViewSectionHeight;
    
    CGRect newRect = self->_customTableView.frame;
    
    newRect.size.height =
    (![[NSUserDefaults standardUserDefaults] objectForKey:@"OpenningSection"] ||
     [[[NSUserDefaults standardUserDefaults] objectForKey:@"OpenningSection"] isEqualToString:@"No"]) ?
    tableViewHeight + bottomPadding + (height*0.033967 > 25?(25):height*0.033967) + self.tabBarView.frame.size.height :
    tableViewHeight + (height*0.033967 > 25?(25):height*0.033967) + self.tabBarView.frame.size.height;
    
    self->_customTableView.frame = newRect;
    
    
    
    scrollViewHeight = self->_customTableView.frame.size.height;
    
    CGFloat maxHeight = self.view.frame.size.height + 1;
    
    if (scrollViewHeight < maxHeight) {
        scrollViewHeight = maxHeight;
    }
    
    self->_customScrollView.contentSize = CGSizeMake(width, scrollViewHeight);
    
}

-(void)EmptyTableViewHiddenStatus {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        BOOL ItemFound = NO;
        
        ItemFound = self->dataDisplaySectionsArray.count > 0;
        
        self->_emptyTableViewView.hidden = ItemFound;
        
    });
    
}

-(float)GenerateCellHeight:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath {
    
    MainCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MainCell"];
    
    
    
    NSMutableDictionary *dictToUse = [self GenerateSpecificIndexPathSectionDataDict:indexPath];
    
    CGFloat height = CGRectGetHeight(cell.mainView.bounds);
    CGFloat width = CGRectGetWidth(cell.mainView.bounds);
    
    NSArray *itemTags = dictToUse[@"ItemTags"] && [(NSArray *)dictToUse[@"ItemTags"] count] > indexPath.row ? dictToUse[@"ItemTags"][indexPath.row] : [NSArray array];
    
    NSMutableArray *tagSubViews = [NSMutableArray array];
    CGFloat tabSubViewHeight = (height*0.21052632 > 12?(12):height*0.21052632);
    
    int cellHeight = mainTableViewCellHeight;
    
    int totalLines = 1;
    
    for (int i=0; i<itemTags.count; i++) {
        
        NSString *tagText = [NSString stringWithFormat:@"#%@", itemTags[i]];
        
        BOOL changeYPos = false;
        
        BOOL TagAlreadyAdded = NO;
        
        for (UIButton *subView in cell.mainView.subviews) {
            
            if (subView.tag == 100) {
                
                [tagSubViews addObject:subView];
                
                if ([subView.titleLabel.text isEqualToString:tagText]) {
                    TagAlreadyAdded = YES;
                }
                
            }
            
        }
        
        if (TagAlreadyAdded == NO) {
            
            NSString *tagText = [NSString stringWithFormat:@"#%@", itemTags[i]];
            CGFloat gapBetweenStartAndEndHorizontalTags = cell.checkmarkView.frame.origin.x;
            CGFloat gapBetweenTagsToUse = (width*0.01604278 > 6?(6):width*0.01604278);
            CGFloat yGapToUse = (height*0.10526316 > 6?(6):height*0.10526316);
            UIButton *lastHorizontalSubView = [(UIButton *)[tagSubViews lastObject] tag] == 100 ? [tagSubViews lastObject] : nil;
            CGFloat xPos = lastHorizontalSubView != nil ? lastHorizontalSubView.frame.origin.x + lastHorizontalSubView.frame.size.width + gapBetweenTagsToUse : gapBetweenStartAndEndHorizontalTags;
            
            CGFloat tagWidth = [[[GeneralObject alloc] init] WidthOfString:tagText withFont:[UIFont systemFontOfSize:tabSubViewHeight*1.083333 weight:UIFontWeightSemibold]];
            
            if (xPos + tagWidth > (cell.mainView.frame.size.width-(gapBetweenStartAndEndHorizontalTags*2))) {
                
                xPos = gapBetweenStartAndEndHorizontalTags;
                changeYPos = true;
                totalLines += 1;
                
            }
            
            yGapToUse = totalLines == 1 ? (height*0.10526316 > 6?(6):height*0.10526316) : (height*0.14035088 > 8?(8):height*0.14035088);
            
            CGFloat yPos = changeYPos == true ?
            lastHorizontalSubView.frame.origin.y + lastHorizontalSubView.frame.size.height + yGapToUse :
            lastHorizontalSubView.frame.origin.y != 0 ?
            lastHorizontalSubView.frame.origin.y : cell.subLabel.frame.origin.y + cell.subLabel.frame.size.height + yGapToUse;
            
            UIButton *tagLabelSubview = [[UIButton alloc] initWithFrame:CGRectMake(xPos, yPos, tagWidth, tabSubViewHeight)];
            [tagLabelSubview.titleLabel setFont:[UIFont systemFontOfSize:tabSubViewHeight*1.083333 weight:UIFontWeightSemibold]];
            [tagLabelSubview setTitleColor:[UIColor colorWithRed:90.0f/255.0f green:123.0f/255.0f blue:165.0f/255.0f alpha:1.0f] forState:UIControlStateNormal];
            tagLabelSubview.tag = 100;
            [tagLabelSubview setTitle:tagText forState:UIControlStateNormal];
            [tagLabelSubview addTarget:self action:@selector(TapGestureSelectTag:) forControlEvents:UIControlEventTouchUpInside];
            [cell.mainView addSubview:tagLabelSubview];
            
        }
        
    }
    
    if (itemTags.count > 0) {
        
        CGRect rect = cell.mainView.frame;
        rect.size.height = cell.subLabel.frame.origin.y + cell.subLabel.frame.size.height + (((height*0.14035088 > 8?(8):height*0.14035088))*(totalLines+1)) + tabSubViewHeight*totalLines;
        cell.mainView.frame = rect;
        
        cellHeight += ((((height*0.14035088 > 8?(8):height*0.14035088))*(totalLines)) + tabSubViewHeight*totalLines);
        
    }
    
    return cellHeight;
    
    
    
    return 0;
}

-(void)DisplayAddTaskTutorialView {
 
    NSMutableDictionary *tutorialViewDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TutorialViewDisplayed"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TutorialViewDisplayed"] mutableCopy] : [NSMutableDictionary dictionary];
    
    if (!tutorialViewDict[@"AddTaskDisplayed"] || [tutorialViewDict[@"AddTaskDisplayed"] isEqualToString:@"Yes"] == NO) {
        
        [tutorialViewDict setObject:@"Yes" forKey:@"AddTaskDisplayed"];
        [[NSUserDefaults standardUserDefaults] setObject:tutorialViewDict forKey:@"TutorialViewDisplayed"];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            CGFloat myViewHeight = (self.view.frame.size.height - self->_tabBarView.frame.size.height);
            
            self->addTaskTutorialView = [[TutorialView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, myViewHeight)
                                                          helpViewFrameYPos:(self.view.frame.size.height*0.65067466 > 660?(660):self.view.frame.size.height*0.65067466)
                                                        viewControllerWidth:self.view.frame.size.width
                                                       viewControllerHeight:self.view.frame.size.height
                                                                      title:[NSString stringWithFormat:@"Time to get things done! 😀"]
                                                                       body:[NSString stringWithFormat:@"Tap the blue 'plus' button below to\nquickly add some tasks to your home."]];
            
            self->addTaskTutorialView.alpha = 0.0f;
            [self.view addSubview:self->addTaskTutorialView];
            
            [UIView animateWithDuration:0.25 animations:^{
                self->addTaskTutorialView.alpha = 1.0f;
            }];
            
            [self.view bringSubviewToFront:self->_tabBarView];
            
        });
        
    }
    
}

-(void)DisplaySideBarTutorialView {
 
    NSMutableDictionary *tutorialViewDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TutorialViewDisplayed"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TutorialViewDisplayed"] mutableCopy] : [NSMutableDictionary dictionary];
    
    if (!tutorialViewDict[@"SideBarDisplayed"] || [tutorialViewDict[@"SideBarDisplayed"] isEqualToString:@"Yes"] == NO) {
        
        [tutorialViewDict setObject:@"Yes" forKey:@"SideBarDisplayed"];
        [[NSUserDefaults standardUserDefaults] setObject:tutorialViewDict forKey:@"TutorialViewDisplayed"];
        
        CGFloat myViewHeight = (self.view.frame.size.height);
        
        sideBarTutorialView = [[TutorialView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, myViewHeight)
                                                helpViewFrameYPos:myViewHeight*0.4
                                              viewControllerWidth:self.view.frame.size.width
                                             viewControllerHeight:self.view.frame.size.height
                                                            title:[NSString stringWithFormat:@"Keep everything neat and tidy! 😀"]
                                                             body:[NSString stringWithFormat:@"Organize your tasks with pre-made categories. Create task lists to organize them on your own as well."]];
        sideBarTutorialView.alpha = 0.0f;
        [self.view addSubview:sideBarTutorialView];
        
        [UIView animateWithDuration:0.25 animations:^{
            
            self->sideBarTutorialView.alpha = 1.0f;
            
        } completion:nil];
        
    }
    
}

-(void)CallPopupMethods {
    
    [[[GeneralObject alloc] init] DisplayCancelledSubscriptionFeedback:^(BOOL finished) {
        
        [self->_requestFeedbackAlertViewScrollView setContentOffset:CGPointMake(self.view.frame.size.width, 0) animated:NO];
        
        self->PremiumSubscriptionCancelled = YES;
        
        self->_requestFeedbackAlertViewQuestionLabel2.text = @"Why did you cancel your WeDivvy Premium subscription?";
        
        [self DisplayAlertView:YES backDropView:self->_requestFeedbackBackdropView alertViewNoButton:nil alertViewYesButton:nil];
        
        [UIView animateWithDuration:0.35 animations:^{
            
            CGFloat height = CGRectGetHeight(self.view.bounds);
            
            CGRect newRect = self->_requestFeedbackAlertView.frame;
            newRect.origin.y = height - self->_requestFeedbackAlertView.frame.size.height;
            self->_requestFeedbackAlertView.frame = newRect;
            
        } completion:^(BOOL finished) {
            
            [self.requestFeedbackAlertViewNotesTextView becomeFirstResponder];
            
        }];
        
    }];
    
    [[[GeneralObject alloc] init] RequestFeedback:^(BOOL finished) {
        
        [self DisplayAlertView:YES backDropView:self->_requestFeedbackBackdropView alertViewNoButton:nil alertViewYesButton:nil];
        
        [UIView animateWithDuration:0.35 animations:^{
            
            CGFloat height = CGRectGetHeight(self.view.bounds);
            
            CGRect newRect = self->_requestFeedbackAlertView.frame;
            newRect.origin.y = height - self->_requestFeedbackAlertView.frame.size.height;
            self->_requestFeedbackAlertView.frame = newRect;
            
        }];
        
    }];
    
    [[[GeneralObject alloc] init] AppStoreRating:^(BOOL finished) {
        
        self->alertView = [[AlertView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) viewControllerWidth:self.view.frame.size.width viewControllerHeight:self.view.frame.size.height text:[NSString stringWithFormat:@"Enjoying WeDivvy?\n\nYour review keeps our small team motivated! 😊"] acceptButtonSelector:@selector(RequestAppReviewAccepted:) declineButtonSelector:@selector(RequestAppReviewRejected:) viewControllerObject:[[TasksViewController alloc] init]];
        self->alertView.alpha = 0.0f;
        [self.view addSubview:self->alertView];
        
        [UIView animateWithDuration:0.25 animations:^{
            self->alertView.alpha = 1.0f;
        }];
        
    }];
    
}

-(void)UpdateSideBarRedCircleViews {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        CGFloat width = CGRectGetWidth(self.view.bounds);
        CGFloat height = CGRectGetHeight(self.view.bounds);
        
        
        
        
        int totalKeysNotUsed = 0;
        
        if ([[self->homeKeysDict allKeys] count] > 0 || self->homeMembersArray.count > 1) {
            [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SeenNoInvitationsPopup"];
        }
        
        totalKeysNotUsed = (int)[[self->homeMembersUnclaimedDict allKeys] count];
        
        [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", totalKeysNotUsed] forKey:@"InvitiationViewCount"];
        
        float multiple = 1.00;
        
        if ([[NSString stringWithFormat:@"%d", totalKeysNotUsed] length] > 1.00) {
            multiple += (0.33 * ([[NSString stringWithFormat:@"%d", totalKeysNotUsed] length] - 1));
        }
        
        width = CGRectGetWidth(self.notificationReminderView.bounds);
        height = CGRectGetHeight(self.notificationReminderView.bounds);
        
        if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
            
            self->_pendingInvitesView.frame = CGRectMake(self->_homeMemberImage.frame.origin.x + self->_homeMemberImage.frame.size.width - ((self.view.frame.size.width*0.02717391)*0.75), self->_homeMemberImage.frame.origin.y - ((self.view.frame.size.width*0.02717391)*0.25), self.view.frame.size.width*0.02717391, self.view.frame.size.width*0.02717391);
            self->_pendingInvitesLabel.hidden = YES;
            self->_pendingInvitesView.layer.cornerRadius = self->_pendingInvitesView.frame.size.height/2;
            
        } else {
            
            self->_pendingInvitesView.frame = CGRectMake(self->_homeMemberImage.frame.origin.x + self->_homeMemberImage.frame.size.width - ((width*0.04227053)*0.67), self->_homeMemberImage.frame.origin.y - ((width*0.04227053)*0.33), (self.view.frame.size.width*0.04227053)*multiple, width*0.04227053);
            self->_pendingInvitesLabel.hidden = NO;
            self->_pendingInvitesView.layer.cornerRadius = self->_pendingInvitesView.frame.size.height/2;
            
        }
        
        
        
        
        width = CGRectGetWidth(self.pendingInvitesView.bounds);
        height = CGRectGetHeight(self.pendingInvitesView.bounds);
        
        self->_pendingInvitesLabel.frame = CGRectMake(0, 0, width, height);
        self->_pendingInvitesLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
        self->_pendingInvitesLabel.adjustsFontSizeToFitWidth = YES;
        
        if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
            totalKeysNotUsed += 1;
        }
        
        if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
            self->_pendingInvitesLabel.hidden = YES;
        } else {
            if (totalKeysNotUsed > 0) {
                self->_pendingInvitesView.hidden = NO;
                self->_pendingInvitesLabel.hidden = NO;
            } else {
                self->_pendingInvitesView.hidden = YES;
                self->_pendingInvitesLabel.hidden = YES;
            }
            self->_pendingInvitesLabel.hidden = NO;
        }
        
        self->_pendingInvitesLabel.text = [NSString stringWithFormat:@"%d", totalKeysNotUsed];
        
        
        
        
        
        //        totalKeysNotUsed = (int)[(NSArray *)self->unreadActivityDict[@"ActivityID"] count];
        //
        //        [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", totalKeysNotUsed] forKey:@"UnreadActivityCount"];
        
        multiple = 1.00;
        
        if ([[NSString stringWithFormat:@"%d", totalKeysNotUsed] length] > 1.00) {
            multiple += (0.33 * ([[NSString stringWithFormat:@"%d", totalKeysNotUsed] length] - 1));
        }
        
        width = CGRectGetWidth(self.notificationReminderView.bounds);
        height = CGRectGetHeight(self.notificationReminderView.bounds);
        
        CGRect newRect = self->_unreadActivityView.frame;
        //        newRect.size.width = (self.view.frame.size.width*0.04227053)*multiple;
        //        self->_unreadActivityView.frame = newRect;
        
        width = CGRectGetWidth(self.unreadActivityView.bounds);
        height = CGRectGetHeight(self.unreadActivityView.bounds);
        
        self->_unreadActivityLabel.frame = CGRectMake(0, 0, width, height);
        self->_unreadActivityLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
        self->_unreadActivityLabel.adjustsFontSizeToFitWidth = YES;
        
        if (totalKeysNotUsed > 0) {
            self->_unreadActivityView.hidden = NO;
            self->_unreadActivityLabel.hidden = NO;
        } else {
            self->_unreadActivityView.hidden = YES;
            self->_unreadActivityLabel.hidden = YES;
        }
        self->_unreadActivityLabel.hidden = YES;
        self->_unreadActivityView.hidden = YES;
        
        self->_unreadActivityLabel.text = [NSString stringWithFormat:@"%d", totalKeysNotUsed];
        
        
        
        
        
        NSString *unreadNotificationCount = self->unreadNotificationsCount;
        
        [[NSUserDefaults standardUserDefaults] setObject:unreadNotificationCount forKey:@"NotificationViewCount"];
        
        multiple = 1.00;
        
        if (unreadNotificationCount.length > 1.00) {
            multiple += (0.33 * (unreadNotificationCount.length - 1));
        }
        
        newRect = self->_unreadNotificationsView.frame;
        newRect.size.width = (self.view.frame.size.width*0.04227053)*multiple;
        self->_unreadNotificationsView.frame = newRect;
        
        
        
        
        width = CGRectGetWidth(self.unreadNotificationsView.bounds);
        height = CGRectGetHeight(self.unreadNotificationsView.bounds);
        
        self->_unreadNotificationsViewLabel.frame = CGRectMake(0, 0, width, height);
        self->_unreadNotificationsViewLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
        self->_unreadNotificationsViewLabel.adjustsFontSizeToFitWidth = YES;
        
        if ([unreadNotificationCount intValue] > 0) {
            self->_unreadNotificationsView.hidden = NO;
            self->_unreadNotificationsViewLabel.hidden = NO;
        } else {
            self->_unreadNotificationsView.hidden = YES;
            self->_unreadNotificationsViewLabel.hidden = YES;
        }
        
        self->_unreadNotificationsViewLabel.text = [NSString stringWithFormat:@"%@", unreadNotificationCount];
        
        [self->activityControl stopAnimating];
        [self->refreshControl endRefreshing];
        
        [[[GeneralObject alloc] init] RegisterForNotifications:^(BOOL finished) {
            
            self->alertView = [[AlertView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) viewControllerWidth:self.view.frame.size.width viewControllerHeight:self.view.frame.size.height text:[NSString stringWithFormat:@"Turn on Notifications\n\nFind out when you're assigned to tasks, when their due, and when their completed"] acceptButtonSelector:@selector(EnableNotificationsRequestAccepted:) declineButtonSelector:@selector(RequestRejected:) viewControllerObject:[[TasksViewController alloc] init]];
            self->alertView.alpha = 0.0f;
            [self.view addSubview:self->alertView];
            
            [UIView animateWithDuration:0.25 animations:^{
                self->alertView.alpha = 1.0f;
            }];
            
        }];
        
        int totalNotifications = totalKeysNotUsed + [unreadNotificationCount intValue];
        
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        BOOL UserCanReceiveBagdeIconNotification = [[[BoolDataObject alloc] init] UserCanReceiveBagdeIconNotification:self->notificationSettingsDict userID:userID];
        
        totalNotifications = UserCanReceiveBagdeIconNotification ? totalNotifications : 0;
        
        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:(NSInteger)totalNotifications];
        
    });
    
}

-(void)DisplayDropDownAlertView:(NSTimeInterval)timeInterval {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[NotificationsObject alloc] init] UserHasAcceptedNotifications:^(BOOL isActive) {
            
            NSString *isActiveStr = isActive == YES ? @"Yes" : @"No";
            
            if (
                (![[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationsHaveBeenAccepted"]) ||
                ([[[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationsHaveBeenAccepted"] isEqualToString:isActiveStr] == NO)
                ) {
                    
                    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
                    
                    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"userID == %@", userID];
                    [[[SetDataObject alloc] init] SetDataEditCoreData:@"Users" predicate:predicate setDataObject:@{@"Notifications" : isActive ? @"Yes" : @"No"}];
                    
                    [[[SetDataObject alloc] init] UpdateDataUserData:userID userDict:@{@"Notifications" : isActive ? @"Yes" : @"No"} completionHandler:^(BOOL finished, NSError * _Nonnull error) {
                        
                        
                    }];
                    
                }
            
            [[NSUserDefaults standardUserDefaults] setObject:isActive == YES ? @"Yes" : @"No" forKey:@"NotificationsHaveBeenAccepted"];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [UIView animateWithDuration:timeInterval animations:^{
                    
                    [self DisplayDropDownAlertView];
                    
                }];
                
            });
            
        }];
        
    });
    
}

-(void)DisplayDropDownAlertView {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    //CGFloat statusBarSizeHeight = [[[GeneralObject alloc] init] GetStatusBarHeight];
    
    BOOL isSimulator;
    
#if TARGET_OS_SIMULATOR
    isSimulator = YES;
#else
    isSimulator = NO;
#endif
    
    //    BOOL UserIsValid = [[[SetDataObject alloc] init] UserisValid:isSimulator];
    //    BOOL AppCrashed = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppCrashed"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"AppCrashed"] isEqualToString:@"Yes"] : NO;
    
    BOOL NotificationsHasBeenShown = [[NSUserDefaults standardUserDefaults] objectForKey:@"RegisterForNotificationsHasBeenShown"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"RegisterForNotificationsHasBeenShown"] isEqualToString:@"Yes"] : NO;
    BOOL NotificationReminderHasBeenDismissed = [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationReminderHasBeenRemoved"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationReminderHasBeenRemoved"] isEqualToString:@"Yes"] : NO;
    BOOL UserHasAcceptedNotifications = [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationsHaveBeenAccepted"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationsHaveBeenAccepted"] isEqualToString:@"Yes"] : NO;
    
    BOOL DisplayNotificationReminder = NotificationsHasBeenShown == YES && NotificationReminderHasBeenDismissed == NO && UserHasAcceptedNotifications == NO;
    
    if (DisplayNotificationReminder == YES) {// || (AppCrashed == YES && UserIsValid == YES) || AppHasExpiredPastDue == YES) {
        
        self->_notificationReminderView.frame = CGRectMake(0, self->_topView.frame.origin.y + self->_topView.frame.size.height, width, self.view.frame.size.height*0.07201 > 53?(53):self.view.frame.size.height*0.07201);
        
        CGFloat yToUse = self->_notificationReminderView.frame.origin.y + self->_notificationReminderView.frame.size.height + self.view.frame.size.height*0.01630435;
        
        self->_customTableView.frame = CGRectMake(0, yToUse, width, height+1);
        
        //        if (AppCrashed == YES && UserIsValid == YES) {
        //
        //            UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureDisplayCrashAlertView:)];
        //            [_notificationitemReminderLabel addGestureRecognizer:tapGesture];
        //            _notificationitemReminderLabel.userInteractionEnabled = YES;
        //
        //            _notificationitemReminderLabel.text = @"IT LOOKS LIKE WEDIVVY JUST CRASHED. CLICK HERE TO REPORT THE CRASH SO WE CAN FIX IT 🥸🔧";
        //
        //        } else if (AppHasExpiredPastDue == YES) {
        //
        //            UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGesturePushToPastDueTasksViewController:)];
        //            [_notificationitemReminderLabel addGestureRecognizer:tapGesture];
        //            _notificationitemReminderLabel.userInteractionEnabled = YES;
        //
        //            _notificationitemReminderLabel.text = [NSString stringWithFormat:@"%d PAST DUE TASK%@ EXPIRED. CLICK HERE TO ADD MORE TIME TO COMPLETE ⏰", count, count == 1 ? @" HAS" : @"S HAVE"];
        //
        //        }
        
    } else {
        
        self->_notificationReminderView.frame = CGRectMake(0, self->_topView.frame.origin.y, width, _topView.frame.size.height);
        
        CGFloat yToUse = self->_topView.frame.origin.y + self->_topView.frame.size.height + self.view.frame.size.height*0.01630435;
        
        self->_customTableView.frame = CGRectMake(0, yToUse, width, height+1);
        
    }
    
    width = CGRectGetWidth(self.notificationReminderView.bounds);
    height = CGRectGetHeight(self.notificationReminderView.bounds);
    
    _notificationitemReminderImage.hidden = NO;
    
    _notificationReminderSeparator.frame = CGRectMake(0, 0, width, 0);
    _notificationitemReminderLabel.frame = CGRectMake(width*0.028985, height*0.5 - (((height*0.5471698)*0.5)), width*0.874396, height*0.5471698);
    _notificationitemReminderImage.frame = CGRectMake(width - (width*0.04830918) - width*0.028985, 0, (width*0.04830918), height);
    
    _notificationitemReminderLabel.font = [UIFont systemFontOfSize:height*0.413793 weight:UIFontWeightBold];
    _notificationitemReminderLabel.adjustsFontSizeToFitWidth = YES;
    
    [self AdjustTableViewHeight];
    
}

-(void)DisplaySideBar:(BOOL)display duration:(NSTimeInterval)duration completionHandler:(void (^)(BOOL finished))finishBlock {
    
    [UIView animateWithDuration:duration animations:^{
        
        CGRect rect = self->_sideBarView.frame;
        rect.origin.x = display == YES ? 0 : rect.size.width * -1;
        self->_sideBarView.frame = rect;
        
        rect = self->_customScrollView.frame;
        rect.origin.x = display == YES ? self.view.frame.size.width - (self.view.frame.size.width*0.33) : 0;
        self->_customScrollView.frame = rect;
        
        rect = self->_statusBarOverView.frame;
        rect.origin.x = display == YES ? self.view.frame.size.width - (self.view.frame.size.width*0.33) : 0;
        self->_statusBarOverView.frame = rect;
        
        rect = self->_addTaskView.frame;
        rect.origin.x = self->_customScrollView.frame.origin.x + self->_customScrollView.frame.size.width - (self->_customScrollView.frame.size.width*0.133) - (self->_customScrollView.frame.size.width*0.02898551 > 12?(12):self->_customScrollView.frame.size.width*0.02898551);
        self->_addTaskView.frame = rect;
        
        rect = self->_tabBarView.frame;
        rect.origin.x = display == YES ? self.view.frame.size.width - (self.view.frame.size.width*0.33) : 0;
        self->_tabBarView.frame = rect;
        
    } completion:^(BOOL finished) {
        
        self->SideBarDisplayed = display;
        
        finishBlock(YES);
        
    }];
    
}

-(void)DisplayAlertView:(BOOL)display backDropView:(UIView *)backDropView alertViewNoButton:(UIButton * _Nullable)alertViewNoButton alertViewYesButton:(UIButton *)alertViewYesButton {
    
    if (display) {
        
        [UIView animateWithDuration:0.25 animations:^{
            
            backDropView.alpha = 1.0f;
            if (alertViewNoButton != nil) {alertViewNoButton.userInteractionEnabled = YES;}
            if (alertViewYesButton != nil) {alertViewYesButton.userInteractionEnabled = YES;}
            
        }];
        
    } else {
        
        [UIView animateWithDuration:0.25 animations:^{
            
            backDropView.alpha = 0.0;
            if (alertViewNoButton != nil) {alertViewNoButton.userInteractionEnabled = NO;}
            if (alertViewYesButton != nil) {alertViewYesButton.userInteractionEnabled = NO;}
            
        }];
        
    }
    
}

-(void)SelectTaskUpdateBottomViewUI {
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    
    BOOL TrashSelected = [sectionSelected isEqualToString:@"Trash"];
    
    [UIView animateWithDuration:0.25 animations:^{
        
        if (self->selectedItemsDict.count == 0) {
            
            self->_bottomOptionsPinImage.alpha = TrashSelected == YES ? 0.0f : 0.55f;
            self->_bottomOptionsFolderImage.alpha = TrashSelected == YES ? 0.0f : 0.55f;
            self->_bottomOptionsMoveToTrashImage.alpha = TrashSelected == YES ? 0.0f : 0.55f;
            self->_bottomOptionsEllipsisImage.alpha = TrashSelected == YES ? 0.0f : 0.55f;
            self->_bottomOptionsMoveOutOfTrashImage.alpha = TrashSelected == YES ? 0.55f : 0.0f;
            self->_bottomOptionsDeleteTrashImage.alpha = TrashSelected == YES ? 0.55f : 0.0f;
            
            self->_bottomOptionsEllipsisImageOverlay.showsMenuAsPrimaryAction = NO;
            self->_bottomOptionsPinImageOverlay.userInteractionEnabled = NO;
            self->_bottomOptionsFolderImageOverlay.userInteractionEnabled = NO;
            self->_bottomOptionsMoveToTrashImageOverlay.userInteractionEnabled = NO;
            self->_bottomOptionsMoveOutOfTrashImageOverlay.userInteractionEnabled = NO;
            self->_bottomOptionsDeleteTrashImageOverlay.userInteractionEnabled = NO;
            
        } else {
            
            self->_bottomOptionsPinImage.alpha = TrashSelected == YES ? 0.0f : 1.0f;
            self->_bottomOptionsFolderImage.alpha = TrashSelected == YES ? 0.0f : 1.0f;
            self->_bottomOptionsMoveToTrashImage.alpha = TrashSelected == YES ? 0.0f : 1.0f;
            self->_bottomOptionsEllipsisImage.alpha = TrashSelected == YES ? 0.0f : 1.0f;
            self->_bottomOptionsMoveOutOfTrashImage.alpha = TrashSelected == YES ? 1.0f : 0.0f;
            self->_bottomOptionsDeleteTrashImage.alpha = TrashSelected == YES ? 1.0f : 0.0f;
            
            self->_bottomOptionsEllipsisImageOverlay.showsMenuAsPrimaryAction = TrashSelected == YES ? NO : YES;
            self->_bottomOptionsPinImageOverlay.userInteractionEnabled = TrashSelected == YES ? NO : YES;
            self->_bottomOptionsFolderImageOverlay.userInteractionEnabled = TrashSelected == YES ? NO : YES;
            self->_bottomOptionsMoveToTrashImageOverlay.userInteractionEnabled = TrashSelected == YES ? NO : YES;
            self->_bottomOptionsMoveOutOfTrashImageOverlay.userInteractionEnabled = TrashSelected == YES ? YES : NO;
            self->_bottomOptionsDeleteTrashImageOverlay.userInteractionEnabled = TrashSelected == YES ? YES : NO;
            
        }
        
        BOOL UnpinnedItemFound = NO;
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            if (!self->pinnedDict[itemUniqueID]) {
                
                UnpinnedItemFound = YES;
                break;
                
            }
            
        }
        
        if (UnpinnedItemFound == YES || self->selectedItemsDict.count == 0) {
            
            self->_bottomOptionsPinImage.image = [UIImage imageNamed:@"Tasks.BottomOptionIcons.Pin.Grey"];
            
        } else {
            
            self->_bottomOptionsPinImage.image = [UIImage imageNamed:@"Tasks.BottomOptionIcons.Unpin.Grey"];
            
        }
        
    }];
    
}

-(void)HideSideBar {
    
    [self TapGestureSideBarImage:self];
    
}

-(void)DismissUpgradeWeDivvyPremiumPopup {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Dismiss Upgrade WeDivvy Premium For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [[[NotificationsObject alloc] init] SendLocalNotificationPurchasePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
        
    }];
    
    [[[NotificationsObject alloc] init] SendLocalNotificationUpgradePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
        
    }];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SideBarPopupClicked"];
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"UgradeWeDivvyPremiumPopupDismissed"];
    self->DisplayUpgradePremiumView = NO;
    
    [self.sideBarTableView beginUpdates];
    [self.sideBarTableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:0 inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
    [self.sideBarTableView endUpdates];
    
}

#pragma mark - UX Methods

-(NSMutableDictionary *)GenerateSpecificSectionDataDict:(NSString *)sectionName {
    
    NSMutableDictionary *dictToUse = [NSMutableDictionary dictionary];
    
    if (self->dataDisplayDict) {
        if (dataDisplaySectionsArray) {
            if (self->dataDisplayDict[sectionName]) {
                dictToUse = [self->dataDisplayDict[sectionName] mutableCopy];
            }
        }
    }
    
    return dictToUse;
}

-(NSMutableDictionary *)GenerateSpecificIndexPathSectionDataDict:(NSIndexPath *)indexPath {
    
    NSMutableDictionary *dictToUse = [NSMutableDictionary dictionary];
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    if (ObjectIsKindOfClass == YES) {
        if (self->dataDisplayDict) {
            if (dataDisplaySectionsArray) {
                if ([dataDisplaySectionsArray count] > indexPath.section) {
                    if (self->dataDisplayDict[dataDisplaySectionsArray[indexPath.section]]) {
                        dictToUse = [self->dataDisplayDict[dataDisplaySectionsArray[indexPath.section]] mutableCopy];
                    }
                }
            }
        }
    }
    
    return dictToUse;
}

-(NSMutableArray *)GenerateNumberOfValidTasksInArrayForm {
    
    NSMutableArray *arr = [NSMutableArray array];
    
    int totalNum = 0;
    
    int allNum = self->dataDisplayAmountDict[@"All"] ? [(NSString *)self->dataDisplayAmountDict[@"All"] intValue] : 0;
    int trashNum = self->dataDisplayAmountDict[@"Trash"] ? [(NSString *)self->dataDisplayAmountDict[@"Trash"] intValue] : 0;
    int pastDueNum = self->dataDisplayAmountDict[@"Past Due"] ? [(NSString *)self->dataDisplayAmountDict[@"Past Due"] intValue] : 0;
    
    for (NSString *itemID in self->itemDict[@"ItemID"]) {
        
        NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemID];
        NSString *itemOccurrenceID = self->itemDict[@"ItemOccurrenceID"] && [(NSArray *)self->itemDict[@"ItemOccurrenceID"] count] > index ? self->itemDict[@"ItemOccurrenceID"][index] : @"";
        NSString *itemTutorial = self->itemDict[@"ItemTutorial"] && [(NSArray *)self->itemDict[@"ItemTutorial"] count] > index ? self->itemDict[@"ItemTutorial"][index] : @"No";
        
        if ([itemOccurrenceID length] > 0) {
            totalNum -= 1;
        }
        if ([itemTutorial isEqualToString:@"Yes"]) {
            totalNum -= 1;
        }
        
    }
    
    totalNum += allNum;
    totalNum += trashNum;
    totalNum -= pastDueNum;
    
    totalNum = totalNum < 0 ? 0 : totalNum;
    
    for (int i=0;i<totalNum;i++) {
        [arr addObject:[NSString stringWithFormat:@"%d", i]];
    }
    
    arr = [[[GeneralObject alloc] init] RemoveDupliatesFromArray:arr];
    
    return arr;
}

-(NSMutableArray *)GenerateAllItemAssignedToArrays:(NSMutableDictionary *)itemDict homeMembersDict:(NSMutableDictionary *)homeMembersDict {
    
    NSMutableArray *allItemAssignedToArraysCopy = itemDict && itemDict[@"ItemAssignedTo"] ? [itemDict[@"ItemAssignedTo"] mutableCopy] : [NSMutableArray array];
    NSMutableArray *allItemAssignedToArrays = [NSMutableArray array];
    
    for (int i=0 ; i<allItemAssignedToArraysCopy.count ; i++) {
        
        NSMutableArray *itemAssignedToCopy = allItemAssignedToArraysCopy[i];
        
        NSMutableArray *tempArr = [NSMutableArray array];
        
        for (NSString *userID in itemAssignedToCopy) {
            
            if (homeMembersDict && homeMembersDict[@"UserID"] && [homeMembersDict[@"UserID"] containsObject:userID]) {
                
                if ([homeMembersDict[@"UserID"] containsObject:userID]) {
                    
                    NSUInteger index = [homeMembersDict[@"UserID"] indexOfObject:userID];
                    NSString *username = homeMembersDict[@"Username"] && [(NSArray *)homeMembersDict[@"Username"] count] > index ? homeMembersDict[@"Username"][index] : @"";
                    [tempArr addObject:username];
                    
                }
                
            }
            
        }
        
        [allItemAssignedToArrays addObject:tempArr];
        
    }
    
    return allItemAssignedToArrays;
}

-(NSMutableArray *)GenerateAllItemTagsArrays:(NSMutableDictionary *)itemDict {
    
    NSMutableArray *allItemTagsArrays = [NSMutableArray array];
    
    if (itemDict && itemDict[@"ItemTags"]) {
        
        for (NSMutableArray *itemTagsArray in itemDict[@"ItemTags"]) {
            
            for (NSString *itemTag in itemTagsArray) {
                
                if ([allItemTagsArrays containsObject:itemTag] == NO) {
                    
                    [allItemTagsArrays addObject:itemTag];
                    
                }
                
            }
            
        }
        
    }
    
    return allItemTagsArrays;
}

-(UIMenu *)PastDueTaskContextMenu {
    
    NSMutableArray *actions = [NSMutableArray array];
    NSMutableArray *unlimitedActions = [NSMutableArray array];
    NSMutableArray *customActions = [NSMutableArray array];
    
    
    UIAction *unlimitedAction = [self TaskContextMenuUnlimitedAction];
    [unlimitedActions addObject:unlimitedAction];
    
    UIMenu *unlimitedMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Unlimited" options:UIMenuOptionsDisplayInline children:unlimitedActions];
    [actions addObject:unlimitedMenu];
    
    
    
    NSArray *keyArray = @[@"2 Hours", @"12 Hours", @"2 Days", @"1 Week", @"1 Month"];
    
    for (NSString *key in keyArray) {
        
        UIAction *timeAction = [self TaskContextMenuTimeAction:key];
        [actions addObject:timeAction];
        
    }
    
    
    
    UIAction *customAction = [self TaskContextMenuCustomAction];
    [customActions addObject:customAction];
    
    UIMenu *customMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Custom" options:UIMenuOptionsDisplayInline children:customActions];
    [actions addObject:customMenu];
    
    
    
    UIMenu *menu = [UIMenu menuWithTitle:@"Add More Time To Complete" image:nil identifier:@"Add More Time" options:0 children:actions];
    
    return menu;
}

#pragma mark - IBAction Methods

-(IBAction)CompleteUncompleteTaskAction:(id)sender {
   
    UIImpactFeedbackGenerator *myGen = [[UIImpactFeedbackGenerator alloc] initWithStyle:(UIImpactFeedbackStyleMedium)];
    [myGen impactOccurred];
    
    CGPoint buttonPosition = [sender convertPoint:CGPointZero toView:_customTableView];
    NSIndexPath *indexPath = [_customTableView indexPathForRowAtPoint:buttonPosition];
    
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.row] forKey:@"TempIndexPathRow"];
    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.section] forKey:@"TempIndexPathSection"];
    
    NSMutableDictionary *dictToUse = [self General_GenerateSectionItemDict:indexPath];
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:keyArray indexPath:indexPath];
    NSMutableDictionary *singleObjectItemDictLocal = [singleObjectItemDict mutableCopy];
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    
    BOOL TaskCanBeCompletedInTaskBySpecificUser = [[[BoolDataObject alloc] init] TaskCanBeCompletedInTaskBySpecificUser:singleObjectItemDict itemType:itemType userID:userID homeMembersDict:homeMembersDict];
    
    if (TaskCanBeCompletedInTaskBySpecificUser == YES) {
        
        
        
//        [self StartProgressView];
        
        NSMutableDictionary *allSetDataDict = [NSMutableDictionary dictionary];
        
        NSMutableDictionary *homeMembersDictLocal = [homeMembersDict mutableCopy];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSString *userWhoIsBeingMarkedUserID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"];
        
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"";
        NSMutableDictionary *itemCompletedDict = singleObjectItemDict[@"ItemCompletedDict"] ? [singleObjectItemDict[@"ItemCompletedDict"] mutableCopy] : [NSMutableDictionary dictionary];
        
        BOOL TaskAlreadyCompleted = [[[GeneralObject alloc] init] ItemCompletedOrItemInProgressDictContainsUserID:itemCompletedDict userIDToFind:userID];
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"%@ Clicked %@ For %@", TaskAlreadyCompleted == YES ? @"Uncomplete" : @"Complete", singleObjectItemDict[@"ItemID"], itemType] completionHandler:^(BOOL finished) {
            
        }];
        
        NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                       SkippingTurn:NO RemovingUser:NO
                                                                                                     FullyCompleted:NO Completed:YES InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                            DueDate:NO Reminder:NO
                                                                                                     SubtaskEditing:NO SubtaskDeleting:NO
                                                                                                   SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                     AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                                EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                                  GroupChatMessages:NO LiveSupportMessages:NO
                                                                                                 SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                                FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                           itemType:itemType];
        
        NSString *notificationItemType = itemType;
        
        BOOL markingForSomeoneElse = NO;
        
       
        
        //Remove Loading
        
        singleObjectItemDictLocal = [[[CompleteUncompleteObject alloc] init] GenerateUpdatedTaskCompleteUncompleteDict:singleObjectItemDictLocal itemOccurrencesDict:itemOccurrencesDict homeMembersDict:homeMembersDict userWhoIsBeingMarkedUserID:userWhoIsBeingMarkedUserID markingForSomeoneElse:markingForSomeoneElse];
        
        [self General_UpdateMultipleItemsInItemDict_CompletionBlock:allSetDataDict returningDictToUse:singleObjectItemDictLocal returningOccurrencesDictToUse:self->itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:[NSMutableArray array] Looping:NO];
        
        allSetDataDict = [NSMutableDictionary dictionary];
        
        //
        
        
       
        [[[CompleteUncompleteObject alloc] init] TaskCompleteUncomplete:singleObjectItemDict itemOccurrencesDict:self->itemOccurrencesDict keyArray:keyArray homeMembersArray:self->homeMembersArray homeMembersDict:homeMembersDictLocal notificationSettingsDict:self->notificationSettingsDict notificationItemType:notificationItemType notificationType:notificationType topicDict:self->topicDict taskListDict:self->taskListDict allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays userWhoIsBeingMarkedUserID:userWhoIsBeingMarkedUserID markingForSomeoneElse:markingForSomeoneElse currentViewController:self completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDictToUse, NSMutableDictionary * _Nonnull returningOccurrencesDictToUse, NSMutableDictionary * _Nonnull returningUpdatedTaskListDictToUse, BOOL TaskIsFullyCompleted) {
            
            [self General_UpdateMultipleItemsInItemDict_CompletionBlock:allSetDataDict returningDictToUse:returningDictToUse returningOccurrencesDictToUse:returningOccurrencesDictToUse returningUpdatedTaskListDictToUse:returningUpdatedTaskListDictToUse selectedItemsDict:self->selectedItemsDict objectArr:[NSMutableArray array] Looping:NO];
      
            TaskIsFullyCompleted = [[[BoolDataObject alloc] init] TaskIsFullyCompleted:singleObjectItemDictLocal itemType:itemType homeMembersDict:homeMembersDict];
            
            [self CompleteUncompleteTaskAction_DisplayRepeatIfCompletedEarlyResetDropDown:singleObjectItemDictLocal TaskIsFullyCompleted:TaskIsFullyCompleted];
            
        }];
        
    } else {
        
        [self CompleteUncompleteTaskAction_DisplayUnclickableError:singleObjectItemDict];
        
    }
    
}

-(IBAction)ClearTableViewSection:(id)sender {
    
    UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
    NSInteger the_tag = [tapRecognizer.view tag];
    
    UIView *tempView = [[UIView alloc] init];
    tempView.tag = the_tag;
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    NSString *mainTableViewSectionName = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > the_tag ? [dataDisplaySectionsArray objectAtIndex:the_tag] : @"";
    
    NSString *actionSheetTitle =[NSString stringWithFormat:@"Are you sure you would like to delete all %@s in \"%@\"?", [itemType lowercaseString], mainTableViewSectionName];
    
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:actionSheetTitle message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Permanently Delete" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Clear Section Clicked For %@", self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
        NSMutableDictionary *dictToUse = [self->dataDisplayDict[mainTableViewSectionName] mutableCopy];
        
        for (NSString *itemUniqueID in dictToUse[@"ItemUniqueID"]) {
            
            if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                
                [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                
            }
            
        }
        
        [self DeleteTrashPermanently:self];
        
    }];
    
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Clear Section Cancelled For %@", self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
    }]];
    
    [deleteAction setValue:[UIColor systemRedColor] forKey:@"titleTextColor"];
    
    [actionSheet addAction:deleteAction];
    
    [self presentViewController:actionSheet animated:YES completion:nil];
    
}

-(IBAction)PostponeTableViewSection:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Past Due Field Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[[PushObject alloc] init] PushToViewOptionsViewController:[NSMutableArray array] customOptionsArray:nil specificDatesArray:nil viewingItemDetails:NO optionSelectedString:@"PastDue" itemRepeatsFrequency:nil homeMembersDict:nil currentViewController:self];
    
}

#pragma mark

-(IBAction)RequestAppReviewAccepted:(id)sender {
    
    if ([SKStoreReviewController class]){
        
        int numberOfTimes = 0;
        
        if (![[NSUserDefaults standardUserDefaults] objectForKey:@"TimesAskedForReview"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"1" forKey:@"TimesAskedForReview"];
        } else {
            numberOfTimes = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"TimesAskedForReview"]] intValue];
            [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", numberOfTimes+1] forKey:@"TimesAskedForReview"];
        }
        
        [SKStoreReviewController requestReviewInScene:self.view.window.windowScene];
        
    }
    
    [self RequestRejected:self];
    
}

-(IBAction)RequestAppReviewRejected:(id)sender {
    
    NSString *dateFormat = @"MMMM dd, yyyy hh:mm a";
    
    if ([[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:[[NSUserDefaults standardUserDefaults] objectForKey:@"RequestedReview"] returnAs:[NSDate class]] == nil) {
        dateFormat = @"MMMM dd, yyyy HH:mm";
    }
    
    NSString *dateStringCurrent = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:dateFormat returnAs:[NSString class]];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"0" forKey:@"AddedItem"];
    [[NSUserDefaults standardUserDefaults] setObject:@"0" forKey:@"CompletedItem"];
    [[NSUserDefaults standardUserDefaults] setObject:dateStringCurrent forKey:@"RequestedReview"];
    
}

-(IBAction)EnableNotificationsRequestAccepted:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"TurnOnNotifications - %@", @"SettingsViewController"] completionHandler:^(BOOL finished) {
        
    }];
    
    if (![[[NSUserDefaults standardUserDefaults] objectForKey:@"HasTheUserBeenAskedToReceiveNotifications"] isEqualToString:@"Yes"]) {
        
        UNAuthorizationOptions authOptions = UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge;
        
        [[UNUserNotificationCenter currentNotificationCenter]
         requestAuthorizationWithOptions:authOptions
         completionHandler:^(BOOL granted, NSError * _Nullable error) {
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            
            [[[SetDataObject alloc] init] UpdateDataUserData:userID userDict:@{@"Notifications" : granted ? @"Yes" : @"No"} completionHandler:^(BOOL finished, NSError * _Nonnull error) {
                
            }];
            
            [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"HasTheUserBeenAskedToReceiveNotifications"];
            
            if (granted) {
                
                [[[GeneralObject alloc] init] AllGenerateTokenMethod:@"AllHomeTopics" Subscribe:YES GrantedNotifications:granted];
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Notifications Granted For %@", self->itemType] completionHandler:^(BOOL finished) {
                    
                }];
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    [self StartProgressView];
                    
                    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"NotificationsHaveBeenAccepted"];
                    
                    [[FIRCrashlytics crashlytics] logWithFormat:@"GenerateTwoWeekReminderNotification Task"];
                    
                    [[[NotificationsObject alloc] init] RemoveLocalInactiveNotification];
                    [[[NotificationsObject alloc] init] GenerateTwoWeekReminderNotification];
                    
                    NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
                    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
                    
                    [[[HomesViewControllerObject alloc] init] UserJoiningHome_UpdateDataForNewHomeMemberLocal:homeID userToAdd:userID homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict clickedUnclaimedUser:NO QueryAssignedToNewHomeMember:NO QueryAssignedTo:YES queryAssignedToUserID:userID ResetNotifications:YES completionHandler:^(BOOL finished) {
                        
                        dispatch_async(dispatch_get_main_queue(), ^{
                            
                            [self->progressView setHidden:YES];
                            [self TapGestureDismissDropdownAlertView:self];
                            
                            if (self->homeMembersDict && self->homeMembersDict[@"UserID"] && [self->homeMembersDict[@"UserID"] containsObject:userID]) {
                                
                                NSUInteger index = [self->homeMembersDict[@"UserID"] indexOfObject:userID];
                                NSMutableDictionary *dict = self->homeMembersDict ? [self->homeMembersDict mutableCopy] : [NSMutableDictionary dictionary];
                                NSMutableArray *arr = self->homeMembersDict[@"Notifications"] ? [self->homeMembersDict[@"Notifications"] mutableCopy] : [NSMutableArray array];
                                if ([arr count] > index) {[arr replaceObjectAtIndex:index withObject:@"Yes"]; }
                                [dict setObject:arr forKey:@"Notifications"];
                                self->homeMembersDict = [dict mutableCopy];
                                
                            }
                            
                            [self GetLocalNotifications:NO];
                            
                            [self RequestRejected:self];
                            
                        });
                        
                    }];
                    
                });
                
            } else {
                
                [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"NotificationsHaveBeenAccepted"];
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Notifications Not Granted For %@", self->itemType] completionHandler:^(BOOL finished) {
                    
                }];
                
                [self RequestRejected:self];
                
            }
            
        }];
        
    } else {
        
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString] options:@{} completionHandler:nil];
        
        [self RequestRejected:self];
        
    }
    
}

-(IBAction)RequestRejected:(id)sender {
    
    [UIView animateWithDuration:0.25 animations:^{
        dispatch_async(dispatch_get_main_queue(), ^{
            self->alertView.alpha = 0.0f;
        });
    } completion:^(BOOL finished) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [self->alertView removeFromSuperview];
            [[[GeneralObject alloc] init] CallNSNotificationMethods:@"DisplayAddTaskTutorialView" userInfo:nil locations:@[@"Tasks"]];
        });
    }];
    
}

-(IBAction)OfflinePushToPremium:(id)sender {
    
    [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"WeDivvy Offline" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
    
    [self RequestRejected:self];
    
}

-(IBAction)RefreshPageAction:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Refresh Page For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if (refreshControl == nil) {
        
        [activityControl setHidden:NO];
        
        activityControl.frame = CGRectMake((_customScrollView.frame.size.width*0.5)-(25*0.5), _customScrollView.frame.size.height*0.5 - 25*0.5, 25, 25);
        activityControl.color = [UIColor grayColor];
        [activityControl startAnimating];
        
        [self.customScrollView addSubview:activityControl];
        
    }
    
    if (EverythingIsThere == YES) {
       
        self->QueryFirstTime = YES;
        
        [self QueryInitialData:^(BOOL finished) {
            
            if (self->DisplayDisplayLog == YES) { NSLog(@"GenerateItemsToDisplay-1000"); }
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self->activityControl stopAnimating];
                [self->refreshControl endRefreshing];
                
                [self.customTableView reloadData];
                [self.sideBarTableView reloadData];
                
            });
            
        }];
        
    }
    
}

#pragma mark - Select Option - Show Completed

-(void)SelectShowCompleted {
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ShowCompletedToggledAtLeastOnce"];
    
    NSString *touchEvent;
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] isEqualToString:@"Yes"] ||
        [[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] == NULL) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"ShowCompleted"];
        
        touchEvent = [NSString stringWithFormat:@"Hide Completed Clicked for %@", itemType];
        
    } else {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ShowCompleted"];
        
        touchEvent = [NSString stringWithFormat:@"Show Completed Clicked for %@", itemType];
        
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:touchEvent completionHandler:^(BOOL finished) {
        
    }];
    
    [self SetUpTopEllipsisContextMenu];
    
    [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
        
    }];
    
}

#pragma mark - Select Option - Select

-(IBAction)SelectSelect:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Select Clicked For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    selectedItemsDict = [NSMutableDictionary dictionary];
    selectedSectionsDict = [NSMutableDictionary dictionary];
    SelectClicked = SelectClicked == YES ? NO : YES;
    
    [UIView animateWithDuration:0.25 animations:^{
        
        
        
        
        self->_ellipsisImage.alpha = 0.0f;
        self->_ellipsisOverlayView.alpha = 0.0f;
        self->_walletImage.alpha = 0.0f;
        self->_walletOverlayView.alpha = 0.0f;
        self->_sideBarImage.alpha = 0.0f;
        self->_sideBarImageOverlayView.alpha = 0.0f;
        self->_bottomOptionsView.alpha = 1.0f;
        self->_tabBarView.alpha = 0.0f;
        
        
        
        
        self->selectedDoneButton = [[UIButton alloc] initWithFrame:CGRectMake(self.view.frame.size.width - 42 - self->_sideBarImage.frame.origin.x, self->_sideBarImage.frame.origin.y, 42, self->_sideBarImage.frame.size.height)];
        [self->selectedDoneButton setTitle:@"Done" forState:UIControlStateNormal];
        
        [self->selectedDoneButton.titleLabel setFont:[UIFont systemFontOfSize:self->selectedDoneButton.frame.size.height*0.75 weight:UIFontWeightRegular]];
        [self->selectedDoneButton setTitleColor:[[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTextPrimary] forState:UIControlStateNormal];
        [self->selectedDoneButton addTarget:self action:@selector(SelectDoneButtonAction:) forControlEvents:UIControlEventTouchUpInside];
        self->selectedDoneButton.userInteractionEnabled = YES;
        self->selectedDoneButton.titleLabel.adjustsFontSizeToFitWidth = YES;
        
        CGRect newRect = self->selectedDoneButton.frame;
        newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:self->selectedDoneButton.titleLabel.text withFont:self->selectedDoneButton.titleLabel.font];
        newRect.origin.x = self.view.frame.size.width - newRect.size.width - self->_sideBarImage.frame.origin.x;
        self->selectedDoneButton.frame = newRect;
        
        self->selectedDoneButtonOverlayView = [[UIView alloc] initWithFrame:CGRectMake(self->selectedDoneButton.frame.origin.x - 10, self->selectedDoneButton.frame.origin.y - 10, self->selectedDoneButton.frame.size.width - 20, self->selectedDoneButton.frame.size.height - 20)];
        [self->selectedDoneButtonOverlayView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectDoneButtonAction:)]];
        
        [self.topView addSubview:self->selectedDoneButton];
        [self.topView addSubview:self->selectedDoneButtonOverlayView];
        
        
        
        
        self->selectedSelectDeselectAllButton = [[UIButton alloc] initWithFrame:CGRectMake(self->_sideBarImage.frame.origin.x, self->_sideBarImage.frame.origin.y, 72, self->_sideBarImage.frame.size.height)];
        [self->selectedSelectDeselectAllButton setTitle:@"Select All" forState:UIControlStateNormal];
        [self->selectedSelectDeselectAllButton.titleLabel setFont:[UIFont systemFontOfSize:self->selectedSelectDeselectAllButton.frame.size.height*0.75 weight:UIFontWeightRegular]];
        [self->selectedSelectDeselectAllButton setTitleColor:[[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTextPrimary] forState:UIControlStateNormal];
        [self->selectedSelectDeselectAllButton addTarget:self action:@selector(SelectSelectDeselectAllButtonAction:) forControlEvents:UIControlEventTouchUpInside];
        self->selectedSelectDeselectAllButton.userInteractionEnabled = YES;
        self->selectedSelectDeselectAllButton.titleLabel.adjustsFontSizeToFitWidth = YES;
        
        newRect = self->selectedSelectDeselectAllButton.frame;
        newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:self->selectedSelectDeselectAllButton.titleLabel.text withFont:self->selectedSelectDeselectAllButton.titleLabel.font];
        self->selectedSelectDeselectAllButton.frame = newRect;
        
        self->selectedSelectDeselectAllButtonOverlayView = [[UIView alloc] initWithFrame:CGRectMake(self->selectedSelectDeselectAllButton.frame.origin.x - 10, self->selectedSelectDeselectAllButton.frame.origin.y - 10, self->selectedSelectDeselectAllButton.frame.size.width - 20, self->selectedSelectDeselectAllButton.frame.size.height - 20)];
        [self->selectedSelectDeselectAllButtonOverlayView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(SelectDoneButtonAction:)]];
        
        [self.topView addSubview:self->selectedSelectDeselectAllButton];
        [self.topView addSubview:self->selectedSelectDeselectAllButtonOverlayView];
        
        
        
        
        CGRect rect = self->_middleLabel.frame;
        rect.origin.y = self->_topView.frame.origin.y + (self->_topView.frame.size.height*0.5 - self->_middleLabel.frame.size.height*0.5) - self->_middleLabel.frame.size.height*0.5;
        self->_middleLabel.frame = rect;
        
        
        
        
        self->selectedAmountLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, self->_middleLabel.frame.origin.y + self->_middleLabel.frame.size.height, self.view.frame.size.width, self->_sideBarImage.frame.size.height*0.85)];
        self->selectedAmountLabel.text = @"0 Selected";
        self->selectedAmountLabel.textColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [UIColor darkGrayColor];
        self->selectedAmountLabel.textAlignment = NSTextAlignmentCenter;
        self->selectedAmountLabel.font = [UIFont systemFontOfSize:self->selectedAmountLabel.frame.size.height*0.70588 weight:UIFontWeightRegular];
        
        [self.topView addSubview:self->selectedAmountLabel];
        
        
        
        
        [self SelectTaskUpdateBottomViewUI];
        
        
        
        
    } completion:^(BOOL finished) {
        
        [self.customTableView reloadData];
        
    }];
    
}

-(IBAction)SelectDoneButtonAction:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Done Clicked For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    selectedItemsDict = [NSMutableDictionary dictionary];
    selectedSectionsDict = [NSMutableDictionary dictionary];
    self->SelectClicked = NO;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [UIView animateWithDuration:0.25 animations:^{
            
            self->_ellipsisImage.alpha = 1.0f;
            self->_ellipsisOverlayView.alpha = 1.0f;
            if ([self->itemType isEqualToString:@"Expense"]) { self->_walletImage.alpha = 1.0f; }
            if ([self->itemType isEqualToString:@"Expense"]) { self->_walletOverlayView.alpha = 1.0f; }
            self->_sideBarImage.alpha = 1.0f;
            self->_sideBarImageOverlayView.alpha = 1.0f;
            self->_tabBarView.alpha = 1.0f;
            self->_bottomOptionsView.alpha = 0.0f;
            
            self->selectedAmountLabel.alpha = 0.0f;
            
            [self->selectedDoneButton removeFromSuperview];
            [self->selectedDoneButtonOverlayView removeFromSuperview];
            [self->selectedSelectDeselectAllButton removeFromSuperview];
            [self->selectedSelectDeselectAllButtonOverlayView removeFromSuperview];
            [self->selectedAmountLabel removeFromSuperview];
            
            self->_middleLabel.frame = CGRectMake(0, self->_sideBarImage.frame.origin.y, self->_topView.frame.size.width, self->_sideBarImage.frame.size.height);
            
        } completion:^(BOOL finished) {
            
            if (![[NSUserDefaults standardUserDefaults] objectForKey:@"StopDoneActionReloadTableView"] || [[[NSUserDefaults standardUserDefaults] objectForKey:@"StopDoneActionReloadTableView"] isEqualToString:@"Yes"] == NO) {
                
                [self.customTableView reloadData];
                
            } else {
                
                [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"StopDoneActionReloadTableView"];
                
            }
            
        }];
        
    });
    
}

-(IBAction)SelectSelectDeselectAllButtonAction:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"%@ Clicked For %@", selectedSelectDeselectAllButton.titleLabel.text, itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if ([selectedSelectDeselectAllButton.titleLabel.text isEqualToString:@"Select All"]) {
        
        for (NSString *section in self->dataDisplaySectionsArray) {
            
            NSMutableDictionary *dictToUse = self->dataDisplayDict[section] ? self->dataDisplayDict[section] : [NSMutableDictionary dictionary];
            NSMutableArray *itemUniqueIDArray = [dictToUse[@"ItemUniqueID"] mutableCopy];
            
            for (NSString *itemUniqueID in itemUniqueIDArray) {
                
                if ([[selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                    
                    [selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                    
                }
                
            }
            
        }
        
        selectedAmountLabel.text = [NSString stringWithFormat:@"%lu Selected", (long)[[selectedItemsDict allKeys] count]];
        
    } else {
        
        selectedAmountLabel.text = @"0 Selected";
        
        selectedItemsDict = [NSMutableDictionary dictionary];
        selectedSectionsDict = [NSMutableDictionary dictionary];
        
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"%@ - Show %@", itemType, selectedSelectDeselectAllButton.titleLabel.text] completionHandler:^(BOOL finished) {
        
    }];
    
    [self SetUpBottomFolderContextMenu];
    
    [self SelectTaskUpdateBottomViewUI];
    
    [self SelectDeselectItems_CheckIfAllTasksSelected];
    
}

#pragma mark - Select Option - Pin

-(IBAction)SelectOptionPinUnpin:(id)sender {
    
    //    [self StartProgressView];
    
    BOOL Pin = YES;
    
    for (NSString *itemUniqueID in [selectedItemsDict allKeys]) {
        
        if (pinnedDict[itemUniqueID]) {
            
            Pin = NO;
            
        }
        
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"%@ Clicked For %@", Pin == YES ? @"Pin" : @"Unpin", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *itemType = [[[GeneralObject alloc] init] GenerateItemType];
    NSString *key = [NSString stringWithFormat:@"PinnedItems%@", itemType];
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        if (Pin) {
            
            if (!pinnedDict[itemUniqueID]) { [pinnedDict setObject:@{@"ItemUniqueID" : selectedItemsDict[itemUniqueID][@"ItemUniqueID"]} forKey:itemUniqueID];  }
            
        } else {
            
            if (pinnedDict[itemUniqueID]) {  [pinnedDict removeObjectForKey:itemUniqueID]; }
            
        }
        
        [[NSUserDefaults standardUserDefaults] setObject:pinnedDict forKey:key];
        
    }
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self SelectDoneButtonAction:self];
        
        [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
         
        }];
        
    });
    
}

#pragma mark - Select Option - Move To Trash

-(IBAction)SelectOptionMoveToTrash:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move To Trash Selected For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *actionSheetTitle = [[self->selectedItemsDict allKeys] count] != 1 ? [NSString stringWithFormat:@"Are you sure you would like to move all of these %@s to \"Trash\"?", [itemType lowercaseString]] : [NSString stringWithFormat:@"Are you sure you would like to move this %@ to \"Trash\"?", [itemType lowercaseString]];
    
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:actionSheetTitle message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Move To Trash" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        
        [self MoveToTrashSelected:YES completionHandler:^(BOOL finished) {
            
        }];
        
    }];
    
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move To Trash Cancelled For %@", self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
    }]];
    
    [deleteAction setValue:[UIColor systemRedColor] forKey:@"titleTextColor"];
    
    [actionSheet addAction:deleteAction];
    
    [self presentViewController:actionSheet animated:YES completion:nil];
    
}

#pragma mark - Select Option - Move Out Of Trash

-(IBAction)SelectOptionMoveOutOfTrash:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move Out of Trash Selected For Tasks %@ For %@", selectedItemsDict , self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [self MoveToTrashSelected:NO completionHandler:^(BOOL finished) {
        
    }];
    
}

#pragma mark - Select Option - Delete Trash Permanently

-(IBAction)SelectOptionDeleteTrashPermanently:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Delete Trash Selected For %@" , self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *actionSheetTitle = [[self->selectedItemsDict allKeys] count] != 1 ? [NSString stringWithFormat:@"Are you sure you would like to permanently delete all of these %@s?", [itemType lowercaseString]] : [NSString stringWithFormat:@"Are you sure you would like to permanently delete this %@?", [itemType lowercaseString]];
    
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:actionSheetTitle message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Permanently Delete" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Delete Trash Selected For Tasks %@ For %@", self->selectedItemsDict , self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
        [self DeleteTrashPermanently:nil];
        
    }];
    
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Delete Trash Cancelled For %@" , self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
    }]];
    
    [deleteAction setValue:[UIColor systemRedColor] forKey:@"titleTextColor"];
    
    [actionSheet addAction:deleteAction];
    
    [self presentViewController:actionSheet animated:YES completion:nil];
    
}

#pragma mark - Select Option - Complete/Uncomplete

-(void)SelectOptionCompleteUncomplete:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    if (self->selectedItemsDict.count > 0) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        [self StartProgressView];
        
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            NSMutableDictionary *itemCompletedDict = singleObjectItemDict[@"ItemCompletedDict"] ? singleObjectItemDict[@"ItemCompletedDict"] : [NSMutableDictionary dictionary];
            
            BOOL TaskCanBeCompletedInTaskBySpecificUser = [[[BoolDataObject alloc] init] TaskCanBeCompletedInTaskBySpecificUser:singleObjectItemDict itemType:itemType userID:userID homeMembersDict:homeMembersDict];
            
            BOOL CompletingTask = [(NSString *)sender isEqualToString:@"Complete"];
            BOOL TaskHasBeenCompletedByMe = itemCompletedDict && [[itemCompletedDict allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            BOOL TaskIsCompleteAsNeeded = [[[BoolDataObject alloc] init] TaskIsCompleteAsNeeded:[@{@"ItemCompleteAsNeeded" : singleObjectItemDict[@"ItemCompleteAsNeeded"] ? singleObjectItemDict[@"ItemCompleteAsNeeded"] : @""} mutableCopy] itemType:itemType];
            
            BOOL AttemptingToCompleteTask_And_TaskHasNotBeenCompletedByMe_Or_TaskIsCompleteAsNeeded = (CompletingTask == YES && (TaskHasBeenCompletedByMe == NO || TaskIsCompleteAsNeeded == YES));
            BOOL AttemptingToUncompleteTask_And_TaskHasBeenCompletedByMe = (CompletingTask == NO && TaskHasBeenCompletedByMe == YES);
            
            
            
            if (TaskCanBeCompletedInTaskBySpecificUser == YES) {
                
                if (AttemptingToCompleteTask_And_TaskHasNotBeenCompletedByMe_Or_TaskIsCompleteAsNeeded == YES ||
                    AttemptingToUncompleteTask_And_TaskHasBeenCompletedByMe == YES)  {
                    
                    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SelectOptionActionSelected"];
                    
                    
                    
                    NSMutableDictionary *homeMembersDictLocal = [homeMembersDict mutableCopy];
                     NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
                    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
                    NSString *userWhoIsBeingMarkedUserID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"];
                    
                    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
                    NSMutableDictionary *itemCompletedDict = singleObjectItemDict[@"ItemCompletedDict"] ? [singleObjectItemDict[@"ItemCompletedDict"] mutableCopy] : [NSMutableDictionary dictionary];
                    
                    BOOL TaskAlreadyCompleted = [[[GeneralObject alloc] init] ItemCompletedOrItemInProgressDictContainsUserID:itemCompletedDict userIDToFind:userID];
                    
                    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Select Option %@ Clicked %@ For %@", TaskAlreadyCompleted == YES ? @"Uncomplete" : @"Complete", singleObjectItemDict[@"ItemID"], itemType] completionHandler:^(BOOL finished) {
                        
                    }];
                    
                    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                                 FullyCompleted:NO Completed:YES InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                                        DueDate:NO Reminder:NO
                                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                                       itemType:itemType];
                    
                    NSString *notificationItemType = itemType;
                    
                    
                    
                    [[[CompleteUncompleteObject alloc] init] TaskCompleteUncomplete:singleObjectItemDict itemOccurrencesDict:self->itemOccurrencesDict keyArray:keyArray homeMembersArray:self->homeMembersArray homeMembersDict:homeMembersDictLocal notificationSettingsDict:self->notificationSettingsDict notificationItemType:notificationItemType notificationType:notificationType topicDict:self->topicDict taskListDict:self->taskListDict allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays userWhoIsBeingMarkedUserID:userWhoIsBeingMarkedUserID markingForSomeoneElse:NO currentViewController:self completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDictToUse, NSMutableDictionary * _Nonnull returningOccurrencesDictToUse, NSMutableDictionary * _Nonnull returningUpdatedTaskListDictToUse, BOOL TaskIsFullyCompleted) {
                        
                        [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:returningDictToUse returningOccurrencesDictToUse:returningOccurrencesDictToUse returningUpdatedTaskListDictToUse:returningUpdatedTaskListDictToUse selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                        
                    }];
                    
                } else {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[NSMutableDictionary dictionary] returningOccurrencesDictToUse:itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }
                
            } else {
                
                [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[NSMutableDictionary dictionary] returningOccurrencesDictToUse:itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                
            }
            
        }
        
    }
    
}

#pragma mark - Select Option - In Progress/Not In Progress

-(void)SelectOptionInProgressNotInProgress:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    if (self->selectedItemsDict.count > 0) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        [self StartProgressView];
        
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            NSMutableDictionary *itemInProgressDict = singleObjectItemDict[@"ItemInProgressDict"] ? singleObjectItemDict[@"ItemInProgressDict"] : [NSMutableDictionary dictionary];
            
            BOOL InProgressTask = [(NSString *)sender isEqualToString:@"In Progress"];
            BOOL TaskHasBeenMarkedInProgressMe = itemInProgressDict && [[itemInProgressDict allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            
            BOOL AttemptingToMarkedInProgressTask_And_TaskHasNotBeenMarkedInProgressByMe_Or_TaskIsCompleteAsNeeded = (InProgressTask == YES && TaskHasBeenMarkedInProgressMe == NO);
            BOOL AttemptingToMarkNotInProgressTask_And_TaskHasBeenMarkedInProgressByMe = (InProgressTask == NO && TaskHasBeenMarkedInProgressMe == YES);
            
            
            
            if (AttemptingToMarkedInProgressTask_And_TaskHasNotBeenMarkedInProgressByMe_Or_TaskIsCompleteAsNeeded == YES ||
                AttemptingToMarkNotInProgressTask_And_TaskHasBeenMarkedInProgressByMe == YES) {
                
                [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SelectOptionActionSelected"];
                
                
                
                NSMutableDictionary *homeMembersDictLocal = [homeMembersDict mutableCopy];
                NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
                NSString *userWhoIsBeingMarkedUserID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"];
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Select Option %@ Clicked %@ For %@", TaskHasBeenMarkedInProgressMe == YES ? @"Not In Progress" : @"In Progress", singleObjectItemDict[@"ItemID"], itemType] completionHandler:^(BOOL finished) {
                    
                }];
                
                NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                               SkippingTurn:NO RemovingUser:NO
                                                                                                             FullyCompleted:NO Completed:NO InProgress:YES WontDo:NO Accept:NO Decline:NO
                                                                                                                    DueDate:NO Reminder:NO
                                                                                                             SubtaskEditing:NO SubtaskDeleting:NO
                                                                                                           SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                             AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                                        EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                                          GroupChatMessages:NO LiveSupportMessages:NO
                                                                                                         SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                                        FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                                   itemType:itemType];
                
                NSString *notificationItemType = itemType;
                
                [[[CompleteUncompleteObject alloc] init] TaskInProgressNotInProgress:singleObjectItemDict itemOccurrencesDict:itemOccurrencesDict keyArray:keyArray homeMembersArray:self->homeMembersArray homeMembersDict:homeMembersDictLocal notificationSettingsDict:self->notificationSettingsDict notificationItemType:notificationItemType notificationType:notificationType topicDict:self->topicDict allItemTagsArrays:allItemTagsArrays userWhoIsBeingMarkedUserID:userWhoIsBeingMarkedUserID markingForSomeoneElse:NO currentViewController:self completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDictToUse, NSMutableDictionary * _Nonnull returningOccurrencesDictToUse) {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:returningDictToUse returningOccurrencesDictToUse:returningOccurrencesDictToUse returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }];
                
            } else {
                
                [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[NSMutableDictionary dictionary] returningOccurrencesDictToUse:itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                
            }
            
        }
        
    }
    
}

#pragma mark - Select Option - Will Do/Won't Do

-(void)SelectOptionWillDoWontDo:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    if (self->selectedItemsDict.count > 0) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        [self StartProgressView];
        
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            NSMutableDictionary *itemWontDoDict = singleObjectItemDict[@"ItemWontDoDict"] ? singleObjectItemDict[@"ItemWontDoDict"] : [NSMutableDictionary dictionary];
            
            BOOL TaskCanBeCompletedInTaskBySpecificUser = [[[BoolDataObject alloc] init] TaskCanBeCompletedInTaskBySpecificUser:singleObjectItemDict itemType:itemType userID:userID homeMembersDict:homeMembersDict];
            
            BOOL WontDoTask = [(NSString *)sender isEqualToString:@"Won't Do"];
            BOOL TaskHasBeenMarkedWontDoMe = itemWontDoDict && [[itemWontDoDict allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            
            BOOL AttemptingToMarkedWontDoTask_And_TaskHasNotBeenMarkedWontDoByMe_Or_TaskIsCompleteAsNeeded = (WontDoTask == YES && TaskHasBeenMarkedWontDoMe == NO);
            BOOL AttemptingToMarkNotWontDoTask_And_TaskHasBeenMarkedWontDoByMe = (WontDoTask == NO && TaskHasBeenMarkedWontDoMe == YES);
            
            
            
            if (TaskCanBeCompletedInTaskBySpecificUser == YES) {
                
                if (AttemptingToMarkedWontDoTask_And_TaskHasNotBeenMarkedWontDoByMe_Or_TaskIsCompleteAsNeeded == YES ||
                    AttemptingToMarkNotWontDoTask_And_TaskHasBeenMarkedWontDoByMe == YES) {
                    
                    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SelectOptionActionSelected"];
                    
                    
                    
                    NSMutableDictionary *homeMembersDictLocal = [homeMembersDict mutableCopy];
                    NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
                    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
                    NSString *userWhoIsBeingMarkedUserID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"];
                    
                    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Select Option %@ Clicked %@ For %@", TaskHasBeenMarkedWontDoMe == YES ? @"Won't Do" : @"Will Do", singleObjectItemDict[@"ItemID"], itemType] completionHandler:^(BOOL finished) {
                        
                    }];
                    
                    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:YES Accept:NO Decline:NO
                                                                                                                        DueDate:NO Reminder:NO
                                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                                       itemType:itemType];
                    
                    NSString *notificationItemType = itemType;
                    
                    
                    
                    [[[CompleteUncompleteObject alloc] init] TaskWillDoWontDo:singleObjectItemDict itemOccurrencesDict:self->itemOccurrencesDict keyArray:keyArray homeMembersArray:self->homeMembersArray homeMembersDict:homeMembersDictLocal notificationSettingsDict:self->notificationSettingsDict notificationItemType:notificationItemType notificationType:notificationType topicDict:self->topicDict taskListDict:self->taskListDict allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays userWhoIsBeingMarkedUserID:userWhoIsBeingMarkedUserID markingForSomeoneElse:NO currentViewController:self completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningDictToUse, NSMutableDictionary * _Nonnull returningOccurrencesDictToUse, NSMutableDictionary * _Nonnull returningUpdatedTaskListDictToUse, BOOL TaskIsFullyCompleted) {
                        
                        [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:returningDictToUse returningOccurrencesDictToUse:returningOccurrencesDictToUse returningUpdatedTaskListDictToUse:returningUpdatedTaskListDictToUse selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                        
                    }];
                    
                } else {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[NSMutableDictionary dictionary] returningOccurrencesDictToUse:itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }
                
            }
            
        }
        
    }
    
}

#pragma mark - Select Option - Waive

-(IBAction)SelectOptionWaive:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Waive Clicked For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *actionSheetTitle = [[self->selectedItemsDict allKeys] count] != 1 ? [NSString stringWithFormat:@"Are you sure you would like to waive all of these past due %@s?", [itemType lowercaseString]] : [NSString stringWithFormat:@"Are you sure you would like to waive this past due %@?", [itemType lowercaseString]];
    
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:actionSheetTitle message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Waive" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Waiving Tasks %@ For %@", self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
        [self SelectOption_UpdateItemData:[@{@"ItemOccurrenceStatus" : @"Waived"} mutableCopy]];
        
    }];
    
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Waive Cancelled For %@", self->itemType] completionHandler:^(BOOL finished) {
            
        }];
        
    }]];
    
    [deleteAction setValue:[UIColor systemRedColor] forKey:@"titleTextColor"];
    
    [actionSheet addAction:deleteAction];
    
    [self presentViewController:actionSheet animated:YES completion:nil];
    
}

#pragma mark - Select Option - Difficulty

-(IBAction)SelectOptionDifficulty:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Difficulty Selected For %@", self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *difficulty = (NSString *)sender;
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Difficulty %@ Selected For Tasks %@ For %@", difficulty, self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [self SelectOption_UpdateItemData:[@{@"ItemDifficulty" : difficulty} mutableCopy]];
    
}

#pragma mark - Select Option - Priority

-(IBAction)SelectOptionPriority:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Priority Selected For %@", self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *priority = (NSString *)sender;
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Priority %@ Selected For Tasks %@ For %@", priority, self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [self SelectOption_UpdateItemData:[@{@"ItemPriority" : priority} mutableCopy]];
    
}

#pragma mark - Select Option - Tags

-(IBAction)SelectOptionTags:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Tags Selected For Tasks %@ For %@", selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    NSMutableArray *itemTagsArrays = [NSMutableArray array];
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        if (self->itemDict && self->itemDict[@"ItemUniqueID"] && [self->itemDict[@"ItemUniqueID"] containsObject:itemUniqueID]) {
            
            NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSMutableArray *itemTags = [(NSArray *)self->itemDict[@"ItemTags"] count] > indexOfObject ? [self->itemDict[@"ItemTags"][indexOfObject] mutableCopy] : [NSMutableArray array];
            
            for (NSString *itemTag in itemTags) {
                
                if ([itemTagsArrays containsObject:itemType] == NO) {
                    
                    [itemTagsArrays addObject:itemTag];
                    
                }
                
            }
            
        }
        
    }
    
    [[[PushObject alloc] init] PushToViewTagsViewController:itemTagsArrays allItemTagsArrays:allItemTagsArrays viewingItemDetails:NO comingFromAddTaskViewController:NO comingFromViewTaskViewController:NO currentViewController:self];
    
}

#pragma mark - Select Option - Color

-(IBAction)SelectOptionColor:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Color Selected For %@", self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *color = (NSString *)sender;
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Color %@ Selected For Tasks %@ For %@", color, self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [self SelectOption_UpdateItemData:[@{@"ItemColor" : color} mutableCopy]];
    
}

#pragma mark - Select Option - Mute/Unmute

-(void)SelectOptionMuteUnmute:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    if (self->selectedItemsDict.count > 0) {
        
        [self StartProgressView];
        
        NSMutableArray *objectArr = [NSMutableArray array];
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            
            
            
            BOOL TaskHasBeenMuted = [[[BoolDataObject alloc] init] TaskHasBeenMuted:singleObjectItemDict];
            
            BOOL Mute = TaskHasBeenMuted == NO;
            
            
            
            [self MuteUnmute_UpdateMutedArray:singleObjectItemDict Mute:Mute];
            
            
            
            __block int totalQueries = 3;
            __block int completedQueries = 0;
            
            
            
            /*
             //
             //
             //Delete Item Silent Notifications
             //
             //
             */
            [self MuteUnmute_ResetItemNotifications:singleObjectItemDict completionHandler:^(BOOL finished) {
                
                [self MuteUnmute_CompletionBlock:self->selectedItemsDict objectArr:objectArr totalQueries:totalQueries completedQueries:completedQueries];
                
            }];
            
            
            /*
             //
             //
             //Delete Item Scheduled Start Notifications
             //
             //
             */
            [self MuteUnmute_ResetItemScheduledStartNotifications:singleObjectItemDict completionHandler:^(BOOL finished) {
                
                [self MuteUnmute_CompletionBlock:self->selectedItemsDict objectArr:objectArr totalQueries:totalQueries completedQueries:completedQueries];
                
            }];
            
            
            /*
             //
             //
             //Delete Item Custom Reminder Notifications
             //
             //
             */
            [self MuteUnmute_ResetItemCustomReminderNotifications:singleObjectItemDict completionHandler:^(BOOL finished) {
                
                [self MuteUnmute_CompletionBlock:self->selectedItemsDict objectArr:objectArr totalQueries:totalQueries completedQueries:completedQueries];
                
            }];
            
        }
        
    }
    
}

#pragma mark - Select Option - Duplicate

-(void)TapGestureDuplicate:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Duplicate Selected For Tasks %@ For %@", selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if ([[selectedItemsDict allKeys] count] > 0) {
        
        
        
        [self StartProgressView];
        
        NSMutableDictionary *allSetDataDict = [NSMutableDictionary dictionary];
        NSMutableDictionary *itemUniqueIDDict = [NSMutableDictionary dictionary];
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *newItemNames = [NSMutableArray array];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        
        
        for (NSString *itemUniqueID in [selectedItemsDict allKeys]) {
            
            
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            
            NSMutableDictionary *setDataDict = [self Duplicate_GenerateSetDataDict:singleObjectItemDict itemNamesAlreadyUsed:itemNamesAlreadyUsed newItemNames:newItemNames];
             allSetDataDict = [self Duplicate_GenerateUpdatedAllSetDataDict:allSetDataDict setDataDict:setDataDict];
            
            [itemUniqueIDDict setObject:@{@"SpecificItemUniqueID" : itemUniqueID} forKey:setDataDict[@"ItemUniqueID"]];
            
            
            
            __block int totalQueries = 4;
            __block int completedQueries = 0;
            
            
            
            /*
             //
             //
             //Send Push Notification
             //
             //
             */
            [self Duplicate_SendPushNotifications:setDataDict completionHandler:^(BOOL finished) {
                
                [self Duplicate_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) selectedItemsDict:self->selectedItemsDict objectArr:objectArr allSetDataDict:allSetDataDict itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            /*
             //
             //
             //Send Item Silent Notification
             //
             //
             */
            [self Duplicate_ResetItemNotifications:setDataDict completionHandler:^(BOOL finished) {
                
                [self Duplicate_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) selectedItemsDict:self->selectedItemsDict objectArr:objectArr allSetDataDict:allSetDataDict itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            /*
             //
             //
             //Set Item Data
             //
             //
             */
            [self Duplicate_SetItemData:setDataDict completionHandler:^(BOOL finished) {
                
                [self Duplicate_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) selectedItemsDict:self->selectedItemsDict objectArr:objectArr allSetDataDict:allSetDataDict itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            /*
             //
             //
             //Set Image Data
             //
             //
             */
            [self Duplicate_SetImageData:setDataDict completionHandler:^(BOOL finished) {
                
                [self Duplicate_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) selectedItemsDict:self->selectedItemsDict objectArr:objectArr allSetDataDict:allSetDataDict itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
        }
        
    }
    
}

#pragma mark - Select Option - Share

-(IBAction)SelectOptionShare:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Tell A Friend Clicked"] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *body = [[[GeneralObject alloc] init] GenerateShareString:self->itemDict arrayOfUniqueIDs:[selectedItemsDict allKeys] itemType:itemType keyArray:keyArray homeMembersDict:homeMembersDict];
    NSURL *attachment = [NSURL URLWithString:@"https://apps.apple.com/us/app/wedivvy/id1570700094"];
    
    NSArray* dataToShare = @[body, attachment];
    
    UIActivityViewController* activityViewController = [[UIActivityViewController alloc] initWithActivityItems:dataToShare applicationActivities:nil];
    [activityViewController setValue:@"WeDivvy Tasks" forKey:@"subject"];
    activityViewController.excludedActivityTypes = @[UIActivityTypeAirDrop];
    
    [activityViewController setCompletionWithItemsHandler:^(NSString * __nullable activityType, BOOL completed, NSArray * __nullable returnedItems, NSError * __nullable activityError) {
        
        [self SelectDoneButtonAction:self];
        
    }];
    
    [self presentViewController:activityViewController animated:YES completion:^{}];
    
}

#pragma mark - Tap Gesture IBAction Methods

- (IBAction)TapGestureAddTask:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"AddTask Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->EverythingIsThere == YES) {
        
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
    
        NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
        BOOL ListSelected = [taskListDict[@"TaskListName"] containsObject:sectionSelected];
        NSString *defaultTaskListName = ListSelected == YES ? sectionSelected : @"No List";
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        [[[PushObject alloc] init] PushToAddTaskViewController:nil partiallyAddedDict:nil suggestedItemToAddDict:nil templateToEditDict:nil draftToEditDict:nil moreOptionsDict:nil multiAddDict:nil notificationSettingsDict:notificationSettingsDict topicDict:topicDict homeID:homeID homeMembersArray:homeMembersArray homeMembersDict:homeMembersDict itemOccurrencesDict:[NSMutableDictionary dictionary] folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays defaultTaskListName:defaultTaskListName partiallyAddedTask:NO addingTask:YES addingMultipleTasks:NO addingSuggestedTask:NO editingTask:NO viewingTask:NO viewingMoreOptions:NO duplicatingTask:NO editingTemplate:NO viewingTemplate:NO editingDraft:NO viewingDraft:NO currentViewController:self Superficial:NO];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

#pragma mark Tab Bar

-(IBAction)TapGesturePushToChoreViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Chores Tab Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(x1)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ViewDidLoadShouldStart"];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_EditTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteTask" object:nil];
    
    [[[PushObject alloc] init] PushToTasksNavigationController:YES Expenses:NO Lists:NO Animated:NO currentViewController:self];
    
}

-(IBAction)TapGesturePushToExpenseViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Expense Tab Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(x2)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ViewDidLoadShouldStart"];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_EditTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteTask" object:nil];
    
    [[[PushObject alloc] init] PushToTasksNavigationController:NO Expenses:YES Lists:NO Animated:NO currentViewController:self];
    
}

-(IBAction)TapGesturePushToListsViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Lists Tab Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(x3)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ViewDidLoadShouldStart"];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_AddTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_EditTask" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"NSNotification_Tasks_DeleteTask" object:nil];
    
    [[[PushObject alloc] init] PushToTasksNavigationController:NO Expenses:NO Lists:YES Animated:NO currentViewController:self];
}

-(IBAction)TapGesturePushToGroupChatViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Group Chat Tab Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[[PushObject alloc] init] PushToChatsViewController:self];
    
}

#pragma mark Top Bar

-(IBAction)TapGestureSideBarImage:(id)sender {
    
    if (SideBarDisplayed == NO) {
        
        [self.sideBarTableView reloadData];
        
        [self DisplaySideBar:YES duration:0.25 completionHandler:^(BOOL finished) {
            
            [self DisplaySideBarTutorialView];
            
        }];
        
        tapGestureSideBarCustomScrollView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.customScrollView.frame.size.width, self.customScrollView.frame.size.height)];
        tapGestureSideBarCustomScrollView.userInteractionEnabled = YES;
        [tapGestureSideBarCustomScrollView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(HideSideBar)]];
        [self.customScrollView addSubview:tapGestureSideBarCustomScrollView];
        [self.customScrollView bringSubviewToFront:tapGestureSideBarCustomScrollView];
        
    } else {
        
        [self DisplaySideBar:NO duration:0.25 completionHandler:^(BOOL finished) {
            
        }];
        
        [tapGestureSideBarCustomScrollView removeFromSuperview];
        
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Side Icon Clicked %@ For %@", self->SideBarDisplayed == YES ? @"On" : @"Off", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
}

-(IBAction)TapGesturePushToViewPaymentsViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Suggested Tasks Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->EverythingIsThere == YES) {
        
        NSMutableDictionary *dataDisplayDictToUse = [NSMutableDictionary dictionary];
        NSArray *keyArrayLocal = [keyArray mutableCopy];
        
        if (self->dataDisplayDict) {
            
            if (dataDisplaySectionsArray) {
                
                for (NSString *section in dataDisplaySectionsArray) {
                    
                    NSMutableDictionary *tempDict = [self->dataDisplayDict[section] mutableCopy];
                    
                    for (NSString *key in keyArrayLocal) {
                        
                        NSMutableArray *arr = dataDisplayDictToUse[key] ? [dataDisplayDictToUse[key] mutableCopy] : [NSMutableArray array];
                        NSMutableArray *tempArr = tempDict[key] ? [tempDict[key] mutableCopy] : [NSMutableArray array];
                        
                        for (id object in tempArr) {
                            [arr addObject:object];
                        }
                        
                        [dataDisplayDictToUse setObject:arr forKey:key];
                        
                    }
                    
                }
                
            }
            
        }
        
        
        
        if (dataDisplayDictToUse[@"Past Due"]) {
            [dataDisplayDictToUse removeObjectForKey:@"Past Due"];
        }
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
     
        [[[PushObject alloc] init] PushToViewPaymentsViewController:homeMembersDict itemDict:itemDict dataDisplayDict:dataDisplayDictToUse folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict topicDict:topicDict notificationSettingsDict:notificationSettingsDict homeMembersArray:homeMembersArray itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays viewingOwed:NO viewingEarned:NO viewingUserIDWhoOwesMoney:@"" viewingUserIDWhoIsOwedMoney:@"" currentViewController:self];

    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

#pragma mark Side Bar Top Bar

-(IBAction)TapGesturePushToHomeMembersViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Home Members Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->EverythingIsThere == YES) {
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        NSString *homeName = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeName"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeName"] : @"xxx";
        
        [[[PushObject alloc] init] PushToHomeMembersViewController:homeID homeName:homeName notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict viewingHomeMembersFromHomesViewController:NO currentViewController:self Superficial:NO];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

-(IBAction)TapGesturePushToNotificationsViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Notifications Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->EverythingIsThere == YES) {
        
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        
        NSMutableArray *homeMembersArrayLocal = homeMembersArray ? homeMembersArray : [NSMutableArray array];
        NSMutableDictionary *homeMembersDictLocal = homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary];
        NSMutableDictionary *notificationSettingsDictLocal = notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
        
        [[[PushObject alloc] init] PushToNotificationsViewController:self homeMembersArray:homeMembersArrayLocal homeMembersDict:homeMembersDictLocal notificationSettingsDict:notificationSettingsDictLocal topicDict:topicDict folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

-(IBAction)TapGesturePushToSearchViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Search Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
        
        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Search Tasks" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
        
    } else {
        
        if (EverythingIsThere == YES) {
            
            NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
            
            NSMutableArray *homeMembersArrayLocal = homeMembersArray ? homeMembersArray : [NSMutableArray array];
            NSMutableDictionary *homeMembersDictLocal = homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *notificationSettingsDictLocal = notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary];
          
            [[[PushObject alloc] init] PushToSearchTasksViewController:notificationSettingsDictLocal topicDict:topicDict itemDict:itemDict itemDictNo2:itemDictNo2 itemDictNo3:itemDictNo3 homeMembersArray:homeMembersArrayLocal homeMembersDict:homeMembersDictLocal allItemTagsArrays:allItemTagsArrays currentViewController:self Superficial:NO];
            
        } else {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
            
        }
        
    }
    
}

-(IBAction)TapGesturePushToViewActivityViewController:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"View Home Activity Clicked For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if (EverythingIsThere == YES) {
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
        
        [[[PushObject alloc] init] PushToViewActivityViewController:YES ViewingItem:NO itemID:@"" homeMembersArray:homeMembersArray homeMembersDict:homeMembersDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays currentViewController:self];
   
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}


- (IBAction)TapGesturePushToLiveSupportAction:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Live Support"] completionHandler:^(BOOL finished) {
        
    }];
    
    if (![[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] isEqualToString:@"2021-08-24 23:51:563280984"]) {
        
        [self StartProgressView];
        
        if (![[NSUserDefaults standardUserDefaults] objectForKey:@"StartedLiveChat"]) {
            
            [[[NotificationsObject alloc] init] SendPushNotificationToCreator:[NSString stringWithFormat:@"%@ - New Support Chat", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] notificationBody:@"" badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StartedLiveChat"];
                    
                    [self->progressView setHidden:YES];
                    
                    [[[PushObject alloc] init] PushToLiveChatViewControllerFromSettingsPage:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] viewingLiveSupport:YES currentViewController:self Superficial:NO];
                    
                });
                
            }];
            
        } else {
            
            [[[NotificationsObject alloc] init] SendPushNotificationToCreator:[NSString stringWithFormat:@"%@ - Existing Support Chat", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] notificationBody:@"" badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    [self->progressView setHidden:YES];
                    
                    [[[PushObject alloc] init] PushToLiveChatViewControllerFromSettingsPage:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] viewingLiveSupport:YES currentViewController:self Superficial:NO];
                    
                });
                
            }];
            
        }
        
    } else {
        
        [self->progressView setHidden:YES];
        
        [[[PushObject alloc] init] PushToMasterLiveChatViewController:self];
        
    }
    
}

-(IBAction)TapGesturePushToViewCalendarViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Calendar Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (EverythingIsThere == YES) {
      
        NSMutableArray *homeMembersArrayLocal = homeMembersArray ? homeMembersArray : [NSMutableArray array];
        NSMutableDictionary *homeMembersDictLocal = homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary];
        NSMutableDictionary *notificationSettingsDictLocal = notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary];
     
        NSMutableDictionary *choreDict = [self->itemDict mutableCopy];
        NSMutableDictionary *expenseDict = [self->itemDictNo2 mutableCopy];
        NSMutableDictionary *listDict = [self->itemDictNo3 mutableCopy];
        
        if ([self->itemType isEqualToString:@"Expense"]) {
            expenseDict = [self->itemDict mutableCopy];
            listDict = [self->itemDictNo2 mutableCopy];
            choreDict = [self->itemDictNo3 mutableCopy];
        }
        
        if ([self->itemType isEqualToString:@"List"]) {
            listDict = [self->itemDict mutableCopy];
            choreDict = [self->itemDictNo2 mutableCopy];
            expenseDict = [self->itemDictNo3 mutableCopy];
        }
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
        
        [[[PushObject alloc] init] PushToViewCalendarViewController:choreDict itemsDictNo2:expenseDict itemsDictNo3:listDict itemsOccurrencesDict:itemOccurrencesDict itemsOccurrencesDictNo2:itemOccurrencesDictNo2 itemsOccurrencesDictNo3:itemOccurrencesDictNo3 homeMembersArray:homeMembersArrayLocal homeMembersDict:homeMembersDictLocal notificationSettingsDict:notificationSettingsDictLocal topicDict:topicDict folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays currentViewController:self];

    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

-(IBAction)TapGesturePushToViewPromoCodeViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Gift Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->EverythingIsThere == YES) {
        
        [[[PushObject alloc] init] PushToViewPromoCodeViewController:self];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

-(IBAction)TapGesturePushToSettingsViewController:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Settings Icon Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    if (EverythingIsThere == YES) {
        
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        
        [[[PushObject alloc] init] PushToSettingsViewController:NO allItemAssignedToArrays:allItemAssignedToArrays currentViewController:self];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

#pragma mark Table View

-(IBAction)TapGestureSelectSectionMainTableView:(id)sender {
    
    NSInteger the_tag = -1;
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:sender classArr:@[[UIView class]]];
    
    if (ObjectIsKindOfClass == YES) {
        
        UIView *view = (UIView *)sender;
        the_tag = [view tag];
        
    } else {
        
        UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
        the_tag = [tapRecognizer.view tag];
        
    }
    
    ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    if (ObjectIsKindOfClass == YES) {
        
        if ([dataDisplaySectionsArray count] > the_tag) {
            
            NSString *sectionName = dataDisplaySectionsArray[the_tag];
            
            if (selectedSectionsDict[sectionName]) {
                
                [selectedSectionsDict removeObjectForKey:sectionName];
                
                NSMutableDictionary *dictToUse = [NSMutableDictionary dictionary];
                
                if ([[self->dataDisplayDict allKeys] containsObject:sectionName]) {
                    dictToUse = [self->dataDisplayDict[sectionName] mutableCopy];
                }
                
                if (dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > 0) {
                    
                    for (int i=0 ; i<[(NSArray *)dictToUse[@"ItemUniqueID"] count] ; i++) {
                        
                        NSString *itemUniqueID = dictToUse[@"ItemUniqueID"][i];
                        
                        if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID]) {
                            
                            [self->selectedItemsDict removeObjectForKey:itemUniqueID];
                            
                        }
                        
                    }
                    
                }
                
            } else {
                
                [selectedSectionsDict setObject:@"" forKey:sectionName];
                
                NSMutableDictionary *dictToUse = [NSMutableDictionary dictionary];
                
                if ([[self->dataDisplayDict allKeys] containsObject:sectionName]) {
                    dictToUse = [self->dataDisplayDict[sectionName] mutableCopy];
                }
                
                if (dictToUse[@"ItemUniqueID"]) {
                    
                    for (int i=0 ; i<[(NSArray *)dictToUse[@"ItemUniqueID"] count] ; i++) {
                        
                        NSString *itemUniqueID = dictToUse[@"ItemUniqueID"][i];
                        
                        if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                            
                            [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                            
                        }
                        
                    }
                    
                }
                
            }
            
            
            
            selectedAmountLabel.text = [NSString stringWithFormat:@"%lu Selected", (unsigned long)selectedItemsDict.count];
            
            
            
            [self SelectTaskUpdateBottomViewUI];
            [self SetUpBottomEllipsisContextMenu];
            [self SetUpBottomFolderContextMenu];
            
            
            
            [self SelectDeselectItems_CheckIfAllTasksSelected];
            
        }
        
    }

    [self.customTableView reloadData];
    
}

-(IBAction)TapGestureCollapseSectionMainTableView:(UITapGestureRecognizer *)sender {
    
    UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
    NSInteger the_tag = [tapRecognizer.view tag];
    
    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    
    NSMutableArray *previousCollapseSectionsArray = [collapseSectionsArray mutableCopy];
    
    BOOL OpenningSection = NO;
    int amountAddedOrRemoved = 0;
    
    [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView1 dataDisplaySectionsArray:%@ collapseSectionsArray:%@", dataDisplaySectionsArray, collapseSectionsArray];
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    if (ObjectIsKindOfClass == YES) {
        
        if ([dataDisplaySectionsArray count] > the_tag) {
            
            NSString *sectionIdentifier = dataDisplaySectionsArray[the_tag];
            
            if ([collapseSectionsArray containsObject:sectionIdentifier]) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Openning Main Table View Section %@ For %@", sectionIdentifier, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
                    
                }];
                
                [collapseSectionsArray removeObject:sectionIdentifier];
                OpenningSection = NO;
                amountAddedOrRemoved -= 1;
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView2 dataDisplaySectionsArray:%@ collapseSectionsArray:%@", dataDisplaySectionsArray, collapseSectionsArray];
                
            } else {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Collapsing Main Table View Section %@ For %@", sectionIdentifier, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
                    
                }];
                
                [collapseSectionsArray addObject:sectionIdentifier];
                OpenningSection = YES;
                amountAddedOrRemoved += 1;
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView3 dataDisplaySectionsArray:%@ collapseSectionsArray:%@", dataDisplaySectionsArray, collapseSectionsArray];
                
            }
            
            [[NSUserDefaults standardUserDefaults] setObject:collapseSectionsArray forKey:@"CollapseSectionsArray"];
            
            [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView3 dataDisplaySectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@, amountAddedOrRemoved:%d", dataDisplaySectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
            
            if ((int)[collapseSectionsArray count] == ((int)[previousCollapseSectionsArray count] + amountAddedOrRemoved)) {
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView4 dataDisplaySectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@, amountAddedOrRemoved:%d", dataDisplaySectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
                
                [self.customTableView beginUpdates];
                [self.customTableView reloadSections:[NSIndexSet indexSetWithIndex:(int)the_tag] withRowAnimation:UITableViewRowAnimationAutomatic];
                [self.customTableView endUpdates];
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionMainTableView5 dataDisplaySectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@, amountAddedOrRemoved:%d", dataDisplaySectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
                
            }
            
        }
        
    }
    
    if (OpenningSection) {
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"OpenningSection"];
    } else {
        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"OpenningSection"];
    }
    
    
    //Stop tableview from shifting
    BOOL DisplayNotificationReminderAnimation = [[[NSUserDefaults standardUserDefaults] objectForKey:@"BeginNotificationReminderAnimation"] isEqualToString:@"Yes"];
    
    if (DisplayNotificationReminderAnimation == YES) {
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"BeginNotificationReminderAnimation"];
        
        [UIView animateWithDuration:0.25 animations:^{
            
            [self DisplayDropDownAlertView];
            
        }];
        
    } else {
        
        [self DisplayDropDownAlertView];
        
    }
    
}

-(IBAction)TapGestureSelectTag:(id)sender {
    
    UIButton *buttonSender = (UIButton *)sender;
    NSString *buttonTitle = buttonSender.titleLabel.text;
    
    buttonTitle = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:buttonTitle arrayOfSymbols:@[@"#"]];
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Clicked Tag %@ For %@", buttonTitle, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    NSString *categoryName = buttonTitle;
    [[NSUserDefaults standardUserDefaults] setObject:categoryName forKey:@"CategorySelected"];
    
    self->_middleLabel.text = categoryName;
    
    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    
    if ([collapseSectionsArray containsObject:@"Tags"] == NO) {
        
        [collapseSectionsArray addObject:@"Tags"];
        
    }
    
    [[NSUserDefaults standardUserDefaults] setObject:collapseSectionsArray forKey:@"SideBarCollapseSectionsArray"];
    
    [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
        
    }];
    
}



#pragma mark Side Bar Table View

-(IBAction)TapGestureCollapseSectionSideBarTableView:(UITapGestureRecognizer*)sender {
    
    UIView *view = sender.view;
    
    if ([sideBarSectionsArray[view.tag] isEqualToString:@"Users"] ||
        [sideBarSectionsArray[view.tag] isEqualToString:@"Tags"] ||
        [sideBarSectionsArray[view.tag] isEqualToString:@"Colors"] ||
        [folderDict[@"FolderName"] containsObject:sideBarSectionsArray[view.tag]]) {
        
        NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
        
        NSMutableArray *previousCollapseSectionsArray = [collapseSectionsArray mutableCopy];
        
        BOOL OpenningSection = NO;
        int amountAddedOrRemoved = 0;
        
        [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView1 sideBarSectionsArray:%@ collapseSectionsArray:%@", sideBarSectionsArray, collapseSectionsArray];
        
        if ([sideBarSectionsArray count] > view.tag) {
            
            if ([collapseSectionsArray containsObject:sideBarSectionsArray[view.tag]]) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Openning Side Bar Table View Section %@ For %@", sideBarSectionsArray[view.tag], [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
                    
                }];
                
                [collapseSectionsArray removeObject:sideBarSectionsArray[view.tag]];
                OpenningSection = NO;
                amountAddedOrRemoved -= 1;
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView2 sideBarSectionsArray:%@ collapseSectionsArray:%@", sideBarSectionsArray, collapseSectionsArray];
                
            } else {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Collapsing Side Bar Table View Section %@ For %@", sideBarSectionsArray[view.tag], [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
                    
                }];
                
                [collapseSectionsArray addObject:sideBarSectionsArray[view.tag]];
                OpenningSection = YES;
                amountAddedOrRemoved += 1;
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView3 sideBarSectionsArray:%@ collapseSectionsArray:%@", sideBarSectionsArray, collapseSectionsArray];
                
            }
            
            [[NSUserDefaults standardUserDefaults] setObject:collapseSectionsArray forKey:@"SideBarCollapseSectionsArray"];
            
            [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView4 sideBarSectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@ amountAddedOrRemoved:%d", sideBarSectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
            
            if ((int)[collapseSectionsArray count] == ((int)[previousCollapseSectionsArray count] + amountAddedOrRemoved)) {
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView5 sideBarSectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@ amountAddedOrRemoved:%d", sideBarSectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
                
                [self.sideBarTableView beginUpdates];
                [self.sideBarTableView reloadSections:[NSIndexSet indexSetWithIndex:(int)view.tag] withRowAnimation:UITableViewRowAnimationAutomatic];
                [self.sideBarTableView endUpdates];
                
                [[FIRCrashlytics crashlytics] logWithFormat:@"TapGestureCollapseSectionSideBarTableView6 sideBarSectionsArray:%@ collapseSectionsArray:%@ previousCollapseSectionsArray:%@ amountAddedOrRemoved:%d", sideBarSectionsArray, collapseSectionsArray, previousCollapseSectionsArray, amountAddedOrRemoved];
                
            }
            
        }
        
    }
    
}

-(IBAction)TapGestureTaskListSectionInfoPopup:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"\"My Lists\" Section Info Popup Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    UIAlertController *controller = [UIAlertController alertControllerWithTitle:@"My Lists" message:@"Your folders and lists will only be visible to you and not your home members."
                                                                 preferredStyle:UIAlertControllerStyleAlert];
    
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"Got it!"
                                                     style:UIAlertActionStyleCancel
                                                   handler:^(UIAlertAction * _Nonnull action) {}];
    
    [controller addAction:cancel];
    [self presentViewController:controller animated:YES completion:nil];
    
}


-(IBAction)TapGestureSideBarAddTaskList:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Side Bar Add List Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[[PushObject alloc] init] PushToViewTaskListsViewController:[folderDict mutableCopy] taskListDict:[taskListDict mutableCopy] itemToEditDict:nil itemUniqueID:@"" comingFromTasksViewController:NO comingFromViewTaskViewController:NO currentViewController:self];
    
}

#pragma mark Dropdown Alert View

- (IBAction)TapGestureDisplayEnableNotificationsRequest:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Notification Reminder Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    alertView = [[AlertView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) viewControllerWidth:self.view.frame.size.width viewControllerHeight:self.view.frame.size.height text:[NSString stringWithFormat:@"Turn on Notifications\n\nFind out when you're assigned to tasks, when their due, and when their completed"] acceptButtonSelector:@selector(EnableNotificationsRequestAccepted:) declineButtonSelector:@selector(RequestRejected:) viewControllerObject:[[TasksViewController alloc] init]];
    alertView.alpha = 0.0f;
    [self.view addSubview:alertView];
    
    [UIView animateWithDuration:0.25 animations:^{
        self->alertView.alpha = 1.0f;
    }];
    
}

-(IBAction)TapGestureDisplayCrashAlertView:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Report Crash Reminder Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [self DisplayAlertView:YES backDropView:self->_reportCrashBackdropView alertViewNoButton:nil alertViewYesButton:nil];
    
    [UIView animateWithDuration:0.35 animations:^{
        
        CGFloat height = CGRectGetHeight(self.view.bounds);
        
        CGRect newRect = self->_reportCrashAlertView.frame;
        newRect.origin.y = height - self->_reportCrashAlertView.frame.size.height;
        self->_reportCrashAlertView.frame = newRect;
        
    } completion:^(BOOL finished) {
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self->_reportCrashAlertViewNotesTextView becomeFirstResponder];
            
        });
        
    }];
    
}

- (IBAction)TapGestureDismissDropdownAlertView:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Dismiss Reminder Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"NotificationReminderHasBeenRemoved"];
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"BeginNotificationReminderAnimation"];
    [[NSUserDefaults standardUserDefaults] setObject:@"" forKey:@"AppCrashed"];
    [[NSUserDefaults standardUserDefaults] setObject:@"" forKey:@"AppCrashedReported"];
    
    [self viewDidLayoutSubviews];
    
}

#pragma mark Feedback View

-(IBAction)TapGestureFeedbackOptionView:(id)sender {
    
    UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
    NSInteger the_tag = [tapRecognizer.view tag];
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Feedback Rating Option %ld Clicked For %@", (long)the_tag, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    float shrinkAmount = 0.8;
    
    FeedbackButtonClicked = true;
    
    [UIView animateWithDuration:0.15 animations:^{
        
        self.requestFeedbackAlertViewOption1.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 1 ? shrinkAmount : 1.0, the_tag == 1 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption2.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 2 ? shrinkAmount : 1.0, the_tag == 2 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption3.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 3 ? shrinkAmount : 1.0, the_tag == 3 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption4.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 4 ? shrinkAmount : 1.0, the_tag == 4 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption5.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 5 ? shrinkAmount : 1.0, the_tag == 5 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption6.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 6 ? shrinkAmount : 1.0, the_tag == 6 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption7.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 7 ? shrinkAmount : 1.0, the_tag == 7 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption8.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 8 ? shrinkAmount : 1.0, the_tag == 8 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption9.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 9 ? shrinkAmount : 1.0, the_tag == 9 ? shrinkAmount : 1.0);
        self.requestFeedbackAlertViewOption10.transform = CGAffineTransformScale(CGAffineTransformIdentity, the_tag == 10 ? shrinkAmount : 1.0, the_tag == 10 ? shrinkAmount : 1.0);
        
        NSString *rating = [NSString stringWithFormat:@"%ld", (long)the_tag];
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            NSMutableDictionary *dataDict = [NSMutableDictionary dictionary];
            
            if ([[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"]) {
                [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"] forKey:@"FeedbackID"];
            } else {
                NSString *randomID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
                [[NSUserDefaults standardUserDefaults] setObject:randomID forKey:@"CurrentFeedbackID"];
                [dataDict setObject:randomID forKey:@"FeedbackID"];
            }
            
            [dataDict setObject:[[[GeneralObject alloc] init] GenerateCurrentDateString] forKey:@"FeedbackDatePosted"];
            [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] forKey:@"FeedbackSubmittedBy"];
            [dataDict setObject:rating forKey:@"FeedbackRating"];
            [dataDict setObject:@"(Clicked Score)" forKey:@"FeedbackNotes"];
            [dataDict setObject:@"6.5.98" forKey:@"FeedbackAppVersion"];
            
            [[[SetDataObject alloc] init] SetDataFeedback:dataDict completionHandler:^(BOOL finished) {
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"Feedback", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                    NSString *notificationBody = [NSString stringWithFormat:@"Rating: %@, Notes: %@", dataDict[@"FeedbackRating"], dataDict[@"FeedbackNotes"]];
                    
                    [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                        
                    }];
                    
                });
                
            }];
            
        });
        
    }];
    
}

-(IBAction)TapGestureFeedbackNextButton:(id)sender {
    
    UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
    NSInteger the_tag = [tapRecognizer.view tag];
    
    NSString *str = @"Nonce";
    
    if (the_tag == 1) {
        str = @"Once";
    } else if (the_tag == 2) {
        str = @"Twice";
    } else if (the_tag == 3) {
        str = @"Thrice";
    }
    
    _requestFeedbackAlertViewQuestionLabel2.hidden = YES;
    _requestFeedbackAlertViewNotesTextView.hidden = YES;
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Feedback Submit Button Clicked %@ For %@", str, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    if (FeedbackButtonClicked == true || PremiumSubscriptionCancelled == true) {
        
        [UIView animateWithDuration:0.25 animations:^{
            
            if (the_tag == 1) {
                
                [self->_requestFeedbackAlertViewScrollView setContentOffset:CGPointMake(width*2, 0) animated:YES];
                
                [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"CompletedSurvey"];
                
            } else if (the_tag == 2) {
                
                if (self->PremiumSubscriptionCancelled == NO) {
                    
                    [self->_requestFeedbackAlertViewScrollView setContentOffset:CGPointMake(width*2, 0) animated:YES];
                    
                }
                
            } else if (the_tag == 3) {
                
                CGRect newRect = self->_requestFeedbackAlertView.frame;
                newRect.origin.y = height;
                self->_requestFeedbackAlertView.frame = newRect;
                
            }
            
        } completion:^(BOOL finished) {
            
            if (the_tag == 1) {
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    //[self->_requestFeedbackAlertViewNotesTextView becomeFirstResponder];
                    
                });
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    NSMutableDictionary *dataDict = [NSMutableDictionary dictionary];
                    
                    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"]) {
                        [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"] forKey:@"FeedbackID"];
                    } else {
                        NSString *randomID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
                        [[NSUserDefaults standardUserDefaults] setObject:randomID forKey:@"CurrentFeedbackID"];
                        [dataDict setObject:randomID forKey:@"FeedbackID"];
                    }
                    
                    [dataDict setObject:@"(Submitted Score)" forKey:@"FeedbackNotes"];
                    
                    [[[SetDataObject alloc] init] UpdateDataFeedback:dataDict completionHandler:^(BOOL finished) {
                        
                        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                            
                            NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"Feedback", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                            NSString *notificationBody = [NSString stringWithFormat:@"Rating: %@, Notes: %@", dataDict[@"FeedbackRating"], dataDict[@"FeedbackNotes"]];
                            
                            [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                                
                            }];
                            
                        });
                        
                    }];
                    
                });
                
            } else if (the_tag == 2) {
                
                [self->_requestFeedbackAlertViewNotesTextView resignFirstResponder];
                
                NSString *notes = self->_requestFeedbackAlertViewNotesTextView.text;
                
                if (self->PremiumSubscriptionCancelled == true) {
                    
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        [UIView animateWithDuration:0.25 animations:^{
                            
                            CGRect newRect = self->_requestFeedbackAlertView.frame;
                            newRect.origin.y = height;
                            self->_requestFeedbackAlertView.frame = newRect;
                            
                        } completion:^(BOOL finished) {
                            
                            [self DisplayAlertView:NO backDropView:self->_requestFeedbackBackdropView alertViewNoButton:nil alertViewYesButton:nil];
                            
                        }];
                        
                    });
                    
                    notes = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:notes arrayOfSymbols:@[@"Tell us why here"]];
                    
                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                        
                        NSMutableDictionary *dataDict = [NSMutableDictionary dictionary];
                        
                        [dataDict setObject: [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString] forKey:@"FeedbackID"];
                        [dataDict setObject:[[[GeneralObject alloc] init] GenerateCurrentDateString] forKey:@"FeedbackDatePosted"];
                        [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] forKey:@"FeedbackSubmittedBy"];
                        [dataDict setObject:notes forKey:@"FeedbackNotes"];
                        
                        [[[SetDataObject alloc] init] SetDataPremiumCancelledFeedback:dataDict completionHandler:^(BOOL finished) {
                            
                            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"CurrentFeedbackID"];
                            
                            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                                
                                NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"Premium Cancelled Feedback", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                                NSString *notificationBody = [NSString stringWithFormat:@"Notes: %@", dataDict[@"FeedbackNotes"]];
                                
                                [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                                    
                                }];
                                
                            });
                            
                        }];
                        
                    });
                    
                } else {
                    
                    notes = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:notes arrayOfSymbols:@[@"Leave your feedback here"]];
                    
                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                        
                        NSMutableDictionary *dataDict = [NSMutableDictionary dictionary];
                        
                        if ([[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"]) {
                            [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentFeedbackID"] forKey:@"FeedbackID"];
                        } else {
                            NSString *randomID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
                            [[NSUserDefaults standardUserDefaults] setObject:randomID forKey:@"CurrentFeedbackID"];
                            [dataDict setObject:randomID forKey:@"FeedbackID"];
                        }
                        
                        [dataDict setObject:notes forKey:@"FeedbackNotes"];
                        
                        [[[SetDataObject alloc] init] UpdateDataFeedback:dataDict completionHandler:^(BOOL finished) {
                            
                            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"CurrentFeedbackID"];
                            
                            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                                
                                NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"Feedback", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                                NSString *notificationBody = [NSString stringWithFormat:@"Rating: %@, Notes: %@", dataDict[@"FeedbackRating"], dataDict[@"FeedbackNotes"]];
                                
                                [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                                    
                                    dispatch_async(dispatch_get_main_queue(), ^{
                                        
                                        [self->_requestFeedbackAlertViewNotesTextView resignFirstResponder];
                                        
                                    });
                                    
                                }];
                                
                            });
                            
                        }];
                        
                    });
                    
                }
                
            } else if (the_tag == 3) {
                
                [self DisplayAlertView:NO backDropView:self->_requestFeedbackBackdropView alertViewNoButton:nil alertViewYesButton:nil];
                
                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                    
                    NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"Feedback", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                    NSString *notificationBody = @"Rate Our App Clicked";
                    
                    [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                        
                        dispatch_async(dispatch_get_main_queue(), ^{
                            
                            if ([SKStoreReviewController class]){
                                
                                int numberOfTimes = 0;
                                
                                if (![[NSUserDefaults standardUserDefaults] objectForKey:@"TimesAskedForReview"]) {
                                    [[NSUserDefaults standardUserDefaults] setObject:@"1" forKey:@"TimesAskedForReview"];
                                } else {
                                    numberOfTimes = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"TimesAskedForReview"]] intValue];
                                    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", numberOfTimes+1] forKey:@"TimesAskedForReview"];
                                }
                                
                                if (numberOfTimes < 3) {
                                    [SKStoreReviewController requestReviewInScene:self.view.window.windowScene];
                                } else {
                                    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://apps.apple.com/us/app/wedivvy/id1570700094"] options:@{} completionHandler:^(BOOL success) {
                                        
                                    }];
                                }
                                
                            }
                            
                        });
                        
                    }];
                    
                });
                
            }
            
        }];
        
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"Looks like you forgot to make a selection. 😅" currentViewController:self];
        
    }
    
}

-(IBAction)TapGestureFeedbackClose:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Close Feedback Popup Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    [UIView animateWithDuration:0.25 animations:^{
        
        CGRect newRect = self->_requestFeedbackAlertView.frame;
        newRect.origin.y = height;
        self->_requestFeedbackAlertView.frame = newRect;
        
    } completion:^(BOOL finished) {
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"CurrentFeedbackID"];
        
        [self DisplayAlertView:NO backDropView:self->_requestFeedbackBackdropView alertViewNoButton:nil alertViewYesButton:nil];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self->_requestFeedbackAlertViewNotesTextView resignFirstResponder];
            
        });
        
    }];
    
}

#pragma mark Crash View

-(IBAction)TapGestureCrashNextButton:(id)sender {
    
    UITapGestureRecognizer *tapRecognizer = (UITapGestureRecognizer *)sender;
    NSInteger the_tag = [tapRecognizer.view tag];
    
    NSString *str = @"Nonce";
    
    if (the_tag == 1) {
        str = @"Once";
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Report Crash Submit Button Clicked %@ For %@", str, [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    //CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
    NSString *trimmedString = [_reportCrashAlertViewNotesTextView.text stringByTrimmingCharactersInSet:charSet];
    
    if (trimmedString.length > 0) {
        
        [UIView animateWithDuration:0.25 animations:^{
            
            if (the_tag == 1) {
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    [self->_reportCrashAlertViewNotesTextView resignFirstResponder];
                    
                    [self DisplayAlertView:NO backDropView:self->_reportCrashBackdropView alertViewNoButton:nil alertViewYesButton:nil];
                    
                    CGRect newRect = self->_reportCrashAlertView.frame;
                    newRect.origin.y = height;
                    self->_reportCrashAlertView.frame = newRect;
                    
                    [self TapGestureDismissDropdownAlertView:self];
                    
                });
                
            }
            
        } completion:^(BOOL finished) {
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self->_reportCrashAlertViewNotesTextView resignFirstResponder];
                
            });
            
            NSString *notes = self->_reportCrashAlertViewNotesTextView.text;
            
            notes = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:notes arrayOfSymbols:@[@"Describe what happened here"]];
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                NSString *randomID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
                
                NSMutableDictionary *dataDict = [NSMutableDictionary dictionary];
                
                [dataDict setObject:randomID ? randomID : @"" forKey:@"ReportedCrashID"];
                [dataDict setObject:@"6.5.98" forKey:@"ReportedCrashAppVersion"];
                [dataDict setObject:notes ? notes : @"" forKey:@"ReportedCrashkNotes"];
                [dataDict setObject:[[[GeneralObject alloc] init] GenerateCurrentDateString] ? [[[GeneralObject alloc] init] GenerateCurrentDateString] : @"" forKey:@"ReportedCrashDatePosted"];
                [dataDict setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx" forKey:@"ReportedCrashSubmittedBy"];
                
                [[[SetDataObject alloc] init] SetDataReportedCrash:dataDict completionHandler:^(BOOL finished) {
                    
                    [[NSUserDefaults standardUserDefaults] setObject:@"" forKey:@"AppCrashed"];
                    [[NSUserDefaults standardUserDefaults] setObject:@"" forKey:@"AppCrashedReported"];
                    
                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                        
                        NSString *notificationTitle = [NSString stringWithFormat:@"%@ - %@", @"ReportedCrash", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
                        NSString *notificationBody = [NSString stringWithFormat:@"Notes: %@", dataDict[@"ReportedCrashNotes"] ? dataDict[@"ReportedCrashNotes"] : @""];
                        
                        [[[NotificationsObject alloc] init] SendPushNotificationToCreator:notificationTitle notificationBody:notificationBody badgeNumber:(NSInteger *)1 completionHandler:^(BOOL finished) {
                            
                        }];
                        
                    });
                    
                }];
                
            });
            
        }];
        
    } else {
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"Looks like you forgot to write anything. 😅" currentViewController:self];
            
        });
        
    }
    
}

-(IBAction)TapGestureCrashClose:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Close Report Crash Popup Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
        
    }];
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    [UIView animateWithDuration:0.25 animations:^{
        
        CGRect newRect = self->_reportCrashAlertView.frame;
        newRect.origin.y = height;
        self->_reportCrashAlertView.frame = newRect;
        
    } completion:^(BOOL finished) {
        
        [self DisplayAlertView:NO backDropView:self->_reportCrashBackdropView alertViewNoButton:nil alertViewYesButton:nil];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self->_reportCrashAlertViewNotesTextView resignFirstResponder];
            
        });
        
    }];
    
}

#pragma mark - NSNotification Methods

-(void)NSNotification_Tasks_DisplayAddTaskTutorialView:(NSNotification *)notification {
    
    [self DisplayAddTaskTutorialView];
    
}

#pragma mark

-(void)NSNotification_Tasks_MultiAddTask:(NSNotification *)notification {
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    NSDictionary *userInfo = notification.userInfo;
   
    NSMutableDictionary *allSetDataDict = userInfo[@"allSetDataDict"] ? [userInfo[@"allSetDataDict"] mutableCopy] : [NSMutableDictionary dictionary];
    
    for (NSString *itemUniqueID in [allSetDataDict allKeys]) {
        
        NSMutableDictionary *setDataDict = [allSetDataDict[itemUniqueID] mutableCopy];
      
        if ([self->itemDict[@"ItemUniqueID"] containsObject:setDataDict[@"ItemUniqueID"]] == NO) {
           
            for (NSString *key in [setDataDict allKeys]) {
                
                NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
                id object = setDataDict[key] ? setDataDict[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                [arr addObject:object];
                [self->itemDict setObject:arr forKey:key];
                
            }
            
        }
        
    }
    
    
    
    NSMutableDictionary *setTaskListData_NewTaskListDict = userInfo[@"setTaskListData_NewTaskListDict"] ? [userInfo[@"setTaskListData_NewTaskListDict"] mutableCopy] : [NSMutableDictionary dictionary];
    
    NSMutableDictionary *updateTaskListData_OldTaskListDict = userInfo[@"updateTaskListData_OldTaskListDict"] ? [userInfo[@"updateTaskListData_OldTaskListDict"] mutableCopy] : [NSMutableDictionary dictionary];
    
    [[[GeneralObject alloc] init] CallNSNotificationMethods:@"MultiAddOrEditTaskList" userInfo:@{@"setTaskListData_NewTaskListDict" : setTaskListData_NewTaskListDict} locations:@[@"Tasks", @"Calendar"]];
    
    [[[GeneralObject alloc] init] CallNSNotificationMethods:@"MultiAddTaskToTaskList" userInfo:@{@"updateTaskListData_OldTaskListDict" : updateTaskListData_OldTaskListDict} locations:@[@"Tasks", @"Calendar"]];
    
    
    
    NSLog(@"SaveQueriedDataToUserDefaults _MultiAddTask");
    [self SaveQueriedDataToUserDefaults:YES];

    [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
      
    }];
    
}

-(void)NSNotification_Tasks_AddTask:(NSNotification *)notification {
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    NSDictionary *userInfo = notification.userInfo;
    
    if ([self->itemDict[@"ItemUniqueID"] containsObject:userInfo[@"ItemUniqueID"]] == NO) {
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
            id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [arr addObject:object];
            [self->itemDict setObject:arr forKey:key];
            
        }
        
    }
    NSLog(@"SaveQueriedDataToUserDefaults _AddTask");
    [self SaveQueriedDataToUserDefaults:YES];
    
    [self General_GenerateItemsToDisplayForSpecificItem:userInfo completionHandler:^(BOOL finished) {
        
    }];
    
}

-(void)NSNotification_Tasks_EditTask:(NSNotification *)notification {
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    NSMutableDictionary *userInfo = [notification.userInfo mutableCopy];
    
    if ([self->itemDict[@"ItemUniqueID"] containsObject:userInfo[@"ItemUniqueID"]]) {
        
        NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:userInfo[@"ItemUniqueID"]];
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
            id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            if (arr.count  > indexOfObject) { [arr replaceObjectAtIndex:indexOfObject withObject:object]; }
            [self->itemDict setObject:arr forKey:key];
            
        }
        
    }
    NSLog(@"SaveQueriedDataToUserDefaults _EditTask");
    [self SaveQueriedDataToUserDefaults:YES];
    
    [self General_GenerateItemsToDisplayForSpecificItem:userInfo completionHandler:^(BOOL finished) {
        
    }];
    
}

-(void)NSNotification_Tasks_DeleteTask:(NSNotification *)notification {
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    NSDictionary *userInfo = notification.userInfo;
    
    if ([self->itemDict[@"ItemUniqueID"] containsObject:userInfo[@"ItemUniqueID"]]) {
        
        NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:userInfo[@"ItemUniqueID"]];
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
            if (arr.count  > indexOfObject) { [arr removeObjectAtIndex:indexOfObject]; }
            [self->itemDict setObject:arr forKey:key];
            
        }
        
    }
    NSLog(@"SaveQueriedDataToUserDefaults _DeleteTask");
    [self SaveQueriedDataToUserDefaults:YES];
    
    [self General_GenerateItemsToDisplayForSpecificItem:userInfo completionHandler:^(BOOL finished) {
        
    }];
    
}

#pragma mark

-(void)NSNotification_Tasks_MultiAddTaskToTaskList:(NSNotification *)notification {
    
    NSMutableDictionary *userInfo = [notification.userInfo mutableCopy];
    
    NSMutableDictionary *updateTaskListData_OldTaskListDict = userInfo[@"updateTaskListData_OldTaskListDict"] ? userInfo[@"updateTaskListData_OldTaskListDict"] : [NSMutableDictionary dictionary];
    
   
    
    for (NSString *taskListID in updateTaskListData_OldTaskListDict[@"TaskListID"]) {
        
        NSUInteger index = [updateTaskListData_OldTaskListDict[@"TaskListID"] indexOfObject:taskListID];
       
        NSMutableDictionary *setDataDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:updateTaskListData_OldTaskListDict keyArray:[updateTaskListData_OldTaskListDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        
       
        
        NSString *taskListName = setDataDict[@"TaskListName"] ? setDataDict[@"TaskListName"] : @"No List";
        
        BOOL TaskListSeleted = [taskListName isEqualToString:@"No List"] == NO;
        
        if (TaskListSeleted == YES) {
            
            
            
            NSString *taskListID = setDataDict[@"TaskListID"];
            NSMutableDictionary *taskListItems = setDataDict[@"TaskListItems"];
            
            NSUInteger index = [self->taskListDict[@"TaskListID"] containsObject:taskListID] ? [self->taskListDict[@"TaskListID"] indexOfObject:taskListID] : 1000;
            
            if (index != 1000) {
                
                NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
                NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];

                [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
                [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
                self->taskListDict = [taskListDictCopy mutableCopy];
                
            }
            
        }
        
    }

}

-(void)NSNotification_Tasks_AddTaskToTaskList:(NSNotification *)notification {
    
    NSMutableDictionary *userInfo = [notification.userInfo mutableCopy];
    
    NSString *taskListID = userInfo[@"TaskListID"];
    NSString *itemUniqueID = userInfo[@"ItemUniqueID"];
    
    NSUInteger index = [self->taskListDict[@"TaskListID"] containsObject:taskListID] ? [self->taskListDict[@"TaskListID"] indexOfObject:taskListID] : 1000;
    
    if (index != 1000) {
        
        NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
        NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];
        NSMutableDictionary *taskListItems = [taskListItemsArray[index] mutableCopy];
        
        if ([[taskListItems allKeys] containsObject:itemUniqueID] == NO) {
            [taskListItems setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
        }
        
        [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
        [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
        self->taskListDict = [taskListDictCopy mutableCopy];
        
    }
    
    
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    //    if ([self->itemDict[@"ItemUniqueID"] containsObject:itemUniqueID]) {
    //
    //        NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
    //        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:[self->itemDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
    //
    //        [self General_GenerateItemsToDisplayForSpecificItem:singleObjectItemDict completionHandler:^(BOOL finished) {
    //
    //        }];
    //
    //    } else {
    
    [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
        
    }];
    
    //    }
    
}

-(void)NSNotification_Tasks_RemoveTaskFromTaskList:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *taskListID = userInfo[@"TaskListID"];
    NSString *itemUniqueID = userInfo[@"ItemUniqueID"];
    
    
    NSUInteger index = [self->taskListDict[@"TaskListID"] containsObject:taskListID] ? [self->taskListDict[@"TaskListID"] indexOfObject:taskListID] : 1000;
    
    if (index != 1000) {
        
        NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
        NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];
        NSMutableDictionary *taskListItems = [taskListItemsArray[index] mutableCopy];
        
        if ([[taskListItems allKeys] containsObject:itemUniqueID] == YES) {
            [taskListItems removeObjectForKey:itemUniqueID];
        }
        
        [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
        [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
        self->taskListDict = [taskListDictCopy mutableCopy];
        
    }
    
    
    
    [self General_GenerateItemsToDisplay:^(BOOL finished) {
        
    }];
    
}

-(void)NSNotification_Tasks_RemoveTaskFromAllTaskLists:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *itemUniqueID = userInfo[@"ItemUniqueID"];
    
    
    for (NSString *taskListID in taskListDict[@"TaskListID"]) {
        
        NSUInteger index = [taskListDict[@"TaskListID"] indexOfObject:taskListID];
        
        NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
        NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];
        NSMutableDictionary *taskListItems = [taskListItemsArray[index] mutableCopy];
        
        if ([[taskListItems allKeys] containsObject:itemUniqueID] == YES) {
            [taskListItems removeObjectForKey:itemUniqueID];
        }
        
        [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
        [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
        self->taskListDict = [taskListDictCopy mutableCopy];
        
    }
    
    
    
    [self General_GenerateItemsToDisplay:^(BOOL finished) {
        
    }];
    
}

-(void)NSNotification_Tasks_MoveTaskToDifferentTaskList:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *oldTaskListID = userInfo[@"OldTaskListID"];
    NSString *newTaskListID = userInfo[@"NewTaskListID"];
    NSString *itemUniqueID = userInfo[@"ItemUniqueID"];
    
    
    
    NSUInteger index = [self->taskListDict[@"TaskListID"] containsObject:oldTaskListID] ? [self->taskListDict[@"TaskListID"] indexOfObject:oldTaskListID] : 1000;
    
    if (index != 1000) {
        
        NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
        NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];
        NSMutableDictionary *taskListItems = [taskListItemsArray[index] mutableCopy];
        
        if ([[taskListItems allKeys] containsObject:itemUniqueID] == YES) {
            [taskListItems removeObjectForKey:itemUniqueID];
        }
        
        [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
        [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
        self->taskListDict = [taskListDictCopy mutableCopy];
        
    }
    
    
    
    index = [self->taskListDict[@"TaskListID"] containsObject:newTaskListID] ? [self->taskListDict[@"TaskListID"] indexOfObject:newTaskListID] : 1000;
    
    if (index != 1000) {
        
        NSMutableDictionary *taskListDictCopy = [self->taskListDict mutableCopy];
        NSMutableArray *taskListItemsArray = [taskListDictCopy[@"TaskListItems"] mutableCopy];
        NSMutableDictionary *taskListItems = [taskListItemsArray[index] mutableCopy];
        
        if ([[taskListItems allKeys] containsObject:itemUniqueID] == NO) {
            [taskListItems setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
        }
        
        [taskListItemsArray replaceObjectAtIndex:index withObject:taskListItems];
        [taskListDictCopy setObject:taskListItemsArray forKey:@"TaskListItems"];
        self->taskListDict = [taskListDictCopy mutableCopy];
        
    }
    
    
    
    [self General_GenerateItemsToDisplay:^(BOOL finished) {
        
    }];
    
}

#pragma mark

-(void)NSNotification_Tasks_ReloadView:(NSNotification *)notification {
    
    if (EverythingIsThere == YES) {
        
        [[FIRCrashlytics crashlytics] logWithFormat:@"GetDataGetItemsInSpecificHome DateAppOpenned:%@ CurrentTime:%@ Processing(0.3)", [[NSUserDefaults standardUserDefaults] objectForKey:@"DateAppOpenned"], [NSString stringWithFormat:@"%@", [NSDate date]]];
        
        [self viewDidLoad];
        [self viewDidAppear:self];
        [self.customTableView reloadData];
   
    }
    
}

-(void)NSNotification_Tasks_ReloadPage:(NSNotification *)notification {
    
    [self RefreshPageAction:self];
    
}

#pragma mark

-(void)NSNotification_Tasks_AddHomeMember:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSDictionary *dict = [notification.userInfo mutableCopy];
        
        self->homeMembersArray = dict[@"HomeMembersArray"] ? dict[@"HomeMembersArray"] : [NSMutableArray array];
        self->homeMembersDict = dict[@"HomeMembersDict"] ? dict[@"HomeMembersDict"] : [NSMutableDictionary dictionary];
        self->homeKeysDict = dict[@"HomeKeysDict"] ? dict[@"HomeKeysDict"] : [NSMutableDictionary dictionary];
        self->homeKeysArray = dict[@"HomeKeysArray"] ? dict[@"HomeKeysArray"] : [NSMutableArray array];
        self->homeMembersUnclaimedDict = dict[@"HomeMembersUnclaimedDict"] ? dict[@"HomeMembersUnclaimedDict"] : [NSMutableDictionary dictionary];
        self->notificationSettingsDict = dict[@"NotificationSettingsDict"] ? dict[@"NotificationSettingsDict"] : [NSMutableDictionary dictionary];
        
        [[[GeneralObject alloc] init] CheckPremiumSubscriptionStatus:self->homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeMembersDict) {
            
        }];
        
        NSString *newUserID = dict[@"NewUserID"] ? dict[@"NewUserID"] : @"";
        
        if ([newUserID length] > 0) {
            
            NSDictionary *dataDict = [NSDictionary dictionary];
            
            dataDict = [[[GeneralObject alloc] init] GenerateDefaultCalendarSettingsDict];
            
            if ([[self->calendarSettingsDict allKeys] containsObject:newUserID] == NO) {
                [self->calendarSettingsDict setObject:dataDict forKey:newUserID];
            }
            
            dataDict = [[[GeneralObject alloc] init] GenerateDefaultNotificationSettingsDict:newUserID addMorningOverView:YES addEveningOverView:NO];
            
            if ([[self->notificationSettingsDict allKeys] containsObject:newUserID] == NO) {
                [self->notificationSettingsDict setObject:dataDict forKey:newUserID];
            }
            
        }
        
        [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersArray forKey:@"HomeMembersArray"];
        [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersUnclaimedDict forKey:@"HomeMembersUnclaimedDict"];
        [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersDict forKey:@"HomeMembersDict"];
        [[NSUserDefaults standardUserDefaults] setObject:self->homeKeysDict forKey:@"HomeKeysDict"];
        [[NSUserDefaults standardUserDefaults] setObject:self->homeKeysArray forKey:@"HomeKeysArray"];
        [[NSUserDefaults standardUserDefaults] setObject:self->notificationSettingsDict forKey:@"NotificationSettingsDict"];
        
       
        
        if ([newUserID length] > 0) {
            
            self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
            self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
            
            NSMutableDictionary *pastDueDictToUse = self->dataDisplayDict[@"Past Due"] ? [self->dataDisplayDict[@"Past Due"] mutableCopy] : [NSMutableDictionary dictionary];
            NSMutableArray *pastDueDictToUseItemUniqueIDArray = pastDueDictToUse[@"ItemUniqueID"] ? pastDueDictToUse[@"ItemUniqueID"] : [NSMutableArray array];
            
            NSString *viewingItemUniqueID = dict[@"ViewingItemUniqueID"] ? dict[@"ViewingItemUniqueID"] : @"";
            
            for (NSString *itemUniqueID in self->itemDict[@"ItemUniqueID"]) {
                
                NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
                NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:self->keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
                
                NSMutableArray *itemAssignedTo = singleObjectItemDict[@"ItemAssignedTo"] ? [singleObjectItemDict[@"ItemAssignedTo"] mutableCopy] : [NSMutableArray array];
                NSString *itemAssignedToNewHomeMembers = singleObjectItemDict[@"ItemAssignedToNewHomeMembers"] ? singleObjectItemDict[@"ItemAssignedToNewHomeMembers"] : @"";
              
                if ([itemAssignedToNewHomeMembers isEqualToString:@"Yes"] && [itemAssignedTo containsObject:newUserID] == NO && [pastDueDictToUseItemUniqueIDArray containsObject:itemUniqueID] == NO && [viewingItemUniqueID isEqualToString:itemUniqueID] == NO) {
                   
                    [itemAssignedTo addObject:newUserID];
                    
                    NSMutableDictionary *itemDictCopy = [self->itemDict mutableCopy];
                    NSMutableArray *itemAssignedToArray = itemDictCopy[@"ItemAssignedTo"] ? [itemDictCopy[@"ItemAssignedTo"] mutableCopy] : [NSMutableArray array];
                    if ([itemAssignedToArray count] > index) { [itemAssignedToArray replaceObjectAtIndex:index withObject:itemAssignedTo]; }
                    [itemDictCopy setObject:itemAssignedToArray forKey:@"ItemAssignedTo"];
                    self->itemDict = [itemDictCopy mutableCopy];
                    
                }
                
            }
      
        }
        
        
        
        [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self.customTableView reloadData];
                
            });
            
        }];
        
    });
    
}

-(void)NSNotification_Tasks_UpdateHomeMembersDict:(NSNotification *)notification {
    
    NSDictionary *dict = [notification.userInfo mutableCopy];
    
    homeMembersDict = [dict[@"HomeMembersDict"] mutableCopy];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self.customTableView reloadData];
        
    });
    
}

-(void)NSNotification_Tasks_UnusedInvitations:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateKeyArrayManually:NO Expense:NO List:NO Home:YES];
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataSpecificHomeData:homeID keyArray:keyArray completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeToJoinDict, NSMutableArray * _Nonnull queriedHomeMemberArray, NSString * _Nonnull queriedHomeID) {
            
            self->homeMembersUnclaimedDict = returningHomeToJoinDict[@"HomeMembersUnclaimed"] ? [returningHomeToJoinDict[@"HomeMembersUnclaimed"] mutableCopy] : [NSMutableDictionary dictionary];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                int totalKeysNotUsed = 0;
                
                totalKeysNotUsed = (int)[[self->homeMembersUnclaimedDict allKeys] count];
                
                [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d", totalKeysNotUsed] forKey:@"InvitiationViewCount"];
                
                [self SetUpInvitationView];
                [self UpdateSideBarRedCircleViews];
                
            });
            
        }];
        
    });
    
}

-(void)NSNotification_Tasks_UnreadNotifications:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
        [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataUnreadNotificationsCountNotCreatedBySpecificUser:homeID userID:userID completionHandler:^(BOOL finished, NSString * _Nonnull unreadNotificationCount) {
            
            self->unreadNotificationsCount = unreadNotificationCount;
            
            [[NSUserDefaults standardUserDefaults] setObject:self->unreadNotificationsCount forKey:@"NotificationViewCount"];
            
            [self SetUpUnreadActivityView];
            [self UpdateSideBarRedCircleViews];
            
        }];
        
    });
    
}

-(void)NSNotification_Tasks_UnreadHomeActivity:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
        [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
        
        [[[GetDataObject alloc] init] GetDataUnreadHomeActivity:homeID userID:userID completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningActivityDict) {
            
            self->unreadActivityDict = [returningActivityDict mutableCopy];
            
            [[NSUserDefaults standardUserDefaults] setObject:[self->unreadActivityDict mutableCopy] forKey:@"UnreadActivityDict"];
            [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%lu", [(NSArray *)self->unreadActivityDict[@"ActivityID"] count]] forKey:@"UnreadActivityCount"];
            
            [self SetUpUnreadActivityView];
            [self UpdateSideBarRedCircleViews];
            
        }];
        
    });
    
}

#pragma mark

-(void)NSNotification_Tasks_MultiAddOrEditTaskList:(NSNotification *)notification {
    
    NSMutableDictionary *userInfo = [notification.userInfo mutableCopy];
    
    NSMutableDictionary *setTaskListData_NewTaskListDict = userInfo[@"setTaskListData_NewTaskListDict"] ? userInfo[@"setTaskListData_NewTaskListDict"] : [NSMutableDictionary dictionary];
    
   
    
    for (NSString *taskListID in setTaskListData_NewTaskListDict[@"TaskListID"]) {
      
        NSUInteger index = [setTaskListData_NewTaskListDict[@"TaskListID"] indexOfObject:taskListID];
       
        NSMutableDictionary *setDataDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:setTaskListData_NewTaskListDict keyArray:[setTaskListData_NewTaskListDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        
        
        
        NSString *taskListName = setDataDict[@"TaskListName"] ? setDataDict[@"TaskListName"] : @"No List";
        
        BOOL TaskListSeleted = [taskListName isEqualToString:@"No List"] == NO;
       
        if (TaskListSeleted == YES) {
           
            NSString *taskListID = setDataDict[@"TaskListID"] ? setDataDict[@"TaskListID"] : @"";
            NSString *oldTaskListName = @"";
            
            BOOL Editing = self->taskListDict[@"TaskListID"] ? [self->taskListDict[@"TaskListID"] containsObject:taskListID] : NO;
            
         
            
            for (NSString *key in [setDataDict allKeys]) {
                
                NSMutableArray *arr = self->taskListDict[key] ? [self->taskListDict[key] mutableCopy] : [NSMutableArray array];
                
                if (Editing) {
                    
                    NSUInteger index = [self->taskListDict[@"TaskListID"] indexOfObject:taskListID];
                    if ([key isEqualToString:@"TaskListName"]) {
                        oldTaskListName = [(NSArray *)self->taskListDict[key] count] > index ? self->taskListDict[key][index] : @"";
                    }
                    id object = setDataDict[key] ? setDataDict[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                    if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:object]; }
                    
                } else {
                    
                    id object = setDataDict[key] ? setDataDict[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                    [arr addObject:object];
               
                }
                
                [self->taskListDict setObject:arr forKey:key];
                
            }
           
            if (Editing) {
                
                [self QueryInitialData_FirstQuery_GetTaskLists_ReplaceTaskListSideBar:taskListID taskListName:taskListName oldTaskListName:oldTaskListName];
                
            } else {
                
                [self QueryInitialData_FirstQuery_GetTaskLists_AddTaskListSideBar:self->taskListDict];
                
            }
            
        }
        
    }

}

-(void)NSNotification_Tasks_AddOrEditTaskList:(NSNotification *)notification {
    
    NSMutableDictionary *userInfo = [notification.userInfo mutableCopy];
    
    NSString *selectListInTasksViewController = @"No";
    
    if (userInfo[@"SelectListInTasksViewController"]) {
        selectListInTasksViewController = [userInfo[@"SelectListInTasksViewController"] mutableCopy];
        [userInfo removeObjectForKey:@"SelectListInTasksViewController"];
    }
   
    NSString *taskListID = userInfo[@"TaskListID"] ? userInfo[@"TaskListID"] : @"";
    NSString *taskListName = userInfo[@"TaskListName"] ? userInfo[@"TaskListName"] : @"No List";
    NSString *oldTaskListName = @"";
    
    BOOL Editing = self->taskListDict[@"TaskListID"] ? [self->taskListDict[@"TaskListID"] containsObject:taskListID] : NO;
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->taskListDict[key] ? [self->taskListDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->taskListDict[@"TaskListID"] indexOfObject:taskListID];
            if ([key isEqualToString:@"TaskListName"]) {
                oldTaskListName = [(NSArray *)self->taskListDict[key] count] > index ? self->taskListDict[key][index] : @"";
            }
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:userInfo[key]]; }
            
        } else {
            
            id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [arr addObject:object];
            
        }
        
        [self->taskListDict setObject:arr forKey:key];
        
    }
    
    if (Editing) {
        
        [self QueryInitialData_FirstQuery_GetTaskLists_ReplaceTaskListSideBar:taskListID taskListName:taskListName oldTaskListName:oldTaskListName];
        
    } else {
        
        [self QueryInitialData_FirstQuery_GetTaskLists_AddTaskListSideBar:self->taskListDict];
        
    }
    
    if ([selectListInTasksViewController isEqualToString:@"Yes"]) {
        
        [self MoveToTaskList_UpdateTaskInTaskList:taskListName completionHandler:^(BOOL finished) {
            
        }];
        
    } else {
       
        [self SaveQueriedDataToUserDefaults:NO];
        
        [self GenerateSideBarCategoryArray:self->sideBarCategorySectionArrayOriginal itemDict:self->itemDict homeMembersDict:self->homeMembersDict completionHandler:^(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered) {
            
            self->sideBarSectionsArray = [returningSideBarSectionsArray mutableCopy];
            self->sideBarCategorySectionArrayAltered = [returningSideBarCategorySectionArrayAltered mutableCopy];
          
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self.sideBarTableView reloadData];
                [self SetUpBottomFolderContextMenu];
                
            });
            
        }];
        
    }
    
}

-(void)NSNotification_Tasks_AddOrEditTaskListInFolder:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSDictionary *userInfo = notification.userInfo;
        NSMutableDictionary *folderChosenDict = userInfo ? [userInfo mutableCopy] : [NSMutableDictionary dictionary];
        NSString *newFolderID = folderChosenDict[@"FolderID"] ? folderChosenDict[@"FolderID"] : @"";
        NSMutableDictionary *newFolderTaskList = folderChosenDict[@"FolderTaskLists"] ? [folderChosenDict[@"FolderTaskLists"] mutableCopy] : [NSMutableDictionary dictionary];
        
        NSString *oldFolderID = @"";
        
        for (NSString *folderID in self->folderDict[@"FolderID"]) {
            
            NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
            NSMutableDictionary *folderTaskLists = self->folderDict[@"FolderTaskLists"][index];
            
            for (NSString *taskListID in [folderTaskLists allKeys]) {
                
                if ([taskListID isEqualToString:folderChosenDict[@"TaskListID"]] && [folderID isEqualToString:newFolderID] == NO) {
                    
                    oldFolderID = folderID;
                    break;
                    
                }
                
            }
            
        }
        
        if (oldFolderID.length > 0) {
            
            if ([self->folderDict[@"FolderID"] containsObject:oldFolderID]) {
                
                NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:oldFolderID];
                NSMutableArray *folderTaskListArray = [self->folderDict[@"FolderTaskLists"] mutableCopy];
                NSMutableDictionary *folderTaskList = folderTaskListArray[index] ? [folderTaskListArray[index] mutableCopy] : [NSMutableDictionary dictionary];
                
                if ([[folderTaskList allKeys] containsObject:folderChosenDict[@"TaskListID"]]) {
                    [folderTaskList removeObjectForKey:folderChosenDict[@"TaskListID"]];
                }
                
                if ([folderTaskListArray count] > index) { [folderTaskListArray replaceObjectAtIndex:index withObject:folderTaskList]; }
                [self->folderDict setObject:folderTaskListArray forKey:@"FolderTaskLists"];
                
            }
            
        }
        
        if ([self->folderDict[@"FolderID"] containsObject:newFolderID]) {
            
            NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:newFolderID];
            NSMutableArray *folderTaskListArray = [self->folderDict[@"FolderTaskLists"] mutableCopy];
            if ([folderTaskListArray count] > index) { [folderTaskListArray replaceObjectAtIndex:index withObject:newFolderTaskList]; }
            [self->folderDict setObject:folderTaskListArray forKey:@"FolderTaskLists"];
            
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self.sideBarTableView reloadData];
            [self SetUpBottomFolderContextMenu];
            
        });
        
    });
    
}

-(void)NSNotification_Tasks_AddOrEditFolder:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSDictionary *userInfo = notification.userInfo;
        
        NSString *folderID = userInfo[@"FolderID"] ? userInfo[@"FolderID"] : @"";
        NSString *folderName = userInfo[@"FolderName"] ? userInfo[@"FolderName"] : @"No Folder";
        
        BOOL Editing = [self->folderDict[@"FolderID"] containsObject:folderID];
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->folderDict[key] ? [self->folderDict[key] mutableCopy] : [NSMutableArray array];
            
            if (Editing) {
                
                NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
                if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:userInfo[key]]; }
                
            } else {
                
                id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                [arr addObject:object];
                
            }
            
            [self->folderDict setObject:arr forKey:key];
            
        }
        
        if (Editing) {
            
            [self QueryInitialData_FirstQuery_GetFolders_ReplaceFolderSideBar:folderID folderName:folderName];
            
        } else {
            
            [self QueryInitialData_FirstQuery_GetFolders_AddFolderSideBar];
            
        }
        
        [self SaveQueriedDataToUserDefaults:NO];
        
        [self GenerateSideBarCategoryArray:self->sideBarCategorySectionArrayOriginal itemDict:self->itemDict homeMembersDict:self->homeMembersDict completionHandler:^(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered) {
            
            self->sideBarSectionsArray = [returningSideBarSectionsArray mutableCopy];
            self->sideBarCategorySectionArrayAltered = [returningSideBarCategorySectionArrayAltered mutableCopy];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self.sideBarTableView reloadData];
                [self SetUpBottomFolderContextMenu];
                
            });
            
        }];
        
    });
    
}

-(void)NSNotification_Tasks_DeleteFolder:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *folderID = userInfo[@"FolderID"] ? userInfo[@"FolderID"] : @"";
    NSString *folderName = userInfo[@"FolderName"] ? userInfo[@"FolderName"] : @"";
    
    BOOL Editing = [self->folderDict[@"FolderID"] containsObject:folderID];
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->folderDict[key] ? [self->folderDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
            if (arr.count > index) { [arr removeObjectAtIndex:index]; }
            
        }
        
        [self->folderDict setObject:arr forKey:key];
        
    }
    
    [self QueryInitialData_FirstQuery_GetFolders_RemoveFolderSideBar:folderID folderName:folderName];
    
    [self SaveQueriedDataToUserDefaults:NO];
    
    [self GenerateSideBarCategoryArray:self->sideBarCategorySectionArrayOriginal itemDict:self->itemDict homeMembersDict:self->homeMembersDict completionHandler:^(BOOL finished, NSMutableArray *returningSideBarSectionsArray, NSMutableArray *returningSideBarCategorySectionArrayAltered) {
        
        self->sideBarSectionsArray = [returningSideBarSectionsArray mutableCopy];
        self->sideBarCategorySectionArrayAltered = [returningSideBarCategorySectionArrayAltered mutableCopy];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self.sideBarTableView reloadData];
            [self SetUpBottomFolderContextMenu];
            
        });
        
    }];
    
}

-(void)NSNotification_Tasks_AddOrEditSection:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSDictionary *userInfo = notification.userInfo;
        
        NSString *sectionID = userInfo[@"SectionID"] ? userInfo[@"SectionID"] : @"";
        
        BOOL Editing = [self->sectionDict[@"SectionID"] containsObject:sectionID];
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->sectionDict[key] ? [self->sectionDict[key] mutableCopy] : [NSMutableArray array];
            
            if (Editing) {
                
                NSUInteger index = [self->sectionDict[@"SectionID"] indexOfObject:sectionID];
                if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:userInfo[key]]; }
                
            } else {
                
                id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
                [arr addObject:object];
                
            }
            
            [self->sectionDict setObject:arr forKey:key];
            
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self.customTableView reloadData];
            
        });
        
    });
    
}

#pragma mark

-(void)NSNotification_Tasks_AddOrEditItemTemplate:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *templateID = userInfo[@"TemplateID"] ? userInfo[@"TemplateID"] : @"";
    
    BOOL Editing = [self->templateDict[@"TemplateID"] containsObject:templateID];
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->templateDict[key] ? [self->templateDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->templateDict[@"TemplateID"] indexOfObject:templateID];
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:userInfo[key]]; }
            
        } else {
            
            id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [arr addObject:object];
            
        }
        
        [self->templateDict setObject:arr forKey:key];
        
    }
    
    [self SaveQueriedDataToUserDefaults:NO];
    
}

-(void)NSNotification_Tasks_DeleteItemTemplate:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *templateID = userInfo[@"TemplateID"] ? userInfo[@"TemplateID"] : @"";
    
    BOOL Editing = [self->templateDict[@"TemplateID"] containsObject:templateID];
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->templateDict[key] ? [self->templateDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->templateDict[@"TemplateID"] indexOfObject:templateID];
            if (arr.count > index) { [arr removeObjectAtIndex:index]; }
            
        }
        
        [self->templateDict setObject:arr forKey:key];
        
    }
    
}

-(void)NSNotification_Tasks_AddOrEditItemDraft:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *draftID = userInfo[@"DraftID"] ? userInfo[@"DraftID"] : @"";
    
    BOOL Editing = [self->draftDict[@"TemplateID"] containsObject:draftID];
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->draftDict[key] ? [self->draftDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->draftDict[@"TemplateID"] indexOfObject:draftID];
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:userInfo[key]]; }
            
        } else {
            
            id object = userInfo[key] ? userInfo[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [arr addObject:object];
            
        }
        
        [self->draftDict setObject:arr forKey:key];
        
    }
    
    [self SaveQueriedDataToUserDefaults:NO];
    
}

-(void)NSNotification_Tasks_DeleteItemDraft:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *draftID = userInfo[@"DraftID"] ? userInfo[@"DraftID"] : @"";
    
    BOOL Editing = [self->draftDict[@"TemplateID"] containsObject:draftID];
    
    for (NSString *key in [userInfo allKeys]) {
        
        NSMutableArray *arr = self->draftDict[key] ? [self->draftDict[key] mutableCopy] : [NSMutableArray array];
        
        if (Editing) {
            
            NSUInteger index = [self->draftDict[@"TemplateID"] indexOfObject:draftID];
            if (arr.count > index) { [arr removeObjectAtIndex:index]; }
            
        }
        
        [self->draftDict setObject:arr forKey:key];
        
    }
    
    [self SaveQueriedDataToUserDefaults:NO];
    
}

#pragma mark

-(void)NSNotification_Tasks_ItemTags:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSMutableArray *itemTags = userInfo[@"Tags"] ? userInfo[@"Tags"] : [NSMutableArray array];
    
    if (selectedItemsDict.count > 0) {
        
        [self SelectOption_UpdateItemData:[@{@"ItemTags" : itemTags} mutableCopy]];
        
    } else {
        
        [self SelectDoneButtonAction:self];
        
    }
    
}

-(void)NSNotification_Tasks_SelectTag:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *itemTag = userInfo[@"ItemTag"];
    NSString *buttonTitle = itemTag;
    buttonTitle = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:buttonTitle arrayOfSymbols:@[@"#"]];
    
    NSString *categoryName = buttonTitle;
    [[NSUserDefaults standardUserDefaults] setObject:categoryName forKey:@"CategorySelected"];
    
    self->_middleLabel.text = categoryName;
    
    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    if ([collapseSectionsArray containsObject:@"Tags"] == NO) { [collapseSectionsArray addObject:@"Tags"]; }
    [[NSUserDefaults standardUserDefaults] setObject:collapseSectionsArray forKey:@"SideBarCollapseSectionsArray"];
    
    [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
        
    }];
    
}

-(void)NSNotification_Tasks_NotificationSettings:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSMutableDictionary *notificationSettingsDictLocal = [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationSettingsDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationSettingsDict"] mutableCopy] : [NSMutableDictionary dictionary];
    
    NSMutableDictionary *notificationSettingsLocal = userInfo[@"NotificationSettings"] ? userInfo[@"NotificationSettings"] : [NSMutableDictionary dictionary];
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    [notificationSettingsDictLocal setObject:notificationSettingsLocal forKey:userID];
    
    notificationSettingsDict = [notificationSettingsDictLocal mutableCopy];
    
    [[NSUserDefaults standardUserDefaults] setObject:notificationSettingsDictLocal forKey:@"NotificationSettingsDict"];
    
}

-(void)NSNotification_Tasks_ItemWeDivvyPremiumAccounts:(NSNotification *)notification {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        NSDictionary *userInfo = notification.userInfo;
        
        NSDictionary *userDict = userInfo[@"UserDict"] ? userInfo[@"UserDict"] : @{};
        NSMutableArray *weDivvyPremiumArray = userDict[@"WeDivvyPremium"] ? userDict[@"WeDivvyPremium"] : @[];
        
        NSMutableDictionary *tempDict = self->homeMembersDict ? [self->homeMembersDict mutableCopy] : [NSMutableDictionary dictionary];
        NSMutableArray *tempArr = tempDict[@"WeDivvyPremium"] ? [tempDict[@"WeDivvyPremium"] mutableCopy] : [NSMutableArray array];
        tempArr = [weDivvyPremiumArray mutableCopy];
        [tempDict setObject:tempArr forKey:@"WeDivvyPremium"];
        self->homeMembersDict = [tempDict mutableCopy];
        
        [[NSUserDefaults standardUserDefaults] setObject:self->homeMembersDict forKey:@"HomeMembersDict"];
        
    });
    
}

-(void)NSNotification_Tasks_SaveMyLocalNotifications:(NSNotification *)notification {
    
    [[[NotificationsObject alloc] init] SaveMyLocalNotifications:^(BOOL finished) {
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self.customTableView reloadData];
            
        });
        
    }];
    
}

-(void)NSNotification_Tasks_ItemShortcutItems:(NSNotification *)notification {
    
    NSMutableArray *arr = [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShortcutItems"] mutableCopy];
    
    if ([arr count] == 0) {
        
        arr = [@[@"🧹 Add Chore", @"📁 Today", @"📁 Next 7 Days", @"⚙️ Customize Shortcuts"] mutableCopy];
        [[NSUserDefaults standardUserDefaults] setObject:arr forKey:@"ShortcutItems"];
        
    }
    
    for (NSString *shortcutItem in arr) {
        
        if ([shortcutItem containsString:@"Search Tasks"]) {
            
            
            
            
            NSMutableArray *itemNamesAlreadyUsed  = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
            NSMutableArray *allItemAssignedToArrays = self->itemDict && self->homeMembersDict ? [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict] : [NSMutableArray array];
            NSMutableArray *allItemTagsArrays = self->itemDict ? [self GenerateAllItemTagsArrays:self->itemDict] : [NSMutableArray array];
            
            NSMutableArray *homeMembersArrayLocal = homeMembersArray ? homeMembersArray : [NSMutableArray array];
            NSMutableDictionary *homeMembersDictLocal = homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *notificationSettingsDictLocal = notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *folderDictLocal = folderDict ? folderDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *taskListDictLocal = taskListDict ? taskListDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *sectionDictLocal = sectionDict ? sectionDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *templateDictLocal = templateDict ? templateDict : [NSMutableDictionary dictionary];
            NSMutableDictionary *draftDictLocal = draftDict ? draftDict : [NSMutableDictionary dictionary];
            
            NSDictionary *dict = @{
                
                @"homeMembersArray" : homeMembersArrayLocal ? homeMembersArrayLocal : [NSMutableArray array],
                @"itemNamesAlreadyUsed" : itemNamesAlreadyUsed ? itemNamesAlreadyUsed : [NSMutableArray array],
                @"allItemAssignedToArrays" : allItemAssignedToArrays ? allItemAssignedToArrays : [NSMutableArray array],
                @"allItemTagsArrays" : allItemTagsArrays ? allItemTagsArrays : [NSMutableArray array],
                
                @"notificationSettingsDict" : notificationSettingsDictLocal ? notificationSettingsDictLocal : [NSMutableDictionary dictionary],
                @"topicDict" : topicDict ? topicDict : [NSMutableDictionary dictionary],
                @"homeMembersDict" : homeMembersDictLocal ? homeMembersDictLocal : [NSMutableDictionary dictionary],
                
                @"itemDict" : itemDict ? itemDict : [NSMutableDictionary dictionary],
                @"itemDictNo2" : itemDictNo2 ? itemDictNo2 : [NSMutableDictionary dictionary],
                @"itemDictNo3" : itemDictNo3 ? itemDictNo3 : [NSMutableDictionary dictionary],
                
                @"folderDict" : folderDictLocal ? folderDictLocal : [NSMutableDictionary dictionary],
                @"taskListDict" : taskListDictLocal ? taskListDictLocal : [NSMutableDictionary dictionary],
                @"sectionDict" : sectionDictLocal ? sectionDictLocal : [NSMutableDictionary dictionary],
                @"templateDict" : templateDictLocal ? templateDictLocal : [NSMutableDictionary dictionary],
                @"draftDict" : draftDictLocal ? draftDictLocal : [NSMutableDictionary dictionary],
                
            };
            
            [[[PushObject alloc] init] PushToSearchTasksViewController:notificationSettingsDictLocal topicDict:topicDict itemDict:itemDict itemDictNo2:itemDictNo2 itemDictNo3:itemDictNo3 homeMembersArray:homeMembersArrayLocal homeMembersDict:homeMembersDictLocal allItemTagsArrays:allItemTagsArrays currentViewController:self Superficial:YES];
            
            [[NSUserDefaults standardUserDefaults] setObject:dict forKey:@"ShortcutSearchTasks"];
            
            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
            
            
            
            
        } else if ([shortcutItem containsString:@"Multi-Add Chore"] ||
                   [shortcutItem containsString:@"Multi-Add Expense"] ||
                   [shortcutItem containsString:@"Multi-Add List"]) {
            
            
            
            
            NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
            NSMutableArray *allItemAssignedToArrays = self->itemDict && self->homeMembersDict ? [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict] : [NSMutableArray array];
            NSMutableArray *allItemTagsArrays = self->itemDict ? [self GenerateAllItemTagsArrays:self->itemDict] : [NSMutableArray array];
            
            NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
            BOOL ListSelected = taskListDict && taskListDict[@"TaskListName"] ? [taskListDict[@"TaskListName"] containsObject:sectionSelected] : NO;
            NSString *defaultTaskListName = ListSelected == YES ? sectionSelected : @"No List";
            
            //            [[[PushObject alloc] init] PushToMultiAddTasksViewController:NO itemDictFromPreviousPage:[NSMutableDictionary dictionary] itemDictKeysFromPreviousPage:[NSMutableDictionary dictionary] itemSelectedDict:[NSMutableDictionary dictionary] homeMembersDict:self->homeMembersDict ? self->homeMembersDict : [NSMutableDictionary dictionary] notificationSettingsDict:self->notificationSettingsDict ? self->notificationSettingsDict : [NSMutableDictionary dictionary] folderDict:folderDict ? folderDict : [NSMutableDictionary dictionary] taskListDict:taskListDict ? [taskListDict mutableCopy] : [NSMutableDictionary dictionary] sectionDict:sectionDict ? sectionDict : [NSMutableDictionary dictionary] templateDict:templateDict ? templateDict : [NSMutableDictionary dictionary] draftDict:draftDict ? draftDict : [NSMutableDictionary dictionary] homeMembersArray:self->homeMembersArray ? self->homeMembersArray : [NSMutableArray array] itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays defaultTaskListName:defaultTaskListName currentViewController:self Superficial:YES];
            
            NSDictionary *dict = @{
                
                @"defaultTaskListName" : defaultTaskListName ? defaultTaskListName : @"",
                
                @"homeMembersArray" : homeMembersArray ? homeMembersArray : [NSMutableArray array],
                @"itemNamesAlreadyUsed" : itemNamesAlreadyUsed ? itemNamesAlreadyUsed : [NSMutableArray array],
                @"allItemAssignedToArrays" : allItemAssignedToArrays ? allItemAssignedToArrays : [NSMutableArray array],
                @"allItemTagsArrays" : allItemTagsArrays ? allItemTagsArrays : [NSMutableArray array],
                
                @"notificationSettingsDict" : notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary],
                @"homeMembersDict" : homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary],
                @"folderDict" : folderDict ? folderDict : [NSMutableDictionary dictionary],
                @"taskListDict" : taskListDict ? taskListDict : [NSMutableDictionary dictionary],
                @"sectionDict" : sectionDict ? sectionDict : [NSMutableDictionary dictionary],
                @"templateDict" : templateDict ? templateDict : [NSMutableDictionary dictionary],
                
            };
            
            NSString *key = @"";
            
            if ([shortcutItem containsString:@"Multi-Add Chore"]) {
                key = @"ShortcutMultiAddChore";
            } else if ([shortcutItem containsString:@"Multi-Add Expense"]) {
                key = @"ShortcutMultiAddExpense";
            } else if ([shortcutItem containsString:@"Multi-Add List"]) {
                key = @"ShortcutMultiAddList";
            }
            
            [[NSUserDefaults standardUserDefaults] setObject:dict forKey:key];
            
            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
            
            
            
            
        } else if ([shortcutItem containsString:@"Add Chore"] ||
                   [shortcutItem containsString:@"Add Expense"] ||
                   [shortcutItem containsString:@"Add List"]) {
            
            
            
            
            NSMutableArray *itemNamesAlreadyUsed = self->itemDict &&  self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
            NSMutableArray *allItemAssignedToArrays = self->itemDict && self->homeMembersDict ? [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict] : [NSMutableArray array];
            NSMutableArray *allItemTagsArrays = self->itemDict ? [self GenerateAllItemTagsArrays:self->itemDict] : [NSMutableArray array];
            NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
           
            NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
            BOOL ListSelected = taskListDict && taskListDict[@"TaskListName"] ? [taskListDict[@"TaskListName"] containsObject:sectionSelected] : NO;
            NSString *defaultTaskListName = ListSelected == YES ? sectionSelected : @"No List";
            
            NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
            
            [[[PushObject alloc] init] PushToAddTaskViewController:nil partiallyAddedDict:nil suggestedItemToAddDict:nil templateToEditDict:nil draftToEditDict:nil moreOptionsDict:nil multiAddDict:nil notificationSettingsDict:notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary] topicDict:topicDict homeID:homeID homeMembersArray:homeMembersArray ? homeMembersArray : [NSMutableArray array] homeMembersDict:homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary] itemOccurrencesDict:[NSMutableDictionary dictionary] folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays defaultTaskListName:defaultTaskListName partiallyAddedTask:NO addingTask:YES addingMultipleTasks:NO addingSuggestedTask:NO editingTask:NO viewingTask:NO viewingMoreOptions:NO duplicatingTask:NO editingTemplate:NO viewingTemplate:NO editingDraft:NO viewingDraft:NO currentViewController:self Superficial:YES];
            
            NSDictionary *dict = @{
                
                @"homeID" : [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx",
                @"defaultTaskListName" : defaultTaskListName ? defaultTaskListName : @"",
                
                @"homeMembersArray" : homeMembersArray ? homeMembersArray : [NSMutableArray array],
                @"itemNamesAlreadyUsed" : itemNamesAlreadyUsed ? itemNamesAlreadyUsed : [NSMutableArray array],
                @"allItemAssignedToArrays" : allItemAssignedToArrays ? allItemAssignedToArrays : [NSMutableArray array],
                @"allItemTagsArrays" : allItemTagsArrays ? allItemTagsArrays : [NSMutableArray array],
                
                @"notificationSettingsDict" : notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary],
                @"homeMembersDict" : homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary],
                @"itemOccurrencesDict" : [NSMutableDictionary dictionary],
                @"folderDict" : folderDict ? folderDict : [NSMutableDictionary dictionary],
                @"taskListDict" : taskListDict ? taskListDict : [NSMutableDictionary dictionary],
                @"sectionDict" : sectionDict ? sectionDict : [NSMutableDictionary dictionary],
                @"templateDict" : templateDict ? templateDict : [NSMutableDictionary dictionary],
                
                @"addingTask" : @"Yes",
                @"addingMultipleTasks" : @"No",
                @"editingTask" : @"No",
                @"viewingTask" : @"No",
                @"viewingMoreOptions" : @"No",
                @"duplicatingTask" : @"No",
                @"editingTemplate" : @"No",
                @"viewingTemplate" : @"No",
                
            };
            
            NSString *key = @"";
            
            if ([shortcutItem containsString:@"Add Chore"]) {
                key = @"ShortcutAddChore";
            } else if ([shortcutItem containsString:@"Add Expense"]) {
                key = @"ShortcutAddExpense";
            } else if ([shortcutItem containsString:@"Add List"]) {
                key = @"ShortcutAddList";
            }
            
            [[NSUserDefaults standardUserDefaults] setObject:dict forKey:key];
            
            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
            
            
            
            
        } else if ([shortcutItem containsString:@"View Chore:"] ||
                   [shortcutItem containsString:@"View Expense:"] ||
                   [shortcutItem containsString:@"View List:"]) {
            
            
            
            
            NSMutableArray *itemNamesAlreadyUsed = self->itemDict &&  self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
            NSMutableArray *allItemAssignedToArrays = self->itemDict && self->homeMembersDict ? [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict] : [NSMutableArray array];
            NSMutableArray *allItemTagsArrays = self->itemDict ? [self GenerateAllItemTagsArrays:self->itemDict] : [NSMutableArray array];
            NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
            
            NSDictionary *dictToUse = [NSDictionary dictionary];
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
            
            NSString *itemID = dictToUse[@"ItemID"] && [(NSArray *)dictToUse[@"ItemID"] count] > indexPath.row ? dictToUse[@"ItemID"][indexPath.row] : nil;
            NSString *itemOccurrenceID = dictToUse[@"ItemOccurrenceID"] && [(NSArray *)dictToUse[@"ItemOccurrenceID"] count] > indexPath.row ? dictToUse[@"ItemOccurrenceID"][indexPath.row] : nil;
            
            NSDictionary *dict = @{
                
                @"itemID" : itemID ? itemID : @"",
                @"itemOccurrenceID" : itemOccurrenceID ? itemOccurrenceID : @"",
                
                @"homeMembersArray" : homeMembersArray ? homeMembersArray : [NSMutableArray array],
                @"itemNamesAlreadyUsed" : itemNamesAlreadyUsed ? itemNamesAlreadyUsed : [NSMutableArray array],
                @"allItemAssignedToArrays" : allItemAssignedToArrays ? allItemAssignedToArrays : [NSMutableArray array],
                @"allItemTagsArrays" : allItemTagsArrays ? allItemTagsArrays : [NSMutableArray array],
                
                @"notificationSettingsDict" : notificationSettingsDict ? notificationSettingsDict : [NSMutableDictionary dictionary],
                @"topicDict" : topicDict ? topicDict : [NSMutableDictionary dictionary],
                @"homeMembersDict" : homeMembersDict ? homeMembersDict : [NSMutableDictionary dictionary],
                @"folderDict" : folderDict ? folderDict : [NSMutableDictionary dictionary],
                @"taskListDict" : taskListDict ? taskListDict : [NSMutableDictionary dictionary],
                @"sectionDict" : sectionDict ? sectionDict : [NSMutableDictionary dictionary],
                @"templateDict" : templateDict ? templateDict : [NSMutableDictionary dictionary],
                
            };
            
            [[[PushObject alloc] init] PushToViewTaskViewController:itemID itemOccurrenceID:itemOccurrenceID itemDictFromPreviousPage:[NSMutableDictionary dictionary] homeMembersArray:homeMembersArray homeMembersDict:homeMembersDict itemOccurrencesDict:itemOccurrencesDict folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays currentViewController:self Superficial:YES];
    
            NSString *key = @"";
            
            if ([shortcutItem containsString:@"View Chore:"]) {
                key = @"ShortcutViewChore:";
            } else if ([shortcutItem containsString:@"View Expense:"]) {
                key = @"ShortcutViewExpense:";
            } else if ([shortcutItem containsString:@"View List:"]) {
                key = @"ShortcutViewList:";
            }
            
            [[NSUserDefaults standardUserDefaults] setObject:dict forKey:key];
            
            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
            
            
            
            
        }
        
    }
    
}

-(void)NSNotification_Tasks_ItemTabBar:(NSNotification *)notification {
    
    NSDictionary *userInfo = notification.userInfo;
    NSMutableArray *tabBarArray = [userInfo[@"TabBar"] mutableCopy];
    
    [[NSUserDefaults standardUserDefaults] setObject:tabBarArray forKey:@"VisibleTabBarOptions"];
    
    [self AdjustTabBarFrame];
    
}

-(void)NSNotification_Tasks_ItemPastDue:(NSNotification *)notification {
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    
    
    NSDictionary *userInfo = notification.userInfo;
    
    NSString *pastDueString = userInfo[@"PastDue"] && [userInfo[@"PastDue"] length] > 0 ? userInfo[@"PastDue"] : @"";
    
    if ([pastDueString length] > 0) {
        
        [self StartProgressView];
        
        NSMutableDictionary *dictToUse = self->dataDisplayDict[@"Past Due"] ? [self->dataDisplayDict[@"Past Due"] mutableCopy] : [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in dictToUse[@"ItemUniqueID"]) {
            
            if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                
                [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                
            }
            
        }
        
        
        NSString *collection = [NSString stringWithFormat:@"%@s", self->itemType];
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        NSMutableArray *objectArr = [NSMutableArray array];
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSString *itemID = self->itemDict[@"ItemID"] && [(NSArray *)self->itemDict[@"ItemID"] count] > index ? self->itemDict[@"ItemID"][index] : @"xxx";
            NSString *itemOccurrenceID = self->itemDict[@"ItemOccurrenceID"] && [(NSArray *)self->itemDict[@"ItemOccurrenceID"] count] > index ? self->itemDict[@"ItemOccurrenceID"][index] : @"xxx";
            
            NSMutableDictionary *itemOccurrencePastDue = [self GenerateUpdatedItemOccurrencePastDueDict:pastDueString index:index];
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemOccurrencePastDue" : itemOccurrencePastDue} itemID:itemID itemOccurrenceID:itemOccurrenceID collection:collection homeID:homeID completionHandler:^(BOOL finished) {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[@{@"ItemUniqueID" : itemUniqueID, @"ItemOccurrencePastDue" : itemOccurrencePastDue} mutableCopy] returningOccurrencesDictToUse:self->itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }];
                
            });
            
        }
        
    }
    
}

#pragma mark - Table View Methods

- (nonnull UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {
    
    if (tableView == _customTableView) {
        
        MainCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MainCell"];
        
        NSMutableDictionary *dictToUse = [self GenerateSpecificIndexPathSectionDataDict:indexPath];
        
        BOOL DictIsValid = dictToUse[@"ItemID"] && [(NSArray *)dictToUse[@"ItemID"] count] > indexPath.row;
        
        if (DictIsValid == YES) {
            
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
            
            BOOL TaskIsTakingTurns = [[[BoolDataObject alloc] init] TaskIsTakingTurns:singleObjectItemDict itemType:itemType];
            
            
            
            cell.titleLabel.text = dictToUse[@"ItemName"] && [(NSArray *)dictToUse[@"ItemName"] count] > indexPath.row ? dictToUse[@"ItemName"][indexPath.row] : @"";
            
            cell.subLabel.text = [self GenerateCompletedLabel:dictToUse indexPath:indexPath];
            
            
            
            if (TaskIsTakingTurns == YES) {
                
                NSString *itemTurnUserID = [[[GeneralObject alloc] init] GenerateCurrentUserTurnFromDict:singleObjectItemDict homeMembersDict:homeMembersDict itemType:itemType];
                
                [self GenerateitemAssignedToImageSpecificUser:cell.assignedImage1 index:0 dictToUse:dictToUse indexPath:indexPath specificUserID:itemTurnUserID];
                
                cell.assignedImage2.hidden = YES;
                cell.assignedImage3.hidden = YES;
                cell.assignedImage4.hidden = YES;
                cell.assignedImage5.hidden = YES;
                
            } else {
                
                [self GenerateitemAssignedToImage:cell.assignedImage1 index:0 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateitemAssignedToImage:cell.assignedImage2 index:1 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateitemAssignedToImage:cell.assignedImage3 index:2 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateitemAssignedToImage:cell.assignedImage4 index:3 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateitemAssignedToImage:cell.assignedImage5 index:4 dictToUse:dictToUse indexPath:indexPath];
                
            }
            
            
            
            cell.itemPriorityImage.image = [self GenerateitemPriorityImage:dictToUse indexPath:indexPath];
            
            
            
        }
        
        return cell;
        
    } else if (tableView == _sideBarTableView) {
        
        SideBarCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SideBarCell"];
        
        NSString *sideBarName = [self GenerateSpecificSideBarDict:indexPath][@"Name"];
        NSString *sideBarImage = [self GenerateSpecificSideBarDict:indexPath][@"Image"];
        
        cell.sideBarImage.image = [sideBarImage length] > 0 ? [UIImage imageNamed:sideBarImage] : nil;
        
        cell.sideBarLabel.text = sideBarName;
        
        cell.sideBarAmountLabel.text =
        self->dataDisplayAmountDict[sideBarName] && [[NSString stringWithFormat:@"%@", self->dataDisplayAmountDict[sideBarName]] intValue] > 0 ?
        [NSString stringWithFormat:@"%d", [[NSString stringWithFormat:@"%@", self->dataDisplayAmountDict[sideBarName]] intValue]] : @"";
        
        return cell;
        
    }
    
    MainCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MainCell"];
    
    return cell;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    
    if (tableView == _customTableView) {
        
        
        
        
        NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
        
        keyArray = [[[GeneralObject alloc] init] GenerateKeyArray];
        
        
        
        
        BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
        
        BOOL SectionIsValid =
        ObjectIsKindOfClass == YES &&
        [dataDisplaySectionsArray count] > section &&
        [collapseSectionsArray containsObject:dataDisplaySectionsArray[section]] == NO;
        
        int lowestArrayCount =
        SectionIsValid == YES ?
        [self GenerateLowestArrayCountFromMainSectionsArray:dataDisplayDict sectionsArray:dataDisplaySectionsArray section:section keyArray:keyArray] :
        0;
        
        return lowestArrayCount;
        
        
        
        
    } else if (tableView == _sideBarTableView) {
        
        
        
        
        NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
        
        NSString *currentSection = [sideBarSectionsArray count] > section ? sideBarSectionsArray[section] : @"";
        NSMutableArray *folderNameArray = folderDict[@"FolderName"] ? [folderDict[@"FolderName"] mutableCopy] : [NSMutableArray array];
        
        
        
        
        BOOL SectionIsNotValid =
        [sideBarSectionsArray count] > section &&
        [collapseSectionsArray containsObject:currentSection] == NO;
        
        int lowestArrayCount =
        SectionIsNotValid == YES ? 0 :
        [self GenerateLowestArrayCountFromSideBarSectionsArray:sideBarCategorySectionArrayAltered sectionsArray:[sideBarSectionsArray mutableCopy] section:section];
        
        
        
        
        BOOL SectionIsValidAndSectionIsGroup =
        sideBarSectionsArray.count > section &&
        ([currentSection isEqualToString:@"Users"] ||
         [currentSection isEqualToString:@"Tags"] ||
         [currentSection isEqualToString:@"Colors"] ||
         [folderNameArray containsObject:currentSection]);
        
        if (SectionIsValidAndSectionIsGroup == YES) {
            return lowestArrayCount;
        }
        
        
        
        
        BOOL SectionIsValid =
        sideBarCategorySectionArrayAltered.count > section &&
        sideBarCategorySectionArrayAltered[section][@"Names"];
        
        if (SectionIsValid == YES) {
            return [(NSArray *)sideBarCategorySectionArrayAltered[section][@"Names"] count];
        }
        
        
        
        
    }
    
    return 0;
}

- (void)tableView:(UITableView *)tableView
  willDisplayCell:(MainCell *)cell
forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (tableView == _customTableView) {
        
        NSMutableDictionary *dictToUse = [self GenerateSpecificIndexPathSectionDataDict:indexPath];
        
        
        
        
        
        NSDictionary *colorDict = [self GenerateCheckmarkColor:dictToUse indexPath:indexPath];
        
        
        UIColor *selectedColor = colorDict[@"SelectedColor"];
        UIColor *unselectedColor = colorDict[@"UnselectedColor"];
        
        
        
        
        
        
        if (dictToUse[@"ItemID"] && [(NSArray *)dictToUse[@"ItemID"] count] > indexPath.row) {
            
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
            
            BOOL TaskWasCompletedByMe = [[[BoolDataObject alloc] init] TaskCompletedBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            BOOL TaskIsFullyCompleted = [[[BoolDataObject alloc] init] TaskIsFullyCompleted:singleObjectItemDict itemType:itemType homeMembersDict:homeMembersDict];
            BOOL TaskIsCompleteAsNeeded = [[[BoolDataObject alloc] init] TaskIsCompleteAsNeeded:singleObjectItemDict itemType:itemType];
            BOOL TaskWontDoBySpecificUser = [[[BoolDataObject alloc] init] TaskWontDoBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            
            BOOL TaskIsRepeating = [[[BoolDataObject alloc] init] TaskIsRepeating:singleObjectItemDict itemType:itemType];
            
            BOOL DisplayCompletedUI = ((TaskWasCompletedByMe == YES && TaskIsCompleteAsNeeded == NO) || TaskIsFullyCompleted == YES);
            BOOL TaskHasColor = [[[BoolDataObject alloc] init] TaskHasColor:singleObjectItemDict itemType:itemType];
            
            
            
            
            cell.contentView.backgroundColor = self.view.backgroundColor;
            
            
            
            
            cell.checkmarkView.backgroundColor = DisplayCompletedUI == YES ? selectedColor : unselectedColor;
            if (TaskWontDoBySpecificUser == YES && TaskIsFullyCompleted == NO) { cell.checkmarkView.backgroundColor = DisplayCompletedUI == YES ? [UIColor colorWithRed:186.0f/255.0f green:188.0f/255.0f blue:190.0f/255.0f alpha:1.0f] : unselectedColor; }
            
            if (TaskHasColor == NO) { cell.checkmarkView.alpha = 1.0f;  } else {  cell.checkmarkView.alpha = DisplayCompletedUI == YES ? 0.85f : 0.25f; }
            
            
            
            
            
            
            
            
            BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
            
            NSString *mainTableViewSectionName = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > indexPath.section ? [dataDisplaySectionsArray objectAtIndex:indexPath.section] : @"";
            
            
            
            
            
            
            
            
            
            CGFloat height = mainTableViewCellHeight;//CGRectGetHeight(cell.contentView.bounds);
            CGFloat width = CGRectGetWidth(cell.contentView.bounds);
            CGFloat Imageheight = 94;
            
            
            
            
            cell.mainView.frame = CGRectMake(width*0.5 - ((width*0.90338164)*0.5), height*0.5 - ((height*0.7037037)*0.5), width*0.90338164, height*0.7037037);
            cell.leftSlideCoverView.backgroundColor = self.view.backgroundColor;
            cell.rightSlideCoverView.backgroundColor = self.view.backgroundColor;
            //374, 31
            
            
            
            
            height = CGRectGetHeight(cell.mainView.bounds);
            width = CGRectGetWidth(cell.mainView.bounds);
            
            
            
            
            
            cell.checkmarkView.frame = CGRectMake(width*0.04278075, height*0.5 - ((height*0.43859)*0.5), height*0.43859, height*0.43859);
            cell.checkmarkViewCover.frame = CGRectMake(0, 0, cell.checkmarkView.frame.origin.x + cell.checkmarkView.frame.size.width + width*0.04278075, height);
            
            
            
            
            
            cell.titleLabel.frame = CGRectMake(cell.checkmarkView.frame.origin.x + cell.checkmarkView.frame.size.width + width*0.04278075, height*0.14035, width*0.75, height*0.350878);
            cell.titleLabel.adjustsFontSizeToFitWidth = NO;
            cell.titleLabel.textColor = DisplayCompletedUI == YES ? [UIColor colorWithRed:167.0f/255.0f green:176.0f/255.0f blue:185.0f/255.0f alpha:1.0] : [UIColor blackColor];
            cell.titleLabel.alpha = DisplayCompletedUI == YES ? 0.75 : 1;
            cell.titleLabel.font = [UIFont systemFontOfSize:cell.titleLabel.frame.size.height*0.75 weight:UIFontWeightSemibold];
            
            
            
            
            
            cell.itemPastDueImage.frame = CGRectMake(cell.titleLabel.frame.origin.x, height - cell.titleLabel.frame.size.height - height*0.14035, (Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447), cell.titleLabel.frame.size.height);
            cell.itemPastDueImage.hidden = [mainTableViewSectionName isEqualToString:@"Past Due"] ? NO : YES;
            
            
            
            
            
            CGFloat itemRepeatsImageXPos =
            cell.itemPastDueImage.hidden == NO ?
            cell.itemPastDueImage.frame.origin.x + cell.itemPastDueImage.frame.size.width + ((width*0.04278075)*0.25) :
            cell.titleLabel.frame.origin.x;
            
            cell.itemRepeatsImage.frame = CGRectMake(itemRepeatsImageXPos, height - cell.titleLabel.frame.size.height - height*0.14035, (Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447), cell.titleLabel.frame.size.height);
            cell.itemRepeatsImage.hidden = TaskIsRepeating == YES ? NO : YES;
            
            
            
            
            
            CGFloat subLabelXPos = 0;
            
            if (cell.itemRepeatsImage.hidden == NO) {
                
                subLabelXPos = cell.itemRepeatsImage.frame.origin.x + cell.itemRepeatsImage.frame.size.width + ((width*0.04278075)*0.25);
                
            } else if (cell.itemPastDueImage.hidden == NO) {
                
                subLabelXPos = cell.itemPastDueImage.frame.origin.x + cell.itemPastDueImage.frame.size.width + ((width*0.04278075)*0.25);
                
            } else {
                
                subLabelXPos = cell.titleLabel.frame.origin.x;
                
            }
            
            cell.subLabel.frame = CGRectMake(subLabelXPos, height - cell.titleLabel.frame.size.height - height*0.14035, cell.titleLabel.frame.size.width, cell.titleLabel.frame.size.height);
            cell.subLabel.font = [UIFont systemFontOfSize:cell.subLabel.frame.size.height*0.65 weight:UIFontWeightSemibold];
            
            
            
            
            
            cell.itemPriorityImage.frame = CGRectMake(width - ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*0.9) - cell.checkmarkView.frame.origin.x,  cell.titleLabel.frame.origin.y, ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*0.9), ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*0.9));
            
            cell.mutedImage.frame = CGRectMake(width - ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0) - cell.checkmarkView.frame.origin.x,  cell.titleLabel.frame.origin.y, ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0), ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0));
            cell.reminderImage.frame = CGRectMake(width - ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0) - cell.checkmarkView.frame.origin.x,  cell.titleLabel.frame.origin.y, ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0), ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.0));
            cell.privateImage.frame = CGRectMake(width - ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.25) - cell.checkmarkView.frame.origin.x,  cell.mutedImage.frame.origin.y + cell.mutedImage.frame.size.height*0.5 - (((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.25))*0.5, ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.25), ((Imageheight*0.15957447 > 15?(15):Imageheight*0.15957447)*1.25));
            
            BOOL UserShouldReceiveNotificationsForTask = [[[BoolDataObject alloc] init] UserShouldReceiveNotificationsForTask:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] homeMembersDict:homeMembersDict];
            BOOL TaskHasBeenMuted = [[[BoolDataObject alloc] init] TaskHasBeenMuted:singleObjectItemDict];
            BOOL TaskHasReminderNotification = [[[BoolDataObject alloc] init] TaskHasReminderNotification:singleObjectItemDict];
            
            cell.mutedImage.hidden = TaskHasBeenMuted == NO || UserShouldReceiveNotificationsForTask == NO || [[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO ? YES : NO;
            cell.reminderImage.hidden = TaskHasReminderNotification == YES && TaskHasBeenMuted == NO ? NO : YES;
            cell.privateImage.hidden = [singleObjectItemDict[@"ItemPrivate"] isEqualToString:@"Yes"] ? NO : YES;
            
            if ([singleObjectItemDict[@"ItemPriority"] isEqualToString:@"No Priority"] == YES && (cell.mutedImage.hidden == NO || cell.reminderImage.hidden == NO) && cell.privateImage.hidden == NO) {
                
                UIImageView *viewToUse = cell.mutedImage.hidden == NO ? cell.mutedImage : cell.reminderImage;
                
                CGRect newRect = viewToUse.frame;
                newRect.origin.x = cell.privateImage.frame.origin.x - newRect.size.width - ((width*0.04278075)*0.25);
                viewToUse.frame = newRect;
                
            } else if ([singleObjectItemDict[@"ItemPriority"] isEqualToString:@"No Priority"] == NO && (cell.mutedImage.hidden == NO || cell.reminderImage.hidden == NO) && cell.privateImage.hidden == YES) {
                
                UIImageView *viewToUse = cell.mutedImage.hidden == NO ? cell.mutedImage : cell.reminderImage;
                
                CGRect newRect = viewToUse.frame;
                newRect.origin.x = cell.itemPriorityImage.frame.origin.x - newRect.size.width - ((width*0.04278075)*0.25);
                viewToUse.frame = newRect;
                
            } else if ([singleObjectItemDict[@"ItemPriority"] isEqualToString:@"No Priority"] == NO && (cell.mutedImage.hidden == YES && cell.reminderImage.hidden == YES) && cell.privateImage.hidden == NO) {
                
                CGRect newRect = cell.privateImage.frame;
                newRect.origin.x = cell.itemPriorityImage.frame.origin.x - newRect.size.width - ((width*0.04278075)*0.25);
                cell.privateImage.frame = newRect;
                
            } else if ([singleObjectItemDict[@"ItemPriority"] isEqualToString:@"No Priority"] == NO && (cell.mutedImage.hidden == NO || cell.reminderImage.hidden == NO) && cell.privateImage.hidden == NO) {
                
                UIImageView *viewToUse = cell.mutedImage.hidden == NO ? cell.mutedImage : cell.reminderImage;
                
                CGRect newRect = cell.privateImage.frame;
                newRect.origin.x = cell.itemPriorityImage.frame.origin.x - newRect.size.width - ((width*0.04278075)*0.25);
                cell.privateImage.frame = newRect;
                
                newRect = viewToUse.frame;
                newRect.origin.x = cell.privateImage.frame.origin.x - newRect.size.width - ((width*0.04278075)*0.25);
                viewToUse.frame = newRect;
                
            }
            
            
            
            
            
            CGFloat subLabelWidth = cell.mainView.frame.size.width - cell.subLabel.frame.origin.x;
            
            cell.assignedImage1.frame = CGRectMake(width - (cell.titleLabel.frame.size.height*1.25) - cell.mainView.frame.size.width*0.04278075, cell.subLabel.frame.origin.y + (((cell.subLabel.frame.size.height)*0.5) - ((cell.titleLabel.frame.size.height*1.25)*0.5)), cell.titleLabel.frame.size.height*1.25, cell.titleLabel.frame.size.height*1.25);
            
            
            
            CGFloat xPos = cell.assignedImage1.hidden == NO ? cell.assignedImage1.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8) : width - (cell.titleLabel.frame.size.height*1.25) - cell.mainView.frame.size.width*0.04278075;
            
            cell.assignedImage2.frame = CGRectMake(xPos, cell.assignedImage1.frame.origin.y, cell.assignedImage1.frame.size.width, cell.assignedImage1.frame.size.height);
            
            
            
            if (cell.assignedImage1.hidden == YES && cell.assignedImage2.hidden == YES) {
                xPos = width - (cell.titleLabel.frame.size.height*1.25) - cell.mainView.frame.size.width*0.04278075;
            } else if (cell.assignedImage1.hidden == NO && cell.assignedImage2.hidden == YES) {
                xPos = cell.assignedImage1.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage2.hidden == NO) {
                xPos = cell.assignedImage2.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            }
            
            cell.assignedImage3.frame = CGRectMake(xPos, cell.assignedImage1.frame.origin.y, cell.assignedImage1.frame.size.width, cell.assignedImage1.frame.size.height);
            
            
            
            if (cell.assignedImage1.hidden == YES && cell.assignedImage2.hidden == YES && cell.assignedImage3.hidden == YES) {
                xPos = width - (cell.titleLabel.frame.size.height*1.25) - cell.mainView.frame.size.width*0.04278075;
            } else if (cell.assignedImage2.hidden == NO && cell.assignedImage3.hidden == YES) {
                xPos = cell.assignedImage2.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage1.hidden == NO && cell.assignedImage2.hidden == YES && cell.assignedImage3.hidden == YES) {
                xPos = cell.assignedImage1.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage3.hidden == NO) {
                xPos = cell.assignedImage3.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            }
            
            cell.assignedImage4.frame = CGRectMake(xPos, cell.assignedImage1.frame.origin.y, cell.assignedImage1.frame.size.width, cell.assignedImage1.frame.size.height);
            
            
            
            if (cell.assignedImage1.hidden == YES && cell.assignedImage2.hidden == YES && cell.assignedImage3.hidden == YES && cell.assignedImage4.hidden == YES) {
                xPos = width - (cell.titleLabel.frame.size.height*1.25) - cell.mainView.frame.size.width*0.04278075;
            } else if (cell.assignedImage3.hidden == NO && cell.assignedImage4.hidden == YES) {
                xPos = cell.assignedImage3.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage2.hidden == NO && cell.assignedImage3.hidden == YES && cell.assignedImage4.hidden == YES) {
                xPos = cell.assignedImage2.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage1.hidden == NO && cell.assignedImage2.hidden == YES && cell.assignedImage3.hidden == YES && cell.assignedImage4.hidden == YES) {
                xPos = cell.assignedImage1.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            } else if (cell.assignedImage4.hidden == NO) {
                xPos = cell.assignedImage4.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8);
            }
            
            cell.assignedImage5.frame = CGRectMake(cell.assignedImage4.frame.origin.x - (cell.assignedImage1.frame.size.width*0.8), cell.assignedImage1.frame.origin.y, cell.assignedImage1.frame.size.width, cell.assignedImage1.frame.size.height);
            
            
            
            if (cell.assignedImage5.hidden == NO) {
                subLabelWidth = cell.assignedImage5.hidden == NO ? subLabelWidth - (cell.mainView.frame.size.width - (cell.assignedImage5.frame.origin.x)) : subLabelWidth;
            } else if (cell.assignedImage4.hidden == NO) {
                subLabelWidth = cell.assignedImage4.hidden == NO ? subLabelWidth - (cell.mainView.frame.size.width - (cell.assignedImage4.frame.origin.x)) : subLabelWidth;
            } else if (cell.assignedImage3.hidden == NO) {
                subLabelWidth = cell.assignedImage3.hidden == NO ? subLabelWidth - (cell.mainView.frame.size.width - (cell.assignedImage3.frame.origin.x)) : subLabelWidth;
            } else if (cell.assignedImage2.hidden == NO) {
                subLabelWidth = cell.assignedImage2.hidden == NO ? subLabelWidth - (cell.mainView.frame.size.width - (cell.assignedImage2.frame.origin.x)) : subLabelWidth;
            } else if (cell.assignedImage1.hidden == NO) {
                subLabelWidth = cell.assignedImage1.hidden == NO ? subLabelWidth - (cell.mainView.frame.size.width - (cell.assignedImage1.frame.origin.x)) : subLabelWidth;
            }
            
            CGRect newRect = cell.subLabel.frame;
            newRect.size.width = subLabelWidth;
            cell.subLabel.frame = newRect;
            
            
            
            cell.assignedImage1.layer.borderWidth = 2.0f;
            cell.assignedImage1.layer.borderColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTertiary].CGColor : [[[LightDarkModeObject alloc] init] LightModeSecondary].CGColor;
            cell.assignedImage1.layer.cornerRadius = cell.assignedImage1.frame.size.height/2;
            cell.assignedImage1.contentMode = UIViewContentModeScaleAspectFill;
            
            cell.assignedImage2.layer.borderWidth = cell.assignedImage1.layer.borderWidth;
            cell.assignedImage2.layer.borderColor = cell.assignedImage1.layer.borderColor;
            cell.assignedImage2.layer.cornerRadius = cell.assignedImage1.layer.cornerRadius;
            cell.assignedImage2.contentMode = cell.assignedImage1.contentMode;
            
            cell.assignedImage3.layer.borderWidth = cell.assignedImage1.layer.borderWidth;
            cell.assignedImage3.layer.borderColor = cell.assignedImage1.layer.borderColor;
            cell.assignedImage3.layer.cornerRadius = cell.assignedImage1.layer.cornerRadius;
            cell.assignedImage3.contentMode = cell.assignedImage1.contentMode;
            
            cell.assignedImage4.layer.borderWidth = cell.assignedImage1.layer.borderWidth;
            cell.assignedImage4.layer.borderColor = cell.assignedImage1.layer.borderColor;
            cell.assignedImage4.layer.cornerRadius = cell.assignedImage1.layer.cornerRadius;
            cell.assignedImage4.contentMode = cell.assignedImage1.contentMode;
            
            cell.assignedImage5.layer.borderWidth = cell.assignedImage1.layer.borderWidth;
            cell.assignedImage5.layer.borderColor = cell.assignedImage1.layer.borderColor;
            cell.assignedImage5.layer.cornerRadius = cell.assignedImage1.layer.cornerRadius;
            cell.assignedImage5.contentMode = cell.assignedImage1.contentMode;
            
            if (TaskIsFullyCompleted == NO) {
                
                [self GenerateItemAssignedToImageBorderColor:cell.assignedImage1 index:0 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateItemAssignedToImageBorderColor:cell.assignedImage2 index:1 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateItemAssignedToImageBorderColor:cell.assignedImage3 index:2 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateItemAssignedToImageBorderColor:cell.assignedImage4 index:3 dictToUse:dictToUse indexPath:indexPath];
                [self GenerateItemAssignedToImageBorderColor:cell.assignedImage5 index:4 dictToUse:dictToUse indexPath:indexPath];
                
            }
            
            
            
            
            
            for (UIButton *subView in cell.mainView.subviews) {
                
                if (subView.tag == 100) {
                    
                    [subView removeFromSuperview];
                    
                }
                
            }
            
            NSArray *itemTags = dictToUse[@"ItemTags"] && [(NSArray *)dictToUse[@"ItemTags"] count] > indexPath.row ? dictToUse[@"ItemTags"][indexPath.row] : [NSMutableArray array];
            
            NSMutableArray *tagSubViews = [NSMutableArray array];
            CGFloat tabSubViewHeight = (height*0.21052632 > 12?(12):height*0.21052632);
            
            int cellHeight = mainTableViewCellHeight;
            
            int totalLines = 1;
            
            for (int i=0; i<itemTags.count; i++) {
                
                NSString *tagText = [NSString stringWithFormat:@"#%@", itemTags[i]];
                
                BOOL changeYPos = false;
                
                BOOL TagAlreadyAdded = NO;
                
                for (UIButton *subView in cell.mainView.subviews) {
                    
                    if (subView.tag == 100) {
                        
                        [tagSubViews addObject:subView];
                        
                        if ([subView.titleLabel.text isEqualToString:tagText]) {
                            TagAlreadyAdded = YES;
                        }
                        
                    }
                    
                }
                
                if (TagAlreadyAdded == NO) {
                    
                    NSString *tagText = [NSString stringWithFormat:@"#%@", itemTags[i]];
                    CGFloat gapBetweenStartAndEndHorizontalTags = cell.checkmarkView.frame.origin.x;
                    CGFloat gapBetweenTagsToUse = (width*0.01604278 > 6?(6):width*0.01604278);
                    CGFloat yGapToUse = (height*0.10526316 > 6?(6):height*0.10526316);
                    UIButton *lastHorizontalSubView = [(UIButton *)[tagSubViews lastObject] tag] == 100 ? [tagSubViews lastObject] : nil;
                    CGFloat xPos = lastHorizontalSubView != nil ? lastHorizontalSubView.frame.origin.x + lastHorizontalSubView.frame.size.width + gapBetweenTagsToUse : gapBetweenStartAndEndHorizontalTags;
                    
                    CGFloat tagWidth = [[[GeneralObject alloc] init] WidthOfString:tagText withFont:[UIFont systemFontOfSize:tabSubViewHeight*1.083333 weight:UIFontWeightSemibold]];
                    
                    if (xPos + tagWidth > (cell.mainView.frame.size.width-(gapBetweenStartAndEndHorizontalTags*2))) {
                        
                        xPos = gapBetweenStartAndEndHorizontalTags;
                        changeYPos = true;
                        totalLines += 1;
                        
                    }
                    
                    yGapToUse = totalLines == 1 ? (height*0.10526316 > 6?(6):height*0.10526316) : (height*0.14035088 > 8?(8):height*0.14035088);
                    
                    CGFloat yPos = changeYPos == true ?
                    lastHorizontalSubView.frame.origin.y + lastHorizontalSubView.frame.size.height + yGapToUse :
                    lastHorizontalSubView.frame.origin.y != 0 ?
                    lastHorizontalSubView.frame.origin.y : cell.subLabel.frame.origin.y + cell.subLabel.frame.size.height + yGapToUse;
                    
                    UIButton *tagLabelSubview = [[UIButton alloc] initWithFrame:CGRectMake(xPos, yPos, tagWidth, tabSubViewHeight)];
                    [tagLabelSubview.titleLabel setFont:[UIFont systemFontOfSize:tabSubViewHeight*1.083333 weight:UIFontWeightSemibold]];
                    [tagLabelSubview setTitleColor:[UIColor colorWithRed:90.0f/255.0f green:123.0f/255.0f blue:165.0f/255.0f alpha:1.0f] forState:UIControlStateNormal];
                    tagLabelSubview.tag = 100;
                    [tagLabelSubview setTitle:tagText forState:UIControlStateNormal];
                    [tagLabelSubview addTarget:self action:@selector(TapGestureSelectTag:) forControlEvents:UIControlEventTouchUpInside];
                    [cell.mainView addSubview:tagLabelSubview];
                    
                }
                
            }
            
            if (itemTags.count > 0) {
                
                CGRect rect = cell.mainView.frame;
                rect.size.height = cell.subLabel.frame.origin.y + cell.subLabel.frame.size.height + (((height*0.14035088 > 8?(8):height*0.14035088))*(totalLines+1)) + tabSubViewHeight*totalLines;
                cell.mainView.frame = rect;
                
                cellHeight += ((((height*0.14035088 > 8?(8):height*0.14035088))*(totalLines)) + tabSubViewHeight*totalLines);
                
            }
            
            
            
            
            NSMutableArray *arr = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > indexPath.section && cellHeightsDicts[dataDisplaySectionsArray[indexPath.section]] ? [cellHeightsDicts[dataDisplaySectionsArray[indexPath.section]] mutableCopy] : [NSMutableArray array];
            
            BOOL AddThisTask = YES;
            
            for (NSDictionary *dict in arr) {
                
                if ([[dict allKeys] containsObject:singleObjectItemDict[@"ItemUniqueID"]]) {
                    
                    AddThisTask = NO;
                    break;
                    
                }
                
            }
            
            if (AddThisTask == YES) { [arr addObject:@{singleObjectItemDict[@"ItemUniqueID"] : [NSString stringWithFormat:@"%d", cellHeight]}]; }
            
            if (ObjectIsKindOfClass == YES) {
                
                [cellHeightsDicts setObject:arr forKey:[dataDisplaySectionsArray count] > indexPath.section ? dataDisplaySectionsArray[indexPath.section] : @""];
                
            }
            
            
            
            
            
            [self AdjustTableViewHeight];
            
            
            
            
            
            
            if (SelectClicked == YES) {
                
                cell.checkmarkView.layer.cornerRadius = cell.checkmarkView.frame.size.height/2;
                cell.checkmarkView.backgroundColor = [UIColor clearColor];
                cell.checkmarkView.layer.borderWidth = 2.0f;
                
                cell.checkmarkViewCover.hidden = YES;
                
                NSString *itemUniqueID = dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > indexPath.row ? dictToUse[@"ItemUniqueID"][indexPath.row] : @"";
                
                cell.checkmarkView.alpha = 1.0f;
                
                cell.checkmarkView.layer.borderColor = [UIColor colorWithRed:208.0f/255.0f green:208.0f/255.0f blue:208.0f/255.0f alpha:1.0f].CGColor;
                
                if (selectedItemsDict[itemUniqueID]) {
                    cell.checkmarkView.layer.borderColor = [UIColor colorWithRed:0.0f/255.0f green:126.0f/255.0f blue:197.0f/255.0f alpha:1.0f].CGColor;
                }
                
                if (selectedItemsDict[itemUniqueID]) {
                    cell.selectedCellView.hidden = NO;
                } else {
                    cell.selectedCellView.hidden = YES;
                }
                
                cell.selectedCellView.frame = CGRectMake(cell.checkmarkView.frame.origin.x + cell.checkmarkView.frame.size.width*0.5 - ((cell.checkmarkView.frame.size.width*0.5)*0.5), cell.checkmarkView.frame.origin.y + cell.checkmarkView.frame.size.height*0.5 - ((cell.checkmarkView.frame.size.height*0.5)*0.5), cell.checkmarkView.frame.size.width*0.5, cell.checkmarkView.frame.size.height*0.5);
                cell.selectedCellViewCover.frame = cell.checkmarkViewCover.frame;
                cell.selectedCellView.layer.cornerRadius = cell.selectedCellView.frame.size.height/2;
                
                cell.selectedCellViewCover.hidden = NO;
                
            } else {
                
                cell.checkmarkView.layer.borderColor = [UIColor clearColor].CGColor;
                cell.checkmarkView.layer.cornerRadius = cell.checkmarkView.frame.size.width/3;
                
                cell.selectedCellView.hidden = YES;
                cell.selectedCellViewCover.hidden = YES;
                
            }
            
            [self AdjustSlideView:cell.mainView cell:cell];
            
            
            
            
            
            BOOL TaskCanBeCompletedInTaskBySpecificUser = [[[BoolDataObject alloc] init] TaskCanBeCompletedInTaskBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
                                                           [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx" homeMembersDict:homeMembersDict];
            BOOL TaskWasCreatedBySpecificUser = [[[BoolDataObject alloc] init] TaskWasCreatedBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ?
                                                 [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx"];
            
            /*if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES && */ if (SelectClicked == NO && (TaskCanBeCompletedInTaskBySpecificUser || TaskWasCreatedBySpecificUser)) {
                
                UIPanGestureRecognizer *panRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(SwipeTableViewCell:)];
                panRecognizer.delegate = self;
                [cell.mainView addGestureRecognizer:panRecognizer];
                
            } else {
                
                cell.leftSlideCoverView.hidden = YES;
                cell.rightSlideCoverView.hidden = YES;
                cell.leftSlideViewImage.hidden = YES;
                cell.rightSlideViewImage.hidden = YES;
                cell.slideView.hidden = YES;
                
            }
            
        }
        
        
        
        
        
    } else if (tableView == _sideBarTableView) {
        
        
        
        
        
        SideBarCell *sideBarCell = (SideBarCell *)cell;
        
        sideBarCell.contentView.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeSecondary] : [[[LightDarkModeObject alloc] init] LightModePrimary];
        
        CGFloat width = CGRectGetWidth(sideBarCell.contentView.bounds);
        CGFloat height = (self.view.frame.size.height*0.05978261 > 44?(44):self.view.frame.size.height*0.05978261);
        //277, 44
        
        sideBarCell.sideBarMainView.frame = CGRectMake(width*0.5 - ((width*0.9)*0.5), height*0.5 - ((height)*0.5), width*0.9, (self.view.frame.size.height*0.05978261 > 44?(44):self.view.frame.size.height*0.05978261));
        sideBarCell.sideBarMainView.layer.cornerRadius = 12;
        
        
        
        
        height = (self.view.frame.size.height*0.19565217 > 144?(144):self.view.frame.size.height*0.19565217);
        
        sideBarCell.upgradePremiumReminderView.frame = CGRectMake(width*0.5 - sideBarCell.sideBarMainView.frame.size.width*0.5, sideBarCell.sideBarMainView.frame.origin.y + sideBarCell.sideBarMainView.frame.size.height, sideBarCell.sideBarMainView.frame.size.width, 90);
        sideBarCell.upgradePremiumReminderView.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModePrimary] : [UIColor colorWithRed:221.0f/255.0f green:224.0f/255.0f blue:229.0f/255.0f alpha:1.0f];
        sideBarCell.upgradePremiumReminderView.layer.cornerRadius = 12;
        
        sideBarCell.upgradePremiumReminderViewImageView.frame = CGRectMake(sideBarCell.upgradePremiumReminderView.frame.size.width - height*0.08823529 - height*0.08823529, height*0.08823529, height*0.08823529, height*0.08823529);
        sideBarCell.upgradePremiumReminderViewImageViewCover.frame = CGRectMake(sideBarCell.upgradePremiumReminderViewImageView.frame.origin.x - 10, sideBarCell.upgradePremiumReminderViewImageView.frame.origin.y - 10, sideBarCell.upgradePremiumReminderViewImageView.frame.size.width + 20, sideBarCell.upgradePremiumReminderViewImageView.frame.size.height + 20);
        
        sideBarCell.upgradePremiumReminderViewLabel.frame = CGRectMake(height*0.08823529, 0, sideBarCell.upgradePremiumReminderView.frame.size.width - (height*0.08823529)*2, sideBarCell.upgradePremiumReminderView.frame.size.height);
        sideBarCell.upgradePremiumReminderViewLabel.textColor = sideBarCell.sideBarLabel.textColor;
        sideBarCell.upgradePremiumReminderViewLabel.font = [UIFont systemFontOfSize:height*0.10 weight:UIFontWeightSemibold];
        sideBarCell.upgradePremiumReminderViewLabel.adjustsFontSizeToFitWidth = YES;
        
        BOOL PremiumUserHasIndividualPlan = [[[BoolDataObject alloc] init] PremiumUserHasIndividualPlanAndHasMoreThanOneHomeMember:self->homeMembersDict purchasingUserID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
        BOOL PremiumSubscriptionIsOn = [[[BoolDataObject alloc] init] PremiumSubscriptionIsOn];
        
        if (PremiumUserHasIndividualPlan) {
            sideBarCell.upgradePremiumReminderViewLabel.text = @"Get an even better experience\nfor you and your home members with WeDivvy Premium! ⭐️ Tap here for 50% off all plans. 💰";
        } else if (PremiumSubscriptionIsOn == NO) {
            sideBarCell.upgradePremiumReminderViewLabel.text = @"Give your home members WeDivvy Premium! ⭐️ Tap\nhere for 50% off Housemate\nand Family plans. 💰";
        }
        
        [sideBarCell.upgradePremiumReminderView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(DidSelectSideBarPopup:)]];
        [sideBarCell.upgradePremiumReminderViewImageViewCover addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(DismissUpgradeWeDivvyPremiumPopup)]];
        
        sideBarCell.upgradePremiumReminderView.userInteractionEnabled = YES;
        sideBarCell.upgradePremiumReminderViewImageViewCover.userInteractionEnabled = YES;
        
        sideBarCell.upgradePremiumReminderView.hidden = ([[[BoolDataObject alloc] init] NoSignUp] == NO && indexPath.section == 0 && indexPath.row == 0 && self->DisplayUpgradePremiumView == YES) ? NO : YES;
        
        
        
        
        
        width = CGRectGetWidth(sideBarCell.sideBarMainView.bounds);
        height = CGRectGetHeight(sideBarCell.sideBarMainView.bounds);
        
        int finalIndex = [self GenerateIndexOfFinalFolderSection];
        
        CGFloat sideBarImageXPos =
        indexPath.section == usersSection || indexPath.section == tagsSection || indexPath.section == colorsSection || indexPath.section >= finalIndex ?
        (width*0.1444 > 40?(40):width*0.1444) : (width*0.04332 > 12?(12):width*0.04332);
        
        if (([[[BoolDataObject alloc] init] NoSignUp] && indexPath.section == 1) ||
            ([[[BoolDataObject alloc] init] NoSignUp] == NO && indexPath.section == 0)) {
            
            sideBarCell.sideBarImage.frame = CGRectMake(sideBarImageXPos, 0, ((width*0.0722 > 20?(20):width*0.0722)*1.15), height);
            
        } else if (sideBarCell.sideBarImage.image == [UIImage imageNamed:@"SideBarIcons.TaskList.png"] ||
                   sideBarCell.sideBarImage.image == [UIImage imageNamed:@"SideBarIcons.Color.png"]) {
            
            sideBarCell.sideBarImage.frame = CGRectMake(sideBarImageXPos, 0, (width*0.0722 > 20?(20):width*0.0722)*0.85, height);
            
        } else {
            
            sideBarCell.sideBarImage.frame = CGRectMake(sideBarImageXPos, 0, (width*0.0722 > 20?(20):width*0.0722), height);
            
        }
        
        sideBarCell.sideBarAmountLabel.frame = CGRectMake(width - (width*0.18051 > 50?(50):width*0.18051) - (width*0.04332 > 12?(12):width*0.04332), 0, (width*0.18051 > 50?(50):width*0.18051), height);
        
        sideBarCell.sideBarLabel.frame = CGRectMake(sideBarCell.sideBarImage.frame.origin.x + sideBarCell.sideBarImage.frame.size.width + (width*0.04332 > 12?(12):width*0.04332), 0, width - (sideBarCell.sideBarImage.frame.origin.x + sideBarCell.sideBarImage.frame.size.width + (width*0.04332 > 12?(12):width*0.04332)) - (width - sideBarCell.sideBarAmountLabel.frame.origin.x) - (width*0.04332 > 12?(12):width*0.04332), height);
        
        
        
        
        
        NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
        
        NSString *sideBarName = [self GenerateSpecificSideBarDict:indexPath][@"Name"];
        
        
        if (([[[BoolDataObject alloc] init] NoSignUp] && indexPath.section == 1) ||
            ([[[BoolDataObject alloc] init] NoSignUp] == NO && indexPath.section == 0) ||
             ([sideBarName containsString:@"WeDivvy Premium"])) {
            
            sideBarCell.sideBarLabel.font = [UIFont systemFontOfSize:sideBarCell.sideBarLabel.frame.size.height*0.31818 weight:UIFontWeightSemibold];
            
        } else if ([sectionSelected isEqualToString:sideBarName]) {
            
            sideBarCell.sideBarMainView.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModePrimary] : [UIColor colorWithRed:221.0f/255.0f green:224.0f/255.0f blue:229.0f/255.0f alpha:1.0f];
            sideBarCell.sideBarLabel.font = [UIFont systemFontOfSize:sideBarCell.sideBarLabel.frame.size.height*0.31818 weight:UIFontWeightSemibold];
            sideBarCell.sideBarAmountLabel.font = [UIFont systemFontOfSize:sideBarCell.sideBarLabel.frame.size.height*0.31818 weight:UIFontWeightSemibold];
            
        } else {
            
            sideBarCell.sideBarMainView.backgroundColor = [UIColor clearColor];
            sideBarCell.sideBarLabel.font = [UIFont systemFontOfSize:sideBarCell.sideBarLabel.frame.size.height*0.31818 weight:UIFontWeightMedium];
            sideBarCell.sideBarAmountLabel.font = [UIFont systemFontOfSize:sideBarCell.sideBarLabel.frame.size.height*0.31818 weight:UIFontWeightMedium];
            
        }
        
        
        
        
        
        CGRect newRect = sideBarCell.sideBarLabel.frame;
        newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:sideBarCell.sideBarLabel.text withFont:sideBarCell.sideBarLabel.font];
        newRect.size.height = 25;
        newRect.origin.y = height*0.5 - newRect.size.height*0.5;
        sideBarCell.sideBarLabel.frame = newRect;
        
        
        
        
        
        BOOL PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium = [[[BoolDataObject alloc] init] PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium:homeMembersDict purchasingUserID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
        
        sideBarCell.unusedPremiumAccountsView.hidden =
        [sideBarCell.sideBarLabel.text isEqualToString:@"Premium Settings"] && PremiumUserHasAccountsToGiveAndNotAllUsersHavePremium ? NO : YES;
        sideBarCell.unusedPremiumAccountsView.frame = CGRectMake(sideBarCell.sideBarLabel.frame.origin.x + sideBarCell.sideBarLabel.frame.size.width - (((self.view.frame.size.height*0.011994 > 8?(8):self.view.frame.size.height*0.011994))*0.0), sideBarCell.sideBarLabel.frame.origin.y - (((self.view.frame.size.height*0.011994 > 8?(8):self.view.frame.size.height*0.011994))*0.25), (self.view.frame.size.height*0.011994 > 8?(8):self.view.frame.size.height*0.011994), (self.view.frame.size.height*0.011994 > 8?(8):self.view.frame.size.height*0.011994));
        sideBarCell.unusedPremiumAccountsView.layer.cornerRadius = sideBarCell.unusedPremiumAccountsView.frame.size.height/2;
        
    }
    
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (tableView == _customTableView) {
        
        NSMutableDictionary *dictToUse = [self GenerateSpecificIndexPathSectionDataDict:indexPath];
        
        
        
        
        NSString *itemUniqueID = dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > indexPath.row ? dictToUse[@"ItemUniqueID"][indexPath.row] : @"";
        NSString *itemID = dictToUse[@"ItemID"] && [(NSArray *)dictToUse[@"ItemID"] count] > indexPath.row ? dictToUse[@"ItemID"][indexPath.row] : @"";
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Did Select Main Table View Item %@ For %@", itemID, itemType] completionHandler:^(BOOL finished) {
            
        }];
        
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
        
        
        
        
        if (SelectClicked == YES) {
            
            [self DidSelectOption:itemID itemUniqueID:itemUniqueID indexPath:indexPath singleObjectItemDict:singleObjectItemDict];
            
        } else {
            
            [self DidSelectTask:dictToUse indexPath:indexPath];
            
        }
        
        
        
        
    } else if (tableView == _sideBarTableView) {
        
        
        
        
        NSString *sideBarName = [self GenerateSpecificSideBarDict:indexPath][@"Name"];
        
        
        
        
        BOOL DidSelectNoSignUpLogIn = ([[[BoolDataObject alloc] init] NoSignUp] && indexPath.section == 0 && indexPath.row == 0);
        
        
        BOOL DidSelectWeDivvyPremium = (([[[BoolDataObject alloc] init] NoSignUp] && indexPath.section == 1 && indexPath.section == 0) ||
                                        ([[[BoolDataObject alloc] init] NoSignUp] == NO && indexPath.section == 0 && indexPath.section == 0));
        
        
        
        
        
        if (DidSelectNoSignUpLogIn == YES) {
            
            [self DidSelectNoSignUpLogin];
            
        } else if (DidSelectWeDivvyPremium == YES) {
            
            [self DidSelectWeDivvyPremium];
            
        } else {
            
            [self DidSelectSideBarCategory:sideBarName];
            
        }
        
    }
    
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    if (tableView == _customTableView) {
        
        return [self GenerateCellHeight:tableView indexPath:indexPath];
        
    } else if (tableView == _sideBarTableView && indexPath.section == 0 && indexPath.row == 0 && self->DisplayUpgradePremiumView == YES) {
        
        return (height*0.19565217 > 144?(144):height*0.19565217);
        
    }
    
    return (height*0.05978261 > 44?(44):height*0.05978261);
}

-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    
    int numberOfTasksInCompletedSection = self->dataDisplayAmountDict[@"Completed"] ? [(NSString *)self->dataDisplayAmountDict[@"Completed"] intValue] : 0;
    
    BOOL RemoveCompletedSection =
    (numberOfTasksInCompletedSection == 0 &&
     [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompletedToggledAtLeastOnce"] isEqualToString:@"Yes"] == NO);
    
    if (RemoveCompletedSection == YES) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"ShowCompleted"];
        
        if ([dataDisplaySectionsArray containsObject:@"Completed"]) {
            [dataDisplaySectionsArray removeObject:@"Completed"];
            [self.customTableView reloadData];
        }
        if ([[dataDisplayDict allKeys] containsObject:@"Completed"]) {
            [dataDisplayDict removeObjectForKey:@"Completed"];
            [self.customTableView reloadData];
        }
        
    }
    
    
    
    
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    NSString *sideBarTableViewSectionName = [sideBarSectionsArray count] > section ? sideBarSectionsArray[section] : @"";
    NSString *mainTableViewSectionName = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > section ? [dataDisplaySectionsArray objectAtIndex:section] : @"";
    NSMutableArray *folderNameArray = folderDict[@"FolderName"] ? [folderDict[@"FolderName"] mutableCopy] : [NSMutableArray array];
    
    
   
    
    
    if (tableView == _customTableView) {
        
        MainCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MainCell"];
        
        
        
        
        //View
        UIView *sectionSuperView = [self GenerateSectionSuperView:section cell:cell tableView:tableView mainTableViewSectionName:mainTableViewSectionName];
        
        //Inner-View
        UIView *mainView = [self GenerateMainView];
        
        //Left
        UIView *selectView = [self GenerateSelectView:section cell:cell mainTableViewSectionName:mainTableViewSectionName];
        UIView *selectInnerView = [self GenerateSelecteViewInner:section cell:cell selectView:selectView mainTableViewSectionName:mainTableViewSectionName];
        
        //Left-Center
        UILabel *sectionLabel = [self GenerateSectionLabel:cell selectView:selectView mainTableViewSectionName:mainTableViewSectionName];
        UIView *sectionLabelCover = [self GenerateSectionLabelCover:section sectionLabel:sectionLabel mainTableViewSectionName:mainTableViewSectionName];
        
        //Right
        UIImageView *arrowImageView = [self GenerateArrowImageView:mainView selectView:selectView sectionLabel:sectionLabel mainTableViewSectionName:mainTableViewSectionName];
        UILabel *amountLabel = [self GenerateAmountLabel:section mainView:mainView arrowImageView:arrowImageView];
        
        //Right-Center
        UILabel *postponeLabel = [self GeneratePostponeLabel:mainView amountLabel:amountLabel mainTableViewSectionName:mainTableViewSectionName];
        UIButton *postponeLabelCover = [self GeneratePostponeLabelCover:postponeLabel];
        
        
        
        
        [sectionSuperView addSubview:mainView];
        
        [mainView addSubview:selectView];
        [mainView addSubview:selectInnerView];
        
        [mainView addSubview:sectionLabel];
        [mainView addSubview:sectionLabelCover];
        
        [mainView addSubview:arrowImageView];
        [mainView addSubview:amountLabel];
        
        [mainView addSubview:postponeLabel];
        [mainView addSubview:postponeLabelCover];
        
        
        
        
        return sectionSuperView;
        
    } else if (tableView == _sideBarTableView && sideBarSectionsArray.count > section) {
        
        BOOL SectionIsAGroup =  ([sideBarTableViewSectionName isEqualToString:@"Users"] == YES ||
                                 [sideBarTableViewSectionName isEqualToString:@"Tags"] == YES ||
                                 [sideBarTableViewSectionName isEqualToString:@"Colors"] == YES ||
                                 [folderNameArray containsObject:sideBarTableViewSectionName] == YES);
        
        if (SectionIsAGroup == NO) {
            
            
            
            
            //View
            UIView *mainView = [self GenerateSideBarMainView:tableView section:section];
            
            //Left
            UILabel *sectionLabel = [self GenerateSideBarSectionLabel:section];
            
            //Left-Center
            UIImageView *infoButtonImage = [self GenerateSideBarInfoImageView:sectionLabel section:section];
            UIView *infoButtonImageOverlay = [self GenerateSideBarInfoImageViewOverlay:infoButtonImage];
            
            
            
            
            [mainView addSubview:sectionLabel];
            [mainView addSubview:infoButtonImage];
            [mainView addSubview:infoButtonImageOverlay];
            
            
            
            
            return mainView;
            
        } else if (SectionIsAGroup == YES) {
            
            
            
            //View
            UIView *mainView = [self GenerateSideBarTableViewGroupMainView:tableView section:section];
            
            //Left
            UIImageView *sideBarImageView = [self GenerateSideBarTableViewGroupImageView:section folderNameArray:folderNameArray sideBarTableViewSectionName:sideBarTableViewSectionName];
            
            //Left-Center
            UILabel *sectionLabel = [self GenerateSideBarTableViewGroupSectionLabel:section sideBarImageView:sideBarImageView];
            
            //Right
            UIImageView *arrowImageView = [self GenerateSideBarTableViewGroupArrowImageView:sectionLabel.text];
            
            
            
            
            [mainView addSubview:sideBarImageView];
            [mainView addSubview:sectionLabel];
            [mainView addSubview:arrowImageView];
            
            
            
            
            return mainView;
            
        }
        
    }
    
    return [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, 0)];
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger )section {
    return [[UIView alloc] initWithFrame:CGRectZero];
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    
    NSString *currentSection = @"";
    NSMutableArray *folderNameArray = [NSMutableArray array];
    
    
    
    currentSection = sideBarSectionsArray && [sideBarSectionsArray count] > section ? sideBarSectionsArray[section] : @"";
    folderNameArray = folderDict && folderDict[@"FolderName"] ? [folderDict[@"FolderName"] mutableCopy] : [NSMutableArray array];
    
    
    
    if (tableView == _customTableView) {
        
        return mainTableViewSectionHeight;
        
    } else if (tableView == _sideBarTableView && sideBarSectionsArray.count > section) {
        
        if ([currentSection isEqualToString:@"Users"] == NO && [currentSection isEqualToString:@"Tags"] == NO && [currentSection isEqualToString:@"Colors"] == NO && [folderNameArray containsObject:currentSection] == NO) {
            
            CGFloat height = CGRectGetHeight(self.view.bounds);
            return (height*0.033967 > 25?(25):height*0.033967);
            
        } else if ([currentSection isEqualToString:@"Users"] == YES || [currentSection isEqualToString:@"Tags"] == YES || [currentSection isEqualToString:@"Colors"] == YES || [folderNameArray containsObject:currentSection] == YES) {
            
            CGFloat height = CGRectGetHeight(self.view.bounds);
            return (height*0.05978261 > 44?(44):height*0.05978261);
            
        }
        
    }
    
    return 1;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger )section {
    
    NSString *currentSection = @"";
    NSMutableArray *folderNameArray = [NSMutableArray array];
    
    
    
    currentSection = sideBarSectionsArray && [sideBarSectionsArray count] > section ? sideBarSectionsArray[section] : @"";
    folderNameArray = folderDict && folderDict[@"FolderName"] ? [folderDict[@"FolderName"] mutableCopy] : [NSMutableArray array];
    
    
    
    if (tableView == _customTableView) {
        
        return 1.0;
        
    } else if (tableView == _sideBarTableView && sideBarSectionsArray.count > section) {
        
        if ([currentSection isEqualToString:@"Users"] == NO && [currentSection isEqualToString:@"Tags"] == NO && [currentSection isEqualToString:@"Colors"] == NO && [folderNameArray containsObject:currentSection] == NO) {
            
            return 0.1;
            
        } else if ([currentSection isEqualToString:@"Users"] == YES || [currentSection isEqualToString:@"Tags"] == YES || [currentSection isEqualToString:@"Colors"] == YES || [folderNameArray containsObject:currentSection] == YES) {
            
            return 0.1;
            
        }
        
    }
    
    return 0.1;
}

-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    
    
    
    if (tableView == _customTableView) {
        
        return dataDisplaySectionsArray ? dataDisplaySectionsArray.count : 0;
        
    } else if (tableView == _sideBarTableView) {
        
        return sideBarSectionsArray ? sideBarSectionsArray.count : 0;
        
    }
    
    
    
    return 0;
}

-(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    
    
    
    if (tableView == _customTableView) {
        
        return dataDisplaySectionsArray && dataDisplaySectionsArray.count > section ? dataDisplaySectionsArray[section] : @"";
        
    } else if (tableView == _sideBarTableView) {
        
        return dataDisplaySectionsArray && dataDisplaySectionsArray.count > section ? sideBarSectionsArray[section] : @"";
        
    }
    
    
    
    return @"";
}

#pragma mark

- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return YES if you want the specified item to be editable.
    return YES;
}

- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}

- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return UITableViewCellEditingStyleNone;
}

- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath
{
    
    //    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    //
    //    NSString *destinationSection = @"";
    //    NSString *sourceSection = @"";
    //
    //
    //
    //    destinationSection = [self->dataDisplaySectionsArray count] > destinationIndexPath.section ? self->dataDisplaySectionsArray[destinationIndexPath.section] : @"";
    //    sourceSection = [self->dataDisplaySectionsArray count] > sourceIndexPath.section ? self->dataDisplaySectionsArray[sourceIndexPath.section] : @"";
    //
    //    if ([collapseSectionsArray containsObject:destinationSection]) {
    //
    //        [collapseSectionsArray removeObject:destinationSection];
    //
    //        [[NSUserDefaults standardUserDefaults] setObject:collapseSectionsArray forKey:@"CollapseSectionsArray"];
    //
    //        if (self.customTableView.numberOfSections > destinationIndexPath.section) {
    //
    //            [self.customTableView beginUpdates];
    //            [self.customTableView reloadSections:[NSIndexSet indexSetWithIndex:destinationIndexPath.section] withRowAnimation:UITableViewRowAnimationAutomatic];
    //            [self.customTableView endUpdates];
    //
    //        }
    //
    //        [[NSUserDefaults standardUserDefaults] setObject:@"No" forKey:@"OpenningSection"];
    //
    //    }
    //
    //
    //
    //    NSMutableDictionary *sourceDict = [NSMutableDictionary dictionary];
    //    NSMutableDictionary *destinationDict = [NSMutableDictionary dictionary];
    //
    //    NSString *itemUniqueID = @"";
    //    NSString *itemID = @"";
    //
    //
    //
    //    sourceDict = self->dataDisplayDict[sourceSection] ? [self->dataDisplayDict[sourceSection] mutableCopy] : [NSMutableDictionary dictionary];
    //    destinationDict = self->dataDisplayDict[destinationSection] ? [self->dataDisplayDict[destinationSection] mutableCopy] : [NSMutableDictionary dictionary];
    //
    //    itemUniqueID = sourceDict[@"ItemUniqueID"] && [(NSArray *)sourceDict[@"ItemUniqueID"] count] > sourceIndexPath.row ? sourceDict[@"ItemUniqueID"][sourceIndexPath.row] : @"";
    //    itemID = sourceDict[@"ItemID"] && [(NSArray *)sourceDict[@"ItemID"] count] > sourceIndexPath.row ? sourceDict[@"ItemID"][sourceIndexPath.row] : @"";
    //
    //    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move Row Item %@ For %@", itemID, itemType] completionHandler:^(BOOL finished) {
    //
    //    }];
    //
    //    for (NSString *key in self->keyArray) {
    //
    //        NSString *object = sourceDict[key] && [(NSArray *)sourceDict[key] count] > sourceIndexPath.row ? sourceDict[key][sourceIndexPath.row] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
    //
    //        NSMutableArray *tempSourceArr = sourceDict[key] ? [sourceDict[key] mutableCopy] : [NSMutableArray array];
    //        if ([tempSourceArr count] > sourceIndexPath.row) { [tempSourceArr removeObjectAtIndex:sourceIndexPath.row]; }
    //        [sourceDict setObject:tempSourceArr forKey:key];
    //
    //        NSMutableArray *tempDestinationArr = destinationDict[key] ? [destinationDict[key] mutableCopy] : [NSMutableArray array];
    //        [tempDestinationArr insertObject:object atIndex:destinationIndexPath.row];
    //        [destinationDict setObject:tempDestinationArr forKey:key];
    //
    //    }
    //
    //    [self->dataDisplayDict setObject:sourceDict forKey:sourceSection];
    //    [self->dataDisplayDict setObject:destinationDict forKey:destinationSection];
    //
    //
    //
    //    NSMutableArray *sectionItemsArray = [NSMutableArray array];
    //
    //    NSString *oldSectionID = @"";
    //    NSString *oldSectionCreatedBy = @"";
    //    NSMutableDictionary *oldSectionItems = [NSMutableDictionary dictionary];
    //
    //
    //
    //    sectionItemsArray = self->sectionDict[@"SectionItems"] ? [self->sectionDict[@"SectionItems"] mutableCopy] : [NSMutableArray array];
    //
    //    if (self->sectionDict[@"SectionName"] && [self->sectionDict[@"SectionName"] containsObject:sourceSection]) {
    //
    //        NSUInteger oldIndex = [self->sectionDict[@"SectionName"] indexOfObject:sourceSection];
    //        oldSectionID = self->sectionDict[@"SectionID"] && [(NSArray *)self->sectionDict[@"SectionID"] count] > oldIndex ? self->sectionDict[@"SectionID"][oldIndex] : @"";
    //        oldSectionCreatedBy = self->sectionDict[@"SectionCreatedBy"] && [(NSArray *)self->sectionDict[@"SectionCreatedBy"] count] > oldIndex ? self->sectionDict[@"SectionCreatedBy"][oldIndex] : @"";
    //        oldSectionItems = self->sectionDict[@"SectionItems"] && [(NSArray *)self->sectionDict[@"SectionItems"] count] > oldIndex ? [self->sectionDict[@"SectionItems"][oldIndex] mutableCopy] : [NSMutableDictionary dictionary];
    //
    //        if ([[oldSectionItems allKeys] containsObject:itemUniqueID]) {
    //            [oldSectionItems removeObjectForKey:itemUniqueID];
    //        }
    //
    //        if ([sectionItemsArray count] > oldIndex) {
    //
    //            [sectionItemsArray replaceObjectAtIndex:oldIndex withObject:oldSectionItems];
    //
    //        }
    //
    //    }
    //
    //
    //
    //    NSString *newSectionID = @"";
    //    NSString *newSectionCreatedBy = @"";
    //    NSMutableDictionary *newSectionItems = [NSMutableDictionary dictionary];
    //
    //
    //
    //    if (self->sectionDict[@"SectionName"] && [self->sectionDict[@"SectionName"] containsObject:destinationSection]) {
    //
    //        NSUInteger newIndex = [self->sectionDict[@"SectionName"] indexOfObject:destinationSection];
    //        newSectionID = self->sectionDict[@"SectionID"] && [(NSArray *)self->sectionDict[@"SectionID"] count] > newIndex ? self->sectionDict[@"SectionID"][newIndex] : @"";
    //        newSectionCreatedBy = self->sectionDict[@"SectionCreatedBy"] && [(NSArray *)self->sectionDict[@"SectionCreatedBy"] count] > newIndex ? self->sectionDict[@"SectionCreatedBy"][newIndex] : @"";
    //        newSectionItems = self->sectionDict[@"SectionItems"] && [(NSArray *)self->sectionDict[@"SectionItems"] count] > newIndex ? [self->sectionDict[@"SectionItems"][newIndex] mutableCopy] : [NSMutableDictionary dictionary];
    //
    //        if ([[newSectionItems allKeys] containsObject:itemUniqueID] == NO) {
    //
    //            [newSectionItems setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
    //
    //        }
    //
    //        if ([sectionItemsArray count] > newIndex) {
    //
    //            [sectionItemsArray replaceObjectAtIndex:newIndex withObject:newSectionItems];
    //
    //        }
    //
    //    }
    //
    //    [self->sectionDict setObject:sectionItemsArray forKey:@"SectionItems"];
    //
    //
    //
    //    [self StartProgressView];
    //
    //    __block int totalQueries = 2;
    //    __block int completedQueries = 0;
    //
    //    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //
    //        if (oldSectionID.length > 0) {
    //
    //            [[[SetDataObject alloc] init] UpdateDataSectionItems:oldSectionID sectionCreatedBy:oldSectionCreatedBy sectionItems:oldSectionItems completionHandler:^(BOOL finished) {
    //
    //                if (totalQueries == (completedQueries += 1)) {
    //
    //                    dispatch_async(dispatch_get_main_queue(), ^{
    //
    //
    //
    //                        [self->dataDisplayDict setObject:sourceDict forKey:sourceSection];
    //                        [self->dataDisplayDict setObject:destinationDict forKey:destinationSection];
    //
    //                        [self.customTableView reloadData];
    //                        [self->progressView setHidden:YES];
    //
    //
    //
    //                    });
    //
    //                }
    //
    //            }];
    //
    //        } else {
    //
    //            if (totalQueries == (completedQueries += 1)) {
    //
    //                dispatch_async(dispatch_get_main_queue(), ^{
    //
    //
    //
    //                    [self->dataDisplayDict setObject:sourceDict forKey:sourceSection];
    //                    [self->dataDisplayDict setObject:destinationDict forKey:destinationSection];
    //
    //                    [self.customTableView reloadData];
    //                    [self->progressView setHidden:YES];
    //
    //
    //
    //                });
    //
    //            }
    //
    //        }
    //
    //    });
    //
    //    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //
    //        if (newSectionID.length > 0) {
    //
    //            [[[SetDataObject alloc] init] UpdateDataSectionItems:newSectionID sectionCreatedBy:newSectionCreatedBy sectionItems:newSectionItems completionHandler:^(BOOL finished) {
    //
    //                if (totalQueries == (completedQueries += 1)) {
    //
    //                    dispatch_async(dispatch_get_main_queue(), ^{
    //
    //
    //
    //                        [self->dataDisplayDict setObject:sourceDict forKey:sourceSection];
    //                        [self->dataDisplayDict setObject:destinationDict forKey:destinationSection];
    //
    //                        [self.customTableView reloadData];
    //                        [self->progressView setHidden:YES];
    //
    //
    //
    //                    });
    //
    //                }
    //
    //            }];
    //
    //        } else {
    //
    //            if (totalQueries == (completedQueries += 1)) {
    //
    //                dispatch_async(dispatch_get_main_queue(), ^{
    //
    //
    //
    //                    [self->dataDisplayDict setObject:sourceDict forKey:sourceSection];
    //                    [self->dataDisplayDict setObject:destinationDict forKey:destinationSection];
    //
    //                    [self.customTableView reloadData];
    //                    [self->progressView setHidden:YES];
    //
    //
    //
    //                });
    //
    //            }
    //
    //        }
    //
    //    });
    
}

- (BOOL)tableView:(UITableView *)tableview shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)indexPath {
    return NO;
}

-(UISwipeActionsConfiguration *)tableView:(UITableView *)tableView trailingSwipeActionsConfigurationForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {
    
    NSString *sideBarName = @"";
    
    
    if (self->sideBarCategorySectionArrayAltered) {
        if ([self->sideBarCategorySectionArrayAltered count] > indexPath.section) {
            if (self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"]) {
                if ([(NSArray *)self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"] count] > indexPath.row) {
                    sideBarName = self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"][indexPath.row];
                }
            }
        }
    }
    
    
    UIContextualAction *EditListAction = [UIContextualAction contextualActionWithStyle:UIContextualActionStyleNormal title:nil handler:^(UIContextualAction * _Nonnull action, __kindof UIView * _Nonnull sourceView, void (^ _Nonnull completionHandler)(BOOL)) {
        
        [self EditTaskListAction:sideBarName];
        
    }];
    
    UIContextualAction *DeleteListAction = [UIContextualAction contextualActionWithStyle:UIContextualActionStyleNormal title:nil handler:^(UIContextualAction * _Nonnull action, __kindof UIView * _Nonnull sourceView, void (^ _Nonnull completionHandler)(BOOL)) {
        
        [self DeleteTaskListAction:sideBarName];
        
    }];
    
    EditListAction.image = [UIImage imageNamed:@"SideBarIcons.PencilTrailing"];
    EditListAction.backgroundColor = _sideBarView.backgroundColor;
    
    DeleteListAction.image = [UIImage imageNamed:@"SideBarIcons.TrashTrailing"];
    DeleteListAction.backgroundColor = _sideBarView.backgroundColor;
    
    NSMutableArray *actionsArray = [NSMutableArray array];
    
    if (tableView == _sideBarTableView && indexPath.section >= 3) {
        [actionsArray addObject:DeleteListAction];
        [actionsArray addObject:EditListAction];
    }
    
    //right to left
    return [UISwipeActionsConfiguration configurationWithActions:actionsArray];
    
}

- (UIContextMenuConfiguration*)tableView:(UITableView*)tableView contextMenuConfigurationForRowAtIndexPath:(NSIndexPath*)indexPath point:(CGPoint)point API_AVAILABLE(ios(13.0)) {
    
    UIContextMenuConfiguration* config = [UIContextMenuConfiguration configurationWithIdentifier:nil
                                                                                 previewProvider:nil
                                                                                  actionProvider:^UIMenu* _Nullable(NSArray<UIMenuElement*>* _Nonnull suggestedActions) {
        
        if (tableView == self->_customTableView) {
            
            NSMutableDictionary *dictToUse = [self General_GenerateSectionItemDict:indexPath];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
            
            self->selectedItemsDict = [NSMutableDictionary dictionary];
            
            NSString *itemUniqueID = singleObjectItemDict && singleObjectItemDict[@"ItemUniqueID"] ? singleObjectItemDict[@"ItemUniqueID"] : @"xxx";
            [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
            
            [[NSUserDefaults standardUserDefaults] setObject:@{@"indexPath.section" : [NSString stringWithFormat:@"%ld", (long)indexPath.section], @"indexPath.row" : [NSString stringWithFormat:@"%ld", (long)indexPath.row], @"singleObjectItemDict" : singleObjectItemDict} forKey:@"HeldDownCell"];
            
            return [self GenerateItemContextMenu];
           
        }
        
        return [UIMenu menuWithTitle:@"" children:[NSMutableArray array]];
        
    }];
    
    return config;
    
}

#pragma mark - IAP Methods

- (BOOL)CanMakePurchases {
    
    return [SKPaymentQueue canMakePayments];
    
}

-(void)FetchAvailableProducts {
    
    if (![[NSUserDefaults standardUserDefaults] objectForKey:@"PremiumPlanProductsArray"] || ![[NSUserDefaults standardUserDefaults] objectForKey:@"PremiumPlanPricesDict"]) {
        
        if ([self CanMakePurchases]) {
            
            //NSLog(@"Subscription - products fetchAvailableProducts");
            NSSet *productIdentifiers = [[[GeneralObject alloc] init] GenerateSubscriptionsKeyArray];
            SKProductsRequest *productsRequest = [[SKProductsRequest alloc]
                                                  initWithProductIdentifiers:productIdentifiers];
            productsRequest.delegate = self;
            [productsRequest start];
            
        }
        
    }
    
}

-(void)productsRequest:(SKProductsRequest *)request
    didReceiveResponse:(SKProductsResponse *)response {
    
    //NSLog(@"Subscription - How many products retrieved? %lu", (unsigned long)count);
    
    [[[GeneralObject alloc] init] GenerateProducts:response.products completionHandler:^(BOOL finished, NSString * _Nonnull errorString, NSMutableArray * _Nonnull returningPremiumPlanProductsArray, NSMutableDictionary * _Nonnull returningPremiumPlanPricesDict, NSMutableDictionary * _Nonnull returningPremiumPlanExpensivePricesDict, NSMutableDictionary * _Nonnull returningPremiumPlanPricesDiscountDict, NSMutableDictionary * _Nonnull returningPremiumPlanPricesNoFreeTrialDict) {
        
        self->premiumPlanProductsArray = [returningPremiumPlanProductsArray mutableCopy];
        self->premiumPlanPricesDict = [returningPremiumPlanPricesDict mutableCopy];
        self->premiumPlanExpensivePricesDict = [returningPremiumPlanExpensivePricesDict mutableCopy];
        self->premiumPlanPricesDiscountDict = [returningPremiumPlanPricesDiscountDict mutableCopy];
        self->premiumPlanPricesNoFreeTrialDict = [returningPremiumPlanPricesNoFreeTrialDict mutableCopy];

    }];
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Internal Methods
#pragma mark
#pragma mark
#pragma mark -

#pragma mark System Methods

-(void)ViewDidLoad_SetNSUserDefaultData {
    
    OriginalDataStored =
    (([self->itemType isEqualToString:@"Chore"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"]) ||
     
     ([self->itemType isEqualToString:@"Expense"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"]) ||
     
     ([self->itemType isEqualToString:@"List"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] &&
      [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"])) &&
    
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryNameArray"] &&
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryImageArray"] &&
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryIDArray"] &&
    
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarSectionsArray"] &&
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayOriginal"] &&
    [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayAltered"];
    
    if (OriginalDataStored == YES) {
        
        if ([self->itemType isEqualToString:@"Chore"]) {
            
            itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] mutableCopy] : [NSMutableArray array];
            dataDisplayDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] mutableCopy] : [NSMutableDictionary dictionary];
            
            itemDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            
            itemDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            
        } else if ([self->itemType isEqualToString:@"Expense"]) {
            
            itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] mutableCopy] : [NSMutableArray array];
            dataDisplayDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
           
            itemDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            
            itemDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] mutableCopy] : [NSMutableDictionary dictionary];
            
        } else if ([self->itemType isEqualToString:@"List"]) {
            
            itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo2"] mutableCopy] : [NSMutableArray array];
            dataDisplayDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
            
            itemDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArray"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDict"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo2 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDict"] mutableCopy] : [NSMutableDictionary dictionary];
            
            itemDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            itemOccurrencesDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemOccurrenceDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplaySectionsArrayNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplaySectionsArrayNo1"] mutableCopy] : [NSMutableArray array];
            dataDisplayDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            dataDisplayAmountDictNo3 = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempDisplayAmountDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
            
        }
        
        self->defaultCategoryNameArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryNameArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryNameArray"] mutableCopy] : [NSMutableArray array];
        self->defaultCategoryImageArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryImageArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryImageArray"] mutableCopy] : [NSMutableArray array];
        self->defaultCategoryIDArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryIDArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempCategoryIDArray"] mutableCopy] : [NSMutableArray array];
        
        self->sideBarSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarSectionsArray"] mutableCopy] : [NSMutableArray array];
        self->sideBarCategorySectionArrayOriginal = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayOriginal"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayOriginal"] mutableCopy] : [NSMutableArray array];
        self->sideBarCategorySectionArrayAltered = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayAltered"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempSideBarCategorySectionArrayAltered"] mutableCopy] : [NSMutableArray array];
        
        
        
        self->homeDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeDict"] mutableCopy] : [NSMutableArray array];
        self->homeMembersArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersArray"] mutableCopy] : [NSMutableArray array];
        self->homeKeysDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeKeysDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeKeysDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->homeKeysArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeKeysArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeKeysArray"] mutableCopy] : [NSMutableDictionary dictionary];
        self->homeMembersUnclaimedDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersUnclaimedDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersUnclaimedDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->homeMembersDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"HomeMembersDict"] mutableCopy] : [NSMutableDictionary dictionary];
        
        self->notificationSettingsDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationSettingsDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationSettingsDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->topicDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TopicDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TopicDict"] mutableCopy] : [NSMutableDictionary dictionary];
        
        self->folderDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"FolderDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"FolderDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->taskListDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TaskListDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TaskListDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->sectionDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"SectionDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SectionDict"] mutableCopy] : [NSMutableDictionary dictionary];
        self->templateDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TemplateDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TemplateDict"] mutableCopy] : [NSMutableDictionary dictionary];
       
        self->unreadActivityDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityDict"] mutableCopy] : [NSMutableDictionary dictionary];
        
        [self General_GenerateItemsToDisplayInBackground:^(BOOL finished) {
            
            self->EverythingIsThere = YES;
            
        }];
        
    } else {
        
        [activityControl setHidden:NO];
        
        activityControl.frame = CGRectMake((_customScrollView.frame.size.width*0.5)-(25*0.5), _customScrollView.frame.size.height*0.5 - 25*0.5, 25, 25);
        activityControl.color = [UIColor grayColor];
        [activityControl startAnimating];
        
        [self.customScrollView addSubview:activityControl];
        
    }
    
}

-(void)ViewDidLoad_PresentWeDivvyPopup {
    
    BOOL WeDivvyPremiumPopupAfterSignUpWasDisplayed = ([[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUp"] && [[[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUp"] isEqualToString:@"Yes"]);
    BOOL WeDivvyPremiumPopupAfterSignUpWasDisplayedOnThisSession = [[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUpOnThisSession"] &&
    [[[NSUserDefaults standardUserDefaults] objectForKey:@"WeDivvyPremiumWasDisplayedAfterSignUpOnThisSession"] isEqualToString:@"Yes"];
    BOOL MultiAddWasShownForTheFirstTime = [[NSUserDefaults standardUserDefaults] objectForKey:@"ShowedMultiAddForTheFirstTime"] && [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowedMultiAddForTheFirstTime"] isEqualToString:@"Yes"];
    BOOL ViewingChores = [[[[GeneralObject alloc] init] GenerateItemType] isEqualToString:@"Chore"];
    
    if (WeDivvyPremiumPopupAfterSignUpWasDisplayed == YES && WeDivvyPremiumPopupAfterSignUpWasDisplayedOnThisSession == NO && MultiAddWasShownForTheFirstTime == NO && ViewingChores == YES && self->EverythingIsThere == YES) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"ShowedMultiAddForTheFirstTime"];
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        
        NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
        BOOL ListSelected = [self->taskListDict[@"TaskListName"] containsObject:sectionSelected];
        NSString *defaultTaskListName = ListSelected == YES ? sectionSelected : @"No List";
        
//        [[[PushObject alloc] init] PushToMultiAddTasksViewController:NO itemDictFromPreviousPage:[NSMutableDictionary dictionary] itemDictKeysFromPreviousPage:[NSMutableDictionary dictionary] itemSelectedDict:[NSMutableDictionary dictionary] homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict folderDict:[self->folderDict mutableCopy] taskListDict:[self->taskListDict mutableCopy] templateDict:self->templateDict draftDict:self->draftDict homeMembersArray:self->homeMembersArray itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays defaultTaskListName:defaultTaskListName currentViewController:self Superficial:NO];
        
    }
    
}

-(void)ViewDidLoad_CompletionBlock {
    
    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"QueryFirstTime"];
    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"ViewDidLoadShouldStartNo1"];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        [self->activityControl stopAnimating];
        [self->refreshControl endRefreshing];
        
        [self.customTableView reloadData];
        [self.sideBarTableView reloadData];
        
        [self ViewDidLoad_PresentWeDivvyPopup];
        
    });
    
}

#pragma mark

-(void)GenerateTopViewFrames:(CGFloat)width height:(CGFloat)height {
    
    _topView.frame = CGRectMake(0, 0, width, height*0.15);
    
    
    
    
    width = CGRectGetWidth(self.topView.bounds);
    height = CGRectGetHeight(self.topView.bounds);
    
    _sideBarImage.frame = CGRectMake((width*0.035), (self.view.frame.size.height*0.0163 > 12?(12):self.view.frame.size.height*0.0163), (width*0.04831 > 20?(20):width*0.04831), (width*0.04831 > 20?(20):width*0.04831));
    _sideBarImageOverlayView.frame = CGRectMake(_sideBarImage.frame.origin.x - 10, _sideBarImage.frame.origin.y - 10, _sideBarImage.frame.size.width + 20, _sideBarImage.frame.size.height + (width*0.04831 > 20?(20):width*0.04831));
    
    
    
    _middleLabel.frame = CGRectMake(0, _sideBarImage.frame.origin.y, width, (width*0.04831 > 20?(20):width*0.04831));
    
    
    
    _ellipsisImage.frame = CGRectMake(width*1 - ((width*0.06039 > 25?(25):width*0.06039)) - (width*0.035), _sideBarImage.frame.origin.y + (_sideBarImage.frame.size.height*0.5 - (((width*0.06039 > 25?(25):width*0.06039)*0.3)*0.5)), (width*0.06039 > 25?(25):width*0.06039), (width*0.06039 > 25?(25):width*0.06039)*0.3);
    _ellipsisOverlayView.frame = CGRectMake(_ellipsisImage.frame.origin.x - 10, _ellipsisImage.frame.origin.y - 10, _ellipsisImage.frame.size.width + 20, _ellipsisImage.frame.size.height + (width*0.04831 > 20?(20):width*0.04831));
    
    _walletImage.frame = CGRectMake(_ellipsisImage.frame.origin.x - 17.5 - (width*0.035), _ellipsisImage.frame.origin.y + _ellipsisImage.frame.size.height*0.5 - 17.5*0.5, 17.5, 17.5);
    _walletOverlayView.frame = CGRectMake(_walletImage.frame.origin.x - 10, _walletImage.frame.origin.y - 10, _walletImage.frame.size.width + 20, _walletImage.frame.size.height + (width*0.06039 > 25?(25):width*0.06039));
    
    _walletImage.hidden = [itemType isEqualToString:@"Expense"] == NO;
    _walletOverlayView.hidden = [itemType isEqualToString:@"Expense"] == NO;
    
    //Post-Spike
    //    _walletImage.hidden = YES;
    //    _walletOverlayView.hidden = YES;
    
    
    
    
    _separatorView.frame = CGRectMake(0, _sideBarImage.frame.origin.y + _sideBarImage.frame.size.height + (self.view.frame.size.height*0.0163 > 12?(12):self.view.frame.size.height*0.0163), width, 1);
    
    
    
    
    
    CGRect newRect = self.topView.frame;
    newRect.size.height = _separatorView.frame.origin.y;
    self.topView.frame = newRect;
    
    _topView.layer.borderWidth = 0.0;
    _topView.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
    _topView.layer.shadowRadius = 5;
    _topView.layer.shadowOpacity = 1.0;
    _topView.layer.shadowOffset = CGSizeMake(0, 0);
    
}

-(void)GenerateEmptyTableView:(CGFloat)width height:(CGFloat)height {
    
    _emptyTableViewView.frame = CGRectMake(0, 0, width, height*0.5);
    
    
    
    width = CGRectGetWidth(_emptyTableViewView.bounds);
    height = CGRectGetHeight(_emptyTableViewView.bounds);
    
    _emptyTableViewImage.frame = CGRectMake(0, 0, width, (self.view.frame.size.height*0.07472826 > 55?(55):self.view.frame.size.height*0.07472826));
    _emptyTableViewTitleLabel.frame = CGRectMake(0, _emptyTableViewImage.frame.origin.y + _emptyTableViewImage.frame.size.height + (self.view.frame.size.height*0.02038043 > 15?(15):self.view.frame.size.height*0.02038043), width, (self.view.frame.size.height*0.03804348 > 28?(28):self.view.frame.size.height*0.03804348));
    _emptyTableViewBodyLabel.frame = CGRectMake(0, _emptyTableViewTitleLabel.frame.origin.y + _emptyTableViewTitleLabel.frame.size.height, width, (self.view.frame.size.height*0.06929348 > 51?(51):self.view.frame.size.height*0.06929348));
    _emptyTableViewArrowImage.frame = CGRectMake(0, _emptyTableViewBodyLabel.frame.origin.y + _emptyTableViewBodyLabel.frame.size.height + (self.view.frame.size.height*0.13586957 > 100?(100):self.view.frame.size.height*0.13586957), width, (self.view.frame.size.height*0.07472826 > 55?(55):self.view.frame.size.height*0.07472826)*1.25);
    _emptyTableViewArrowImage.alpha = 0.75;
    
    
    
    _emptyTableViewTitleLabel.font = [UIFont systemFontOfSize:_emptyTableViewTitleLabel.frame.size.height*0.78571429 weight:UIFontWeightBold];
    _emptyTableViewBodyLabel.font = [UIFont systemFontOfSize:_emptyTableViewBodyLabel.frame.size.height*0.29411765 weight:UIFontWeightRegular];
    
    
    
    CGRect newRect = _emptyTableViewView.frame;
    newRect.size.height = _emptyTableViewImage.frame.size.height + (self.view.frame.size.height*0.02038043 > 15?(15):self.view.frame.size.height*0.02038043) + _emptyTableViewTitleLabel.frame.size.height + _emptyTableViewBodyLabel.frame.size.height;
    newRect.origin.y = self.view.frame.size.height*0.5 - newRect.size.height*0.5 + _topView.frame.size.height - _tabBarView.frame.size.height;
    _emptyTableViewView.frame = newRect;
    
}

-(void)GenerateSideBarView:(CGFloat)width height:(CGFloat)height bottomPadding:(CGFloat)bottomPadding {
    
    _sideBarView.frame = CGRectMake(-1*width, 0, width*0.67, height);
    
    _sideBarView.layer.borderWidth = 1.0f;
    _sideBarView.layer.borderColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModePrimary].CGColor : [UIColor colorWithRed:230.0f/255.0f green:232.0f/255.0f blue:236.0f/255.0f alpha:1.0f].CGColor;
    
    
    
    
    width = CGRectGetWidth(self.sideBarView.bounds);
    height = CGRectGetHeight(self.sideBarView.bounds);
    
    _homeMemberImage.frame = CGRectMake(_sideBarImage.frame.origin.x, _statusBarOverView.frame.size.height + (height*0.01630 > 12?(12):height*0.01630), _sideBarImage.frame.size.width, _sideBarImage.frame.size.height);
    _notificationImage.frame = CGRectMake(_homeMemberImage.frame.origin.x + _homeMemberImage.frame.size.width + _homeMemberImage.frame.origin.x, _homeMemberImage.frame.origin.y, _sideBarImage.frame.size.width, _homeMemberImage.frame.size.height);
    
    
    
    _calendarImage.frame = CGRectMake(_notificationImage.frame.origin.x + _notificationImage.frame.size.width + _homeMemberImage.frame.origin.x, _homeMemberImage.frame.origin.y, _notificationImage.frame.size.width, _notificationImage.frame.size.height);
    _searchImage.frame = CGRectMake(_notificationImage.frame.origin.x + _notificationImage.frame.size.width + _homeMemberImage.frame.origin.x, _homeMemberImage.frame.origin.y, _sideBarImage.frame.size.width, _sideBarImage.frame.size.height);
    _searchPremiumImage.frame = CGRectMake(
                                           _searchImage.frame.origin.x+_searchImage.frame.size.width-_searchImage.frame.size.width,
                                           _searchImage.frame.origin.y-_searchImage.frame.size.height+_searchImage.frame.size.height,
                                           _searchImage.frame.size.width, _searchImage.frame.size.height);
    _activityImage.frame = CGRectMake(_calendarImage.frame.origin.x + _calendarImage.frame.size.width + _homeMemberImage.frame.origin.x, _calendarImage.frame.origin.y + (_notificationImage.frame.size.height*0.5 - (_notificationImage.frame.size.height*1)*0.5), _notificationImage.frame.size.width*1, _notificationImage.frame.size.height*1);
    _activityPremiumImage.frame = CGRectMake(
                                             _activityImage.frame.origin.x+_activityImage.frame.size.width-_activityImage.frame.size.width,
                                             _activityImage.frame.origin.y-_activityImage.frame.size.height+_activityImage.frame.size.height,
                                             _activityImage.frame.size.width, _activityImage.frame.size.height);
    
    
    
    _settingsImage.frame = CGRectMake(width - _sideBarImage.frame.size.width - _homeMemberImage.frame.origin.x, _homeMemberImage.frame.origin.y, _sideBarImage.frame.size.width, _sideBarImage.frame.size.height);
    
    
    
    _searchImage.hidden = YES;
    searchOverlayView.hidden = YES;
    _searchPremiumImage.hidden = YES;
    _activityPremiumImage.hidden = YES;
    
    
    
    homeMembersOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_homeMemberImage.frame.origin.x - 10, _homeMemberImage.frame.origin.y - 10, _homeMemberImage.frame.size.width + 20, _homeMemberImage.frame.size.height + 20)];
    [_sideBarView addSubview:homeMembersOverlayView];
    
    notificationsOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_notificationImage.frame.origin.x - 10, _notificationImage.frame.origin.y - 10, _notificationImage.frame.size.width + 20, _notificationImage.frame.size.height + 20)];
    [_sideBarView addSubview:notificationsOverlayView];
    
    calendarOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_calendarImage.frame.origin.x - 10, _calendarImage.frame.origin.y - 10, _calendarImage.frame.size.width + 20, _calendarImage.frame.size.height + 20)];
    [_sideBarView addSubview:calendarOverlayView];
    
    searchOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_searchImage.frame.origin.x - 10, _searchImage.frame.origin.y - 10, _searchImage.frame.size.width + 20, _searchImage.frame.size.height + 20)];
    [_sideBarView addSubview:searchOverlayView];
    
    activityhOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_activityImage.frame.origin.x - 10, _activityImage.frame.origin.y - 10, _activityImage.frame.size.width + 20, _activityImage.frame.size.height + 20)];
    [_sideBarView addSubview:activityhOverlayView];
    
    settingsOverlayView = [[UIView alloc] initWithFrame:CGRectMake(_settingsImage.frame.origin.x - 10, _settingsImage.frame.origin.y - 10, _settingsImage.frame.size.width + 20, _settingsImage.frame.size.height + 20)];
    [_sideBarView addSubview:settingsOverlayView];
    _activityImage.image = [UIImage imageNamed:@"SideBarIcons.Ellipsis"];
    
    [self TapGestures];
    
    
    
    UIButton *activityImageOverlay = [[UIButton alloc] init];
    [[_activityImage superview] addSubview:activityImageOverlay];
    activityImageOverlay.frame = CGRectMake(_activityImage.frame.origin.x - 10, _activityImage.frame.origin.y - 10, _activityImage.frame.size.width + 20, _activityImage.frame.size.height + 20);
    [activityImageOverlay setTitle:@"" forState:UIControlStateNormal];
    activityImageOverlay.userInteractionEnabled = YES;
    
    
    
    _sideBarAddView.frame = CGRectMake(width*0.5 - ((width*0.9)*0.5), height - (height*0.05978261 > 44?(44):height*0.05978261) - bottomPadding, width*0.9, (height*0.05978261 > 44?(44):height*0.05978261));
    
    _sideBarTableView.frame = CGRectMake(0, _homeMemberImage.frame.origin.y + _homeMemberImage.frame.size.height + (height*0.01086 > 8?(8):height*0.01086), width, height - (_homeMemberImage.frame.origin.y + _homeMemberImage.frame.size.height + (height*0.01086 > 8?(8):height*0.01086)) - (height - _sideBarAddView.frame.origin.y));
    
    
    
    width = CGRectGetWidth(self.sideBarAddView.bounds);
    height = CGRectGetHeight(self.sideBarAddView.bounds);
    
    
    _sideBarAddImage.frame = CGRectMake((height*0.27273 > 12?(12):height*0.27273), height*0.5 - ((height*0.45455 > 20?(20):height*0.45455)*0.5), (height*0.45455 > 20?(20):height*0.45455), (height*0.45455 > 20?(20):height*0.45455));
    _sideBarAddLabel.frame = CGRectMake(_sideBarAddImage.frame.origin.x + _sideBarAddImage.frame.size.width + (height*0.27273 > 12?(12):height*0.27273), 0, width - (_sideBarAddImage.frame.origin.x + _sideBarAddImage.frame.size.width + (height*0.27273 > 12?(12):height*0.27273)) - (height*0.27273 > 12?(12):height*0.27273), height);
    
    
    _sideBarAddLabel.font = [UIFont systemFontOfSize:_sideBarAddLabel.frame.size.height*0.31818 weight:UIFontWeightSemibold];
    
    
    [self SetUpSideBarEllipsisContextMenu:activityImageOverlay];
    
}

-(void)GenerateTabBarView:(CGFloat)width height:(CGFloat)height bottomPadding:(CGFloat)bottomPadding {
    
    _tabBarView.frame = CGRectMake(0, height - (bottomPadding*0.5) - height*0.06657609, width, height*0.06657609 + (bottomPadding*0.5));
    
    _tabBarView.layer.borderWidth = 0.0;
    _tabBarView.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
    _tabBarView.layer.shadowRadius = 10;
    _tabBarView.layer.shadowOpacity = 1.0;
    _tabBarView.layer.shadowOffset = CGSizeMake(0, 0);
    
    
    
    
    width = CGRectGetWidth(_tabBarView.bounds);
    height = CGRectGetHeight(_tabBarView.bounds);
    
    _addTaskButton.frame = CGRectMake(width*0.5 - ((width*0.133)*0.5), 0 - ((width*0.133)*0.25), (width*0.133), (width*0.133));
    _addTaskButtonImage.frame = CGRectMake(_addTaskButton.frame.origin.x + (_addTaskButton.frame.size.width*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), _addTaskButton.frame.origin.y + (_addTaskButton.frame.size.height*0.5 - ((_addTaskButton.frame.size.width*0.412)*0.5)), (_addTaskButton.frame.size.width*0.412), (_addTaskButton.frame.size.width*0.412));
    
    _addTaskButton.layer.borderWidth = 0.0;
    _addTaskButton.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
    _addTaskButton.layer.shadowRadius = 3;
    _addTaskButton.layer.shadowOpacity = 1.0;
    _addTaskButton.layer.shadowOffset = CGSizeMake(0, 0);
    _addTaskButton.layer.cornerRadius = _addTaskButton.frame.size.height/2;
    
    CAGradientLayer *viewLayer = [CAGradientLayer layer];
    viewLayer = [CAGradientLayer layer];
    [viewLayer setFrame:_addTaskButton.bounds];
    [_addTaskButton.layer insertSublayer:viewLayer atIndex:0];
    [_addTaskButton.layer addSublayer:viewLayer];
    
    
    
    _choreIconImage.frame = CGRectMake(_addTaskButton.frame.origin.x*0.3 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
    _choreIconLabel.frame = CGRectMake(_choreIconImage.frame.origin.x - 50 + ((_choreIconImage.frame.size.width)*0.5), _choreIconImage.frame.origin.y + _choreIconImage.frame.size.height + 2.33, 100, ((_choreIconImage.frame.size.width)*0.325));
    
    _choreIconTapView.frame = CGRectMake(_choreIconImage.frame.origin.x - (((width*0.09661836))*0.5), _choreIconImage.frame.origin.y - (((width*0.09661836))*0.5), _choreIconImage.frame.size.width + (width*0.09661836), _choreIconImage.frame.size.height + (width*0.09661836));
    
    _expenseIconImage.frame = CGRectMake(_addTaskButton.frame.origin.x*0.7 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
    _expenseLabelImage.frame = CGRectMake(_expenseIconImage.frame.origin.x - 50 + ((_expenseIconImage.frame.size.width)*0.5), _expenseIconImage.frame.origin.y + _expenseIconImage.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
    
    _expenseIconTapView.frame = CGRectMake(_expenseIconImage.frame.origin.x - (((width*0.09661836))*0.5), _expenseIconImage.frame.origin.y - (((width*0.09661836))*0.5), _expenseIconImage.frame.size.width + (width*0.09661836), _expenseIconImage.frame.size.height + (width*0.09661836));
    
    _listsIconImage.frame = CGRectMake(width - _addTaskButton.frame.origin.x*0.7 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
    _listsLabelImage.frame = CGRectMake(_listsIconImage.frame.origin.x - 50 + ((_listsIconImage.frame.size.width)*0.5), _listsIconImage.frame.origin.y + _listsIconImage.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
    
    _listsIconTapView.frame = CGRectMake(_listsIconImage.frame.origin.x - (((width*0.09661836))*0.5), _listsIconImage.frame.origin.y - (((width*0.09661836))*0.5), _listsIconImage.frame.size.width + (width*0.09661836), _listsIconImage.frame.size.height + (width*0.09661836));
    
    _chatsIconImage.frame = CGRectMake(width - _addTaskButton.frame.origin.x*0.3 - ((width*0.09661836)*0.5), height*0.142857, width*0.09661836, ((width*0.09661836)*0.5625));
    _chatsLabelImage.frame = CGRectMake(_chatsIconImage.frame.origin.x - 50 + ((_chatsIconImage.frame.size.width)*0.5), _chatsIconImage.frame.origin.y + _chatsIconImage.frame.size.height + 2.33, 100, ((width*0.09661836)*0.325));
    
    _chatsIconTapView.frame = CGRectMake(_chatsIconImage.frame.origin.x - (((width*0.09661836))*0.5), _chatsIconImage.frame.origin.y - (((width*0.09661836))*0.5), _chatsIconImage.frame.size.width + (width*0.09661836), _chatsIconImage.frame.size.height + (width*0.09661836));
    
    
    
    [self AdjustTabBarFrame];
    
    
    
    _addTaskView.frame = CGRectMake(width - (width*0.133) - (width*0.02898551 > 12?(12):width*0.02898551), _tabBarView.frame.origin.y - (width*0.133) - (width*0.02898551 > 12?(12):width*0.02898551), (width*0.133), (width*0.133));
    
    
    
    _addTaskView.layer.borderWidth = 0.0;
    _addTaskView.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
    _addTaskView.layer.shadowRadius = 3;
    _addTaskView.layer.shadowOpacity = 1.0;
    _addTaskView.layer.shadowOffset = CGSizeMake(0, 0);
    _addTaskView.layer.cornerRadius = _addTaskView.frame.size.height/2;
    
    
    
    viewLayer = [CAGradientLayer layer];
    viewLayer = [CAGradientLayer layer];
    [viewLayer setFrame:_addTaskView.bounds];
    [_addTaskView.layer insertSublayer:viewLayer atIndex:0];
    [_addTaskView.layer addSublayer:viewLayer];
    _addTaskButton.backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    
}

-(void)GenerateBottomOptionsView:(CGFloat)width height:(CGFloat)height bottomPadding:(CGFloat)bottomPadding {
    
    _bottomOptionsView.frame = CGRectMake(0, height - (bottomPadding*0.5) - (height*0.06793 > 50?(50):height*0.06793), width, (height*0.06793 > 50?(50):height*0.06793) + (bottomPadding*0.5));
    _bottomOptionsView.alpha = 0.0f;
    
    _bottomOptionsView.layer.borderWidth = 0.0;
    _bottomOptionsView.layer.shadowColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeShadow].CGColor : [[[LightDarkModeObject alloc] init] LightModeShadow].CGColor;
    _bottomOptionsView.layer.shadowRadius = 10;
    _bottomOptionsView.layer.shadowOpacity = 1.0;
    _bottomOptionsView.layer.shadowOffset = CGSizeMake(0, 0);
    
    width = CGRectGetWidth(_bottomOptionsView.bounds);
    height = CGRectGetHeight(_bottomOptionsView.bounds);
    //67 (iPhone 13 Pro Max)
    
    CGFloat iconHeight = (height*0.36 > 18?(18):height*0.36);
    
    _bottomOptionsPinImage.alpha = 0.0f;
    _bottomOptionsFolderImage.alpha = 0.0f;
    _bottomOptionsMoveToTrashImage.alpha = 0.0f;
    _bottomOptionsEllipsisImage.alpha = 0.0f;
    _bottomOptionsMoveOutOfTrashImage.alpha = 0.0f;
    _bottomOptionsDeleteTrashImage.alpha = 0.0f;
    
    _bottomOptionsPinImage.frame = CGRectMake((width*0.125) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    _bottomOptionsFolderImage.frame = CGRectMake((width*0.375) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    _bottomOptionsMoveToTrashImage.frame = CGRectMake((width*0.625) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    _bottomOptionsEllipsisImage.frame = CGRectMake((width*0.875) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    _bottomOptionsMoveOutOfTrashImage.frame = CGRectMake((width*0.25) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    _bottomOptionsDeleteTrashImage.frame = CGRectMake((width*0.75) - (iconHeight*0.5), (height*0.34 > 17?(17):height*0.34), iconHeight, iconHeight);
    
    _bottomOptionsPinImageOverlay.frame = CGRectMake(_bottomOptionsPinImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsPinImage.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    _bottomOptionsFolderImageOverlay.frame = CGRectMake(_bottomOptionsFolderImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsFolderImage.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    _bottomOptionsMoveToTrashImageOverlay.frame = CGRectMake(_bottomOptionsMoveToTrashImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsMoveToTrashImage.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    _bottomOptionsEllipsisImageOverlay.frame = CGRectMake(_bottomOptionsEllipsisImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsView.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    _bottomOptionsMoveOutOfTrashImageOverlay.frame = CGRectMake(_bottomOptionsMoveOutOfTrashImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsMoveOutOfTrashImage.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    _bottomOptionsDeleteTrashImageOverlay.frame = CGRectMake(_bottomOptionsDeleteTrashImage.frame.origin.x - _bottomOptionsView.frame.size.height*0.5, 0, _bottomOptionsDeleteTrashImage.frame.size.width + _bottomOptionsView.frame.size.height, _bottomOptionsView.frame.size.height);
    
}

-(void)GenerateUnreadActivityView:(CGFloat)width height:(CGFloat)height {
    
    int customCount = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityCount"]) {
        customCount = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"UnreadActivityCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", customCount] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", customCount] length] - 1));
    }
    
    if (customCount > 0) {
        self->_unreadActivityView.hidden = NO;
        self->_unreadActivityLabel.hidden = NO;
    } else {
        self->_unreadActivityView.hidden = YES;
        self->_unreadActivityLabel.hidden = YES;
    }
    self->_unreadActivityLabel.hidden = YES;
    self->_unreadActivityView.hidden = YES;
    
    _unreadActivityView.frame = CGRectMake(_activityImage.frame.origin.x + _activityImage.frame.size.width - ((self.view.frame.size.width*0.01932367)*0.67), _activityImage.frame.origin.y - ((self.view.frame.size.width*0.01932367)*0.167), self.view.frame.size.width*0.01932367, self.view.frame.size.width*0.01932367);
    _unreadActivityView.layer.cornerRadius = _unreadActivityView.frame.size.height/2;
    
    width = CGRectGetWidth(self.unreadActivityView.bounds);
    height = CGRectGetHeight(self.unreadActivityView.bounds);
    
    
    _unreadActivityLabel.frame = CGRectMake(0, 0, width, height);
    _unreadActivityLabel.font = [UIFont systemFontOfSize:width*0.62857143 weight:UIFontWeightSemibold];
    _unreadActivityLabel.adjustsFontSizeToFitWidth = YES;
    
}

-(void)GeneratePendingInvitesView:(CGFloat)width height:(CGFloat)height {
    
    int customCount = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"InvitiationViewCount"]) {
        customCount = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"InvitiationViewCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", customCount] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", customCount] length] - 1));
    }
    
    
    
    if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"SeenNoInvitationsPopup"] isEqualToString:@"Yes"] == NO) {
        
        _pendingInvitesView.frame = CGRectMake(_homeMemberImage.frame.origin.x + _homeMemberImage.frame.size.width - ((self.view.frame.size.width*0.02717391)*0.75), _homeMemberImage.frame.origin.y - ((self.view.frame.size.width*0.02717391)*0.25), self.view.frame.size.width*0.02717391, self.view.frame.size.width*0.02717391);
        _pendingInvitesLabel.hidden = YES;
        _pendingInvitesView.layer.cornerRadius = _pendingInvitesView.frame.size.height/2;
        
    } else {
        
        if (customCount > 0) {
            self->_pendingInvitesView.hidden = NO;
            self->_pendingInvitesLabel.hidden = NO;
        } else {
            self->_pendingInvitesView.hidden = YES;
            self->_pendingInvitesLabel.hidden = YES;
        }
        
        _pendingInvitesView.frame = CGRectMake(_homeMemberImage.frame.origin.x + _homeMemberImage.frame.size.width - ((self.view.frame.size.width*0.04227053)*0.67), _homeMemberImage.frame.origin.y - ((self.view.frame.size.width*0.04227053)*0.33), (self.view.frame.size.width*0.04227053)*multiple, self.view.frame.size.width*0.04227053);
        _pendingInvitesLabel.hidden = NO;
        _pendingInvitesView.layer.cornerRadius = _pendingInvitesView.frame.size.height/2;
        
    }
    
    width = CGRectGetWidth(self.pendingInvitesView.bounds);
    height = CGRectGetHeight(self.pendingInvitesView.bounds);
    
    
    _pendingInvitesLabel.frame = CGRectMake(0, 0, width, height);
    _pendingInvitesLabel.font = [UIFont systemFontOfSize:width*0.62857143 weight:UIFontWeightSemibold];
    _pendingInvitesLabel.adjustsFontSizeToFitWidth = YES;
    
    
}

-(void)GenerateUnreadNotificationsView:(CGFloat)width height:(CGFloat)height {
    
    int customCount = 0;
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationViewCount"]) {
        customCount = [[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"NotificationViewCount"]] intValue];
    }
    
    float multiple = 1.00;
    
    if ([[NSString stringWithFormat:@"%d", customCount] length] > 1.00) {
        multiple += (0.33 * ([[NSString stringWithFormat:@"%d", customCount] length] - 1));
    }
    
    if (customCount > 0) {
        self->_unreadNotificationsView.hidden = NO;
        self->_unreadNotificationsViewLabel.hidden = NO;
    } else {
        self->_unreadNotificationsView.hidden = YES;
        self->_unreadNotificationsViewLabel.hidden = YES;
    }
    
    _unreadNotificationsView.frame = CGRectMake(_notificationImage.frame.origin.x + _notificationImage.frame.size.width - ((self.view.frame.size.width*0.04227053)*0.67), _notificationImage.frame.origin.y - ((self.view.frame.size.width*0.04227053)*0.33), (self.view.frame.size.width*0.04227053)*multiple, self.view.frame.size.width*0.04227053);
    _unreadNotificationsView.layer.cornerRadius = _unreadNotificationsView.frame.size.height/2;
    
    width = CGRectGetWidth(self.unreadNotificationsView.bounds);
    height = CGRectGetHeight(self.unreadNotificationsView.bounds);
    
    
    _unreadNotificationsViewLabel.frame = CGRectMake(0, 0, width, height);
    _unreadNotificationsViewLabel.font = [UIFont systemFontOfSize:height*0.62857143 weight:UIFontWeightSemibold];
    _unreadNotificationsViewLabel.adjustsFontSizeToFitWidth = YES;
    
}

-(void)GenerateColorViews {
    
    if ([[[BoolDataObject alloc] init] DarkModeIsOn]) {
        
        self.view.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.sideBarView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.sideBarTableView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.statusBarOverView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        self.topView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        self.bottomOptionsView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        self.tabBarView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        self.separatorView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTextSecondary];
        self.emptyTableViewBodyLabel.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.emptyTableViewTitleLabel.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextSecondary];
        self.middleLabel.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.notificationReminderView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        self.notificationitemReminderLabel.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        
        self.requestFeedbackBackdropView.backgroundColor = [UIColor colorWithRed:255.0f/255.0f green:255.0f/255.0f blue:255.0f/255.0f alpha:0.1f];
        self.requestFeedbackAlertView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModePrimary];
        self.requestFeedbackAlertViewQuestionLabel1.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.requestFeedbackAlertViewQuestionLabel2.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.requestFeedbackAlertViewQuestionLabel3.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.requestFeedbackAlertViewThankYouLabel.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.requestFeedbackAlertViewNotesView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.requestFeedbackAlertViewNotesTextView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.requestFeedbackAlertViewNotesTextView.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextSecondary];
        
        self.reportCrashBackdropView.backgroundColor = [UIColor colorWithRed:255.0f/255.0f green:255.0f/255.0f blue:255.0f/255.0f alpha:0.1f];
        self.reportCrashAlertView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModePrimary];
        self.reportCrashAlertViewQuestionLabel1.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextPrimary];
        self.reportCrashAlertViewNotesView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.reportCrashAlertViewNotesTextView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeSecondary];
        self.reportCrashAlertViewNotesTextView.textColor = [[[LightDarkModeObject alloc] init] DarkModeTextSecondary];
        
        [self preferredStatusBarStyle];
        
        _statusBarOverView.backgroundColor = [[[LightDarkModeObject alloc] init] DarkModeTertiary];
        
    } else {
        
        self.view.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.sideBarView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.sideBarTableView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.statusBarOverView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.topView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.bottomOptionsView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.tabBarView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.separatorView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        //        self.emptyTableViewLabel.textColor = [[[LightDarkModeObject alloc] init] LightModeTextMainImage];
        //        self.emptyTableViewSubLabel.textColor = [[[LightDarkModeObject alloc] init] LightModeTextHiddenLabel];
        self.middleLabel.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.notificationReminderView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.notificationitemReminderLabel.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        
        self.requestFeedbackBackdropView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeBackDrop];
        self.requestFeedbackAlertView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.requestFeedbackAlertViewQuestionLabel1.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.requestFeedbackAlertViewQuestionLabel2.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.requestFeedbackAlertViewQuestionLabel3.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.requestFeedbackAlertViewThankYouLabel.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.requestFeedbackAlertViewNotesView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.requestFeedbackAlertViewNotesTextView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.requestFeedbackAlertViewNotesTextView.textColor = [[[LightDarkModeObject alloc] init] LightModeTextSecondary];
        
        self.reportCrashBackdropView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeBackDrop];
        self.reportCrashAlertView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModeSecondary];
        self.reportCrashAlertViewQuestionLabel1.textColor = [[[LightDarkModeObject alloc] init] LightModeTextPrimary];
        self.reportCrashAlertViewNotesView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.reportCrashAlertViewNotesTextView.backgroundColor = [[[LightDarkModeObject alloc] init] LightModePrimary];
        self.reportCrashAlertViewNotesTextView.textColor = [[[LightDarkModeObject alloc] init] LightModeTextSecondary];
        
        [self preferredStatusBarStyle];
        
        _statusBarOverView.backgroundColor =[[[LightDarkModeObject alloc] init] LightModeSecondary];
        
    }
    
}

#pragma mark

-(void)GenerateCrashAlertView:(CGFloat)width height:(CGFloat)height bottomPadding:(CGFloat)bottomPadding {
    
    _reportCrashAlertViewScrollView.frame = CGRectMake(0, 0, width, height);
    _reportCrashAlertViewScrollView.contentSize = CGSizeMake(width*3, height);
    _reportCrashAlertViewScrollView.delegate = self;
    
    
    
    _reportCrashBackdropView.frame = CGRectMake(0, 0, width, height);
    _reportCrashBackdropView.alpha = 0.0;
    
    
    
    _reportCrashAlertViewScrollView.frame = CGRectMake(0, 0, width, height);
    _reportCrashAlertViewScrollView.contentSize = CGSizeMake(width*3, height);
    _reportCrashAlertViewScrollView.delegate = self;
    
    
    
    CGFloat convertedAlertViewHeight = height*0.37771739;
    
    CGFloat questionLabelHeight = (convertedAlertViewHeight*0.1294964);
    CGFloat spacing = (width*0.06038647);
    CGFloat spacingNo1 = convertedAlertViewHeight*0.03597122;
    CGFloat nextButtonHeight = ((convertedAlertViewHeight*0.1618705) > 45?(45):(convertedAlertViewHeight*0.1618705));
    CGFloat circleButtonHeight = ((convertedAlertViewHeight*0.17985612) > 50?(50):(convertedAlertViewHeight*0.17985612));
    CGFloat alertViewHeight = (((((height*0.1) > 20?(20):(height*0.1))*0.1)*2) + questionLabelHeight + spacing + circleButtonHeight + spacingNo1 + circleButtonHeight + spacing + nextButtonHeight);
    
    
    
    _reportCrashAlertView.frame = CGRectMake(0, height, width, alertViewHeight + bottomPadding);
    
    
    
    
    width = CGRectGetWidth(self.requestFeedbackAlertView.bounds);
    height = CGRectGetHeight(self.requestFeedbackAlertView.bounds);
    
    _reportCrashAlertViewXIcon1.frame = CGRectMake(width - ((height*0.1) > 20?(20):(height*0.1)) - height*0.1, height*0.1, ((height*0.1) > 20?(20):(height*0.1)), ((height*0.1) > 20?(20):(height*0.1)));
    _reportCrashAlertViewXIcon1Cover.frame = CGRectMake(_reportCrashAlertViewXIcon1.frame.origin.x - height*0.1, _reportCrashAlertViewXIcon1.frame.origin.y - height*0.1, _reportCrashAlertViewXIcon1.frame.size.width + ((height*0.1)*2), _reportCrashAlertViewXIcon1.frame.size.height + ((height*0.1)*2));
    
    _reportCrashAlertViewQuestionLabel1.frame = CGRectMake(width*0.5 - (width*0.06038647), _reportCrashAlertViewXIcon1.frame.origin.y, width - ((_reportCrashAlertViewXIcon1.frame.size.width + height*0.1 + height*0.1)*2), questionLabelHeight);
    _reportCrashAlertViewQuestionLabel1.font = [UIFont systemFontOfSize:((height*0.1) > 20?(20):(height*0.1))*0.71 weight:UIFontWeightHeavy];
    _reportCrashAlertViewQuestionLabel1.textColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTexCompletedLabel];
    
    CGRect newRect = _reportCrashAlertViewQuestionLabel1.frame;
    newRect.origin.x = width*0.125;
    newRect.size.width = width*0.75;
    _reportCrashAlertViewQuestionLabel1.frame = newRect;
    
    
    
    _reportCrashAlertViewNotesView.frame = CGRectMake(_reportCrashAlertViewQuestionLabel1.frame.origin.x, _reportCrashAlertViewQuestionLabel1.frame.origin.y + _reportCrashAlertViewQuestionLabel1.frame.size.height + spacing, _reportCrashAlertViewQuestionLabel1.frame.size.width, circleButtonHeight*2 + (convertedAlertViewHeight*0.02877698));
    _reportCrashAlertViewNotesView.layer.cornerRadius = 7;
    
    
    
    
    _reportCrashAlertViewSubmitButtonLabel1.frame = CGRectMake((width*0.09661836), _reportCrashAlertViewQuestionLabel1.frame.origin.y + _reportCrashAlertViewQuestionLabel1.frame.size.height + spacing + circleButtonHeight + spacingNo1 + circleButtonHeight + (width*0.06038647), width - ((width*0.09661836)*2), nextButtonHeight);
    _reportCrashAlertViewSubmitButtonLabel1.clipsToBounds = YES;
    _reportCrashAlertViewSubmitButtonLabel1.layer.cornerRadius = 7;
    
    
    
    width = CGRectGetWidth(self.reportCrashAlertViewNotesView.bounds);
    height = CGRectGetHeight(self.reportCrashAlertViewNotesView.bounds);
    
    _reportCrashAlertViewNotesTextView.frame = CGRectMake((convertedAlertViewHeight*0.02877698), (convertedAlertViewHeight*0.02877698), width-((convertedAlertViewHeight*0.02877698)*2), height-((convertedAlertViewHeight*0.02877698)*2));
    
    UIBezierPath *maskPath1 = [UIBezierPath bezierPathWithRoundedRect:self.reportCrashAlertView.bounds byRoundingCorners:(UIRectCornerTopLeft | UIRectCornerTopRight) cornerRadii:CGSizeMake(_reportCrashAlertView.frame.size.height*0.15, _reportCrashAlertView.frame.size.height*0.15)];
    
    CAShapeLayer *maskLayer1 = [[CAShapeLayer alloc] init];
    maskLayer1.frame = self.reportCrashAlertView.bounds;
    maskLayer1.path  = maskPath1.CGPath;
    self.reportCrashAlertView.layer.mask = maskLayer1;
    
}

-(void)GenerateFeedbackAlertView:(CGFloat)width height:(CGFloat)height bottomPadding:(CGFloat)bottomPadding {
    
    _requestFeedbackAlertViewScrollView.frame = CGRectMake(0, 0, width, height);
    _requestFeedbackAlertViewScrollView.contentSize = CGSizeMake(width*3, height);
    _requestFeedbackAlertViewScrollView.delegate = self;
    
    
    
    _requestFeedbackBackdropView.frame = CGRectMake(0, 0, width, height);
    _requestFeedbackBackdropView.alpha = 0.0;
    
    
    
    CGFloat convertedAlertViewHeight = height*0.37771739;
    
    CGFloat questionLabelHeight = (convertedAlertViewHeight*0.1294964);
    CGFloat spacing = (width*0.06038647);
    CGFloat spacingNo1 = convertedAlertViewHeight*0.03597122;
    CGFloat nextButtonHeight = ((convertedAlertViewHeight*0.1618705) > 45?(45):(convertedAlertViewHeight*0.1618705));
    CGFloat circleButtonHeight = ((convertedAlertViewHeight*0.17985612) > 50?(50):(convertedAlertViewHeight*0.17985612));
    CGFloat alertViewHeight = (((((height*0.1) > 20?(20):(height*0.1))*0.1)*2) + questionLabelHeight + spacing + circleButtonHeight + spacingNo1 + circleButtonHeight + spacing + nextButtonHeight);
    
    
    
    
    _requestFeedbackAlertView.frame = CGRectMake(0, height, width, alertViewHeight + bottomPadding);
    
    
    
    
    width = CGRectGetWidth(self.requestFeedbackAlertView.bounds);
    height = CGRectGetHeight(self.requestFeedbackAlertView.bounds);
    
    
    
    _requestFeedbackAlertViewXIcon1.frame = CGRectMake(width - ((height*0.1) > 20?(20):(height*0.1)) - height*0.1, height*0.1, ((height*0.1) > 20?(20):(height*0.1)), ((height*0.1) > 20?(20):(height*0.1)));
    _requestFeedbackAlertViewXIcon2.frame = CGRectMake(width + (width - ((height*0.1) > 20?(20):(height*0.1)) - height*0.1), height*0.1, ((height*0.1) > 20?(20):(height*0.1)), ((height*0.1) > 20?(20):(height*0.1)));
    _requestFeedbackAlertViewXIcon3.frame = CGRectMake(width*2 + (width - ((height*0.1) > 20?(20):(height*0.1)) - height*0.1), height*0.1, ((height*0.1) > 20?(20):(height*0.1)), ((height*0.1) > 20?(20):(height*0.1)));
    
    
    
    _requestFeedbackAlertViewXIcon1Cover.frame = CGRectMake(_requestFeedbackAlertViewXIcon1.frame.origin.x - height*0.1, _requestFeedbackAlertViewXIcon1.frame.origin.y - height*0.1, _requestFeedbackAlertViewXIcon1.frame.size.width + ((height*0.1)*2), _requestFeedbackAlertViewXIcon1.frame.size.height + ((height*0.1)*2));
    _requestFeedbackAlertViewXIcon2Cover.frame = CGRectMake(_requestFeedbackAlertViewXIcon2.frame.origin.x - height*0.1, _requestFeedbackAlertViewXIcon2.frame.origin.y - height*0.1, _requestFeedbackAlertViewXIcon2.frame.size.width + ((height*0.1)*2), _requestFeedbackAlertViewXIcon1.frame.size.height + ((height*0.1)*2));
    _requestFeedbackAlertViewXIcon3Cover.frame = CGRectMake(_requestFeedbackAlertViewXIcon3.frame.origin.x - height*0.1, _requestFeedbackAlertViewXIcon3.frame.origin.y - height*0.1, _requestFeedbackAlertViewXIcon3.frame.size.width + ((height*0.1)*2), _requestFeedbackAlertViewXIcon1.frame.size.height + ((height*0.1)*2));
    
    
    
    _requestFeedbackAlertViewQuestionLabel1.frame = CGRectMake(width*0.5 - (width*0.06038647), _requestFeedbackAlertViewXIcon1.frame.origin.y, width - ((_requestFeedbackAlertViewXIcon1.frame.size.width + height*0.1 + height*0.1)*2), questionLabelHeight);
    _requestFeedbackAlertViewQuestionLabel1.font = [UIFont systemFontOfSize:((height*0.1) > 20?(20):(height*0.1))*0.71 weight:UIFontWeightHeavy];
    _requestFeedbackAlertViewQuestionLabel1.textColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTexCompletedLabel];
    
    
    
    _requestFeedbackAlertViewQuestionLabel2.frame = CGRectMake(width + (width*0.06038647), _requestFeedbackAlertViewXIcon1.frame.origin.y, width - ((width*0.09661836)*2), questionLabelHeight);
    _requestFeedbackAlertViewQuestionLabel2.font = [UIFont systemFontOfSize:((height*0.1) > 20?(20):(height*0.1))*0.71 weight:UIFontWeightHeavy];
    _requestFeedbackAlertViewQuestionLabel2.textColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTexCompletedLabel];
    
    
    
    _requestFeedbackAlertViewCheckmarkImage.frame = CGRectMake(width*2 + width*0.5 - ((((convertedAlertViewHeight*0.26978417) > 75?(75):(convertedAlertViewHeight*0.26978417)))*0.5), _requestFeedbackAlertViewXIcon1.frame.origin.y, ((convertedAlertViewHeight*0.26978417) > 75?(75):(convertedAlertViewHeight*0.26978417)), ((convertedAlertViewHeight*0.26978417) > 75?(75):(convertedAlertViewHeight*0.26978417)));
    
    
    
    _requestFeedbackAlertViewThankYouLabel.frame = CGRectMake(width*2, _requestFeedbackAlertViewCheckmarkImage.frame.origin.y + _requestFeedbackAlertViewCheckmarkImage.frame.size.height + (convertedAlertViewHeight*0.04316547), width, (convertedAlertViewHeight*0.10791367));
    _requestFeedbackAlertViewThankYouLabel.font = [UIFont systemFontOfSize:_requestFeedbackAlertViewThankYouLabel.frame.size.height*0.8333 weight:UIFontWeightMedium];
    
    
    
    _requestFeedbackAlertViewQuestionLabel3.frame = CGRectMake(width*2 + (width*0.06038647), _requestFeedbackAlertViewThankYouLabel.frame.origin.y + _requestFeedbackAlertViewThankYouLabel.frame.size.height + (convertedAlertViewHeight*0.04316547), width - ((width*0.09661836)*2), questionLabelHeight);
    _requestFeedbackAlertViewQuestionLabel3.font = [UIFont systemFontOfSize:((height*0.1) > 20?(20):(height*0.1))*0.71 weight:UIFontWeightBold];
    _requestFeedbackAlertViewQuestionLabel3.textColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTexCompletedLabel];
    
    
    
    _requestFeedbackAlertViewOption3.frame = CGRectMake(width*0.5 - (width*0.06038647), _requestFeedbackAlertViewQuestionLabel1.frame.origin.y + _requestFeedbackAlertViewQuestionLabel1.frame.size.height + spacing, circleButtonHeight, circleButtonHeight);
    _requestFeedbackAlertViewOption2.frame = CGRectMake(_requestFeedbackAlertViewOption3.frame.origin.x - _requestFeedbackAlertViewOption3.frame.size.width - (height*0.0531401), _requestFeedbackAlertViewOption3.frame.origin.y, _requestFeedbackAlertViewOption3.frame.size.width, _requestFeedbackAlertViewOption3.frame.size.width);
    _requestFeedbackAlertViewOption1.frame = CGRectMake(_requestFeedbackAlertViewOption2.frame.origin.x - _requestFeedbackAlertViewOption3.frame.size.width - (height*0.0531401), _requestFeedbackAlertViewOption3.frame.origin.y, _requestFeedbackAlertViewOption3.frame.size.width, _requestFeedbackAlertViewOption3.frame.size.width);
    _requestFeedbackAlertViewOption4.frame = CGRectMake(_requestFeedbackAlertViewOption3.frame.origin.x + _requestFeedbackAlertViewOption3.frame.size.width + (height*0.0531401), _requestFeedbackAlertViewOption3.frame.origin.y, _requestFeedbackAlertViewOption3.frame.size.width, _requestFeedbackAlertViewOption3.frame.size.width);
    _requestFeedbackAlertViewOption5.frame = CGRectMake(_requestFeedbackAlertViewOption4.frame.origin.x + _requestFeedbackAlertViewOption4.frame.size.width + (height*0.0531401), _requestFeedbackAlertViewOption3.frame.origin.y, _requestFeedbackAlertViewOption3.frame.size.width, _requestFeedbackAlertViewOption3.frame.size.width);
    
    _requestFeedbackAlertViewOption6.frame = CGRectMake(_requestFeedbackAlertViewOption1.frame.origin.x, _requestFeedbackAlertViewOption1.frame.origin.y + _requestFeedbackAlertViewOption1.frame.size.height + spacingNo1, _requestFeedbackAlertViewOption1.frame.size.width, _requestFeedbackAlertViewOption1.frame.size.width);
    _requestFeedbackAlertViewOption7.frame = CGRectMake(_requestFeedbackAlertViewOption2.frame.origin.x, _requestFeedbackAlertViewOption6.frame.origin.y, _requestFeedbackAlertViewOption1.frame.size.width, _requestFeedbackAlertViewOption1.frame.size.width);
    _requestFeedbackAlertViewOption8.frame = CGRectMake(_requestFeedbackAlertViewOption3.frame.origin.x, _requestFeedbackAlertViewOption6.frame.origin.y, _requestFeedbackAlertViewOption1.frame.size.width, _requestFeedbackAlertViewOption1.frame.size.width);
    _requestFeedbackAlertViewOption9.frame = CGRectMake(_requestFeedbackAlertViewOption4.frame.origin.x, _requestFeedbackAlertViewOption6.frame.origin.y, _requestFeedbackAlertViewOption1.frame.size.width, _requestFeedbackAlertViewOption1.frame.size.width);
    _requestFeedbackAlertViewOption10.frame = CGRectMake(_requestFeedbackAlertViewOption5.frame.origin.x, _requestFeedbackAlertViewOption6.frame.origin.y, _requestFeedbackAlertViewOption1.frame.size.width, _requestFeedbackAlertViewOption1.frame.size.width);
    
    
    
    
    
    _requestFeedbackAlertViewOption1.layer.cornerRadius = _requestFeedbackAlertViewOption1.frame.size.height/2;
    _requestFeedbackAlertViewOption2.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption3.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption4.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption5.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption6.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption7.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption8.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption9.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    _requestFeedbackAlertViewOption10.layer.cornerRadius = _requestFeedbackAlertViewOption1.layer.cornerRadius;
    
    
    
    CGRect newRect = _requestFeedbackAlertViewQuestionLabel1.frame;
    newRect.origin.x = _requestFeedbackAlertViewOption1.frame.origin.x;
    newRect.size.width = width - _requestFeedbackAlertViewOption1.frame.origin.x - height*0.1 - height*0.1 - _requestFeedbackAlertViewXIcon1.frame.size.width;
    _requestFeedbackAlertViewQuestionLabel1.frame = newRect;
    
    newRect = _requestFeedbackAlertViewQuestionLabel2.frame;
    newRect.origin.x = width + _requestFeedbackAlertViewQuestionLabel1.frame.origin.x;
    newRect.size.width = width - (_requestFeedbackAlertViewQuestionLabel1.frame.origin.x*2);
    _requestFeedbackAlertViewQuestionLabel2.frame = newRect;
    
    newRect = _requestFeedbackAlertViewQuestionLabel3.frame;
    newRect.origin.x = width*2 + _requestFeedbackAlertViewQuestionLabel1.frame.origin.x;
    newRect.size.width = width - (_requestFeedbackAlertViewQuestionLabel1.frame.origin.x*2);
    _requestFeedbackAlertViewQuestionLabel3.frame = newRect;
    
    
    
    _requestFeedbackAlertViewNotesView.frame = CGRectMake(_requestFeedbackAlertViewQuestionLabel2.frame.origin.x, _requestFeedbackAlertViewOption3.frame.origin.y, _requestFeedbackAlertViewQuestionLabel2.frame.size.width, _requestFeedbackAlertViewOption3.frame.size.height*2 + (convertedAlertViewHeight*0.02877698));
    _requestFeedbackAlertViewNotesView.layer.cornerRadius = 7;
    
    
    
    _requestFeedbackAlertViewSubmitButtonLabel1.frame = CGRectMake((width*0.09661836), _requestFeedbackAlertViewOption6.frame.origin.y + _requestFeedbackAlertViewOption6.frame.size.height + (width*0.06038647), width - ((width*0.09661836)*2), nextButtonHeight);
    _requestFeedbackAlertViewSubmitButtonLabel1.clipsToBounds = YES;
    _requestFeedbackAlertViewSubmitButtonLabel1.layer.cornerRadius = 7;
    
    _requestFeedbackAlertViewSubmitButtonLabel2.frame = CGRectMake(width + (width*0.09661836), _requestFeedbackAlertViewOption6.frame.origin.y + _requestFeedbackAlertViewOption6.frame.size.height + (width*0.06038647), width - ((width*0.09661836)*2), nextButtonHeight);
    _requestFeedbackAlertViewSubmitButtonLabel2.clipsToBounds = YES;
    _requestFeedbackAlertViewSubmitButtonLabel2.layer.cornerRadius = 7;
    
    _requestFeedbackAlertViewRateOurAppButtonLabel.frame = CGRectMake(width*2 + (width*0.09661836), _requestFeedbackAlertViewOption6.frame.origin.y + _requestFeedbackAlertViewOption6.frame.size.height + (width*0.06038647), width - ((width*0.09661836)*2), nextButtonHeight);
    _requestFeedbackAlertViewRateOurAppButtonLabel.clipsToBounds = YES;
    _requestFeedbackAlertViewRateOurAppButtonLabel.layer.cornerRadius = 7;
    
    
    
    
    
    
    width = CGRectGetWidth(self.requestFeedbackAlertViewNotesView.bounds);
    height = CGRectGetHeight(self.requestFeedbackAlertViewNotesView.bounds);
    
    
    
    _requestFeedbackAlertViewNotesTextView.frame = CGRectMake((convertedAlertViewHeight*0.02877698), (convertedAlertViewHeight*0.02877698), width-((convertedAlertViewHeight*0.02877698)*2), height-((convertedAlertViewHeight*0.02877698)*2));
    
    
    
    
    
    
    width = CGRectGetWidth(self.requestFeedbackAlertViewOption1.bounds);
    height = CGRectGetHeight(self.requestFeedbackAlertViewOption1.bounds);
    
    _requestFeedbackAlertViewOptionLabel1.frame = CGRectMake(0, 0, width, height);
    _requestFeedbackAlertViewOptionLabel2.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel3.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel4.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel5.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel6.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel7.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel8.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel9.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    _requestFeedbackAlertViewOptionLabel10.frame = _requestFeedbackAlertViewOptionLabel1.frame;
    
    _requestFeedbackAlertViewOptionLabel1.font = [UIFont systemFontOfSize:18 weight:UIFontWeightSemibold];
    _requestFeedbackAlertViewOptionLabel2.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel3.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel4.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel5.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel6.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel7.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel8.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel9.font = _requestFeedbackAlertViewOptionLabel1.font;
    _requestFeedbackAlertViewOptionLabel10.font = _requestFeedbackAlertViewOptionLabel1.font;
    
    
    UIBezierPath *maskPath1 = [UIBezierPath bezierPathWithRoundedRect:self.requestFeedbackAlertView.bounds byRoundingCorners:(UIRectCornerTopLeft | UIRectCornerTopRight) cornerRadii:CGSizeMake(_requestFeedbackAlertView.frame.size.height*0.15, _requestFeedbackAlertView.frame.size.height*0.15)];
    
    CAShapeLayer *maskLayer1 = [[CAShapeLayer alloc] init];
    maskLayer1.frame = self.requestFeedbackAlertView.bounds;
    maskLayer1.path  = maskPath1.CGPath;
    self.requestFeedbackAlertView.layer.mask = maskLayer1;
    
    _requestFeedbackAlertViewSubmitButtonLabel1.backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    _requestFeedbackAlertViewSubmitButtonLabel2.backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    _requestFeedbackAlertViewRateOurAppButtonLabel.backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    
}

#pragma mark - UI Methods

-(void)SetUpSideBarEllipsisContextMenu:(UIButton *)activityImageOverlay {
    
    NSMutableArray *actions = [NSMutableArray array];
    
    [actions addObject:[UIAction actionWithTitle:@"Search" image:[UIImage systemImageNamed:@"magnifyingglass"] identifier:@"Search" handler:^(__kindof UIAction * _Nonnull action) {
        
        [self TapGesturePushToSearchViewController:self];
        
    }]];
    
    [actions addObject:[UIAction actionWithTitle:@"Activity" image:[[UIImage imageNamed:@"ViewTaskActivity"] imageWithTintColor:[UIColor blackColor] renderingMode:UIImageRenderingModeAlwaysOriginal] identifier:@"Activity" handler:^(__kindof UIAction * _Nonnull action) {
        
        //                        [UIImage imageNamed:@"ViewTaskActivity"] identifier:@"Activity" handler:^(__kindof UIAction * _Nonnull action) {
        
        [self TapGesturePushToViewActivityViewController:self];
        
    }]];
    
    //    [actions addObject:[UIAction actionWithTitle:@"Calendar" image:[UIImage systemImageNamed:@"calendar"] identifier:@"Calendar" handler:^(__kindof UIAction * _Nonnull action) {
    //
    //        [self TapGesturePushToViewCalendarViewController:self];
    //
    //    }]];
    
    [actions addObject:[UIAction actionWithTitle:@"Gifts" image:[UIImage systemImageNamed:@"gift"] identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
        [self TapGesturePushToViewPromoCodeViewController:self];
        
    }]];
    
    NSMutableArray *liveSupportActions = [NSMutableArray array];
    [liveSupportActions addObject:[UIAction actionWithTitle:@"Live Support" image:[UIImage systemImageNamed:@"bubble.left.and.bubble.right"] identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
        [self TapGesturePushToLiveSupportAction:self];
        
    }]];
    
    UIMenu *liveSupportMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Live Support" options:UIMenuOptionsDisplayInline children:liveSupportActions];
    //Post-Spike
    [actions addObject:liveSupportMenu];
    
    activityImageOverlay.showsMenuAsPrimaryAction = true;
    activityImageOverlay.menu = [UIMenu menuWithTitle:@"" children:actions];
    
}

-(void)GenerateSelectedUnselectedView:(BOOL)ShowSelected previousView:(UIView * _Nullable)previousView addTaskScrollViewIcon:(UIView *)addTaskScrollViewIcon addTaskSelectedView:(UIView *)addTaskSelectedView addTaskSelectedViewImageView:(UIImageView *)addTaskSelectedViewImageView addTaskSelectedViewLabel:(UILabel *)addTaskSelectedViewLabel addTaskSelectedViewXView:(UIView *)addTaskSelectedViewXView addTaskSelectedViewXImageView:(UIImageView *)addTaskSelectedViewXImageView labelText:(NSString *)labelText key:(NSString *)key {
    
    CGFloat iconHeight = (self.view.frame.size.height*0.02998501 > 20?20:(self.view.frame.size.height*0.02998501));
    CGFloat spacingNo1 = (self.view.frame.size.height*0.02317497 > 20?20:(self.view.frame.size.height*0.02317497));
    CGFloat spacingNo2 = 8;
    
    if (addTaskScrollViewIcon == _addTaskScrollViewPriorityIcon) {
        iconHeight = iconHeight*0.75;
    }
    
    CGFloat spacingToUse = spacingNo1;
    
    if ((previousView == _addTaskSelectedViewAssignedTo || previousView == _addTaskSelectedViewRepeats || previousView == _addTaskSelectedViewDueDate || previousView == _addTaskSelectedViewPriority ||previousView == _addTaskSelectedViewTakeTurns || previousView == _addTaskSelectedViewDays || previousView == _addTaskSelectedViewTime) && ShowSelected == YES) {
        spacingToUse = spacingNo2;
    }
    
    CGFloat xPos = previousView != nil ? previousView.frame.origin.x + previousView.frame.size.width + spacingToUse : 0;
    
    if (ShowSelected == YES) {
        
        addTaskSelectedView.hidden = NO;
        addTaskScrollViewIcon.hidden = YES;
        addTaskSelectedView.frame = CGRectMake(xPos, 0, 0, _addTaskOptionsScrollView.frame.size.height);
        
        [self GenerateSelectedViewFrame:addTaskSelectedView addTaskSelectedViewImageView:addTaskSelectedViewImageView addTaskSelectedViewLabel:addTaskSelectedViewLabel addTaskSelectedViewXView:addTaskSelectedViewXView addTaskSelectedViewXImageView:addTaskSelectedViewXImageView labelText:labelText key:key];
        
    } else {
        
        addTaskSelectedView.hidden = YES;
        addTaskScrollViewIcon.hidden = NO;
        
        addTaskScrollViewIcon.frame = CGRectMake(xPos, 0, iconHeight, _addTaskOptionsScrollView.frame.size.height);
        
    }
    
    CGFloat maxWidth = self.view.frame.size.width+1;
    CGFloat floatToUse = 0;
    
    if (_addTaskSelectedViewPriority.hidden == NO) {
        
        floatToUse = _addTaskSelectedViewPriority.frame.origin.x + _addTaskSelectedViewPriority.frame.size.width;
        
    } else {
        
        floatToUse = _addTaskScrollViewPriorityIcon.frame.origin.x + _addTaskScrollViewPriorityIcon.frame.size.width;
        
    }
    
    if (floatToUse < maxWidth) {
        floatToUse = maxWidth;
    }
    
    _addTaskOptionsScrollView.contentSize = CGSizeMake(floatToUse, 0);
    
    if (_addTaskSelectedViewTime.hidden == NO) {
        
        floatToUse = _addTaskSelectedViewTime.frame.origin.x + _addTaskSelectedViewTime.frame.size.width;
        
    } else {
        
        floatToUse = _addTaskScrollViewTimeIcon.frame.origin.x + _addTaskScrollViewTimeIcon.frame.size.width;
        
    }
    
    if (floatToUse < maxWidth) {
        floatToUse = maxWidth;
    }
    
    _addTaskOptionsScrollViewNo1.contentSize = CGSizeMake(floatToUse, 0);
    
}

-(void)GenerateSelectedViewFrame:(UIView *)addTaskSelectedView addTaskSelectedViewImageView:(UIImageView *)addTaskSelectedViewImageView addTaskSelectedViewLabel:(UILabel *)addTaskSelectedViewLabel addTaskSelectedViewXView:(UIView *)addTaskSelectedViewXView addTaskSelectedViewXImageView:(UIImageView *)addTaskSelectedViewXImageView labelText:(NSString *)labelText key:(NSString *)key {
    
    CGFloat firstWidth = (self.view.frame.size.height*0.01860465 > 8?8:(self.view.frame.size.height*0.01860465));
    CGFloat secondWidth = (self.view.frame.size.height*0.02325581 > 10?10:(self.view.frame.size.height*0.02325581));
    
    addTaskSelectedView.layer.cornerRadius = addTaskSelectedView.frame.size.height/2;
    
    CGFloat width = CGRectGetWidth(addTaskSelectedView.bounds);
    CGFloat height = CGRectGetHeight(addTaskSelectedView.bounds);
    
    CGFloat iconHeight = height;
    
    if (addTaskSelectedViewImageView == _addTaskSelectedViewImageViewPriority) {
        iconHeight = iconHeight*0.45;
    }
    
    addTaskSelectedViewImageView.frame = CGRectMake(secondWidth, height*0.5 - iconHeight*0.5, (firstWidth*2), iconHeight);
    addTaskSelectedViewLabel.frame = CGRectMake(addTaskSelectedViewImageView.frame.origin.x + addTaskSelectedViewImageView.frame.size.width + firstWidth, 0, 0, height);
    
    addTaskSelectedViewLabel.adjustsFontSizeToFitWidth = YES;
    addTaskSelectedViewLabel.textColor = [UIColor whiteColor];
    addTaskSelectedViewLabel.text = labelText;
    
    CGRect newRect = addTaskSelectedViewLabel.frame;
    newRect.size.width = [key isEqualToString:@"ItemTakeTurns"] || [key isEqualToString:@"ItemNotes"] || [key isEqualToString:@"ItemCostPerPerson"] ? 0 : [[[GeneralObject alloc] init] WidthOfString:addTaskSelectedViewLabel.text withFont:addTaskSelectedViewLabel.font];
    addTaskSelectedViewLabel.frame = newRect;
    
    addTaskSelectedViewXView.frame = CGRectMake(addTaskSelectedViewLabel.frame.origin.x + addTaskSelectedViewLabel.frame.size.width + firstWidth, height*0.5 - (firstWidth*2)*0.5, (firstWidth*2), (firstWidth*2));
    addTaskSelectedViewXView.layer.cornerRadius = addTaskSelectedViewXView.frame.size.height/2;
    
    newRect = addTaskSelectedView.frame;
    newRect.size.width = addTaskSelectedViewXView.frame.origin.x + addTaskSelectedViewXView.frame.size.width + secondWidth;
    addTaskSelectedView.frame = newRect;
    
    width = CGRectGetWidth(addTaskSelectedViewXView.bounds);
    height = CGRectGetHeight(addTaskSelectedViewXView.bounds);
    
    addTaskSelectedViewXImageView.frame = CGRectMake(width*0.5 - width*0.5*0.5, height*0.5 - height*0.5*0.5, width*0.5, height*0.5);
    
}


#pragma mark - UX Methods

#pragma mark General

-(NSMutableDictionary *)General_GenerateItemDictFomrNSUserDefaults {
    
    NSMutableDictionary *itemDict = [NSMutableDictionary dictionary];
    
    if ([self->itemType isEqualToString:@"Chore"]) {
        
        itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDict"] mutableCopy] : [NSMutableDictionary dictionary];
        
    } else if ([self->itemType isEqualToString:@"Expense"]) {
        
        itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo1"] mutableCopy] : [NSMutableDictionary dictionary];
        
    } else if ([self->itemType isEqualToString:@"List"]) {
        
        itemDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"TempItemDictNo2"] mutableCopy] : [NSMutableDictionary dictionary];
        
    }
    
    if (itemDict == nil) {
        
        itemDict = [NSMutableDictionary dictionary];
        
    }
    
    return itemDict;
}

-(NSUInteger)General_GenerateIndexOfItemInItemDict:(NSString *)itemUniqueID itemDict:(NSMutableDictionary *)itemDict {
    
    NSUInteger index = itemDict && itemDict[@"ItemUniqueID"] && [itemDict[@"ItemUniqueID"] containsObject:itemUniqueID] ? [itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID] : 1000;
    
    return index;
}

-(NSMutableDictionary *)General_GenerateSectionItemDict:(NSIndexPath *)indexPath {
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    NSMutableDictionary *dictToUse =
    ObjectIsKindOfClass == YES &&
    dataDisplayDict && [dataDisplaySectionsArray count] > indexPath.section && dataDisplayDict[dataDisplaySectionsArray[indexPath.section]] ?
    dataDisplayDict[dataDisplaySectionsArray[indexPath.section]] : [NSMutableDictionary dictionary];
    
    return dictToUse;
}

#pragma mark

-(void)General_GenerateItemsToDisplay:(void (^)(BOOL finished))finishBlock {
   
    [self GenerateItemsToDisplay:self->itemDict dataDisplaySectionsArrayToUse:self->dataDisplaySectionsArray dataDisplayDict:self->dataDisplayDict dataDisplayAmountDict:self->dataDisplayAmountDict itemTypeToUse:self->itemType keyArrayToUse:self->keyArray dateToCheck:@"" homeMembersDict:self->homeMembersDict taskListDict:self->taskListDict sectionDict:self->sectionDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:self->sideBarCategorySectionArrayOriginal currentItemDict:self->itemDict completionHandler:^(BOOL finished, NSMutableDictionary *returningItemDictToUse, NSMutableArray *returningDataDisplaySectionsArrayToUse, NSMutableDictionary *returningDataDisplayDict, NSMutableDictionary *returningDataDisplayAmountDict) {
        
        self->itemDict = [returningItemDictToUse mutableCopy];
        self->dataDisplaySectionsArray = [returningDataDisplaySectionsArrayToUse mutableCopy];
        self->dataDisplayDict = [returningDataDisplayDict mutableCopy];
        self->dataDisplayAmountDict = [returningDataDisplayAmountDict mutableCopy];
         NSLog(@"CompleteGenerateItemsToDisplay General_GenerateItemsToDisplay");
        [self CompleteGenerateItemsToDisplay];
       
        finishBlock(YES);
        
    }];
    
}

-(void)General_GenerateItemsToDisplay_Keep:(void (^)(BOOL finished))finishBlock {
    
    [self GenerateItemsToDisplay:self->itemDict dataDisplaySectionsArrayToUse:self->dataDisplaySectionsArray dataDisplayDict:self->dataDisplayDict dataDisplayAmountDict:self->dataDisplayAmountDict itemTypeToUse:self->itemType keyArrayToUse:self->keyArray dateToCheck:@"" homeMembersDict:self->homeMembersDict taskListDict:self->taskListDict sectionDict:self->sectionDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:self->sideBarCategorySectionArrayOriginal currentItemDict:self->itemDict completionHandler:^(BOOL finished, NSMutableDictionary *returningItemDictToUse, NSMutableArray *returningDataDisplaySectionsArrayToUse, NSMutableDictionary *returningDataDisplayDict, NSMutableDictionary *returningDataDisplayAmountDict) {
        
        self->itemDict = [returningItemDictToUse mutableCopy];
        self->dataDisplaySectionsArray = [returningDataDisplaySectionsArrayToUse mutableCopy];
        self->dataDisplayDict = [returningDataDisplayDict mutableCopy];
        self->dataDisplayAmountDict = [returningDataDisplayAmountDict mutableCopy];
        NSLog(@"CompleteGenerateItemsToDisplay General_GenerateItemsToDisplay_Keep");
        [self CompleteGenerateItemsToDisplay];
        
        finishBlock(YES);
        
    }];
    
}

-(void)General_GenerateItemsToDisplayInBackground:(void (^)(BOOL finished))finishBlock {
    
    [self GenerateItemsToDisplayInBackground:self->itemDict dataDisplaySectionsArrayToUse:self->dataDisplaySectionsArray dataDisplayDict:self->dataDisplayDict dataDisplayAmountDict:self->dataDisplayAmountDict itemTypeToUse:self->itemType keyArrayToUse:self->keyArray dateToCheck:@"" homeMembersDict:self->homeMembersDict taskListDict:self->taskListDict sectionDict:self->sectionDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered sideBarCategorySectionArrayOriginal:self->sideBarCategorySectionArrayOriginal currentItemDict:self->itemDict completionHandler:^(BOOL finished, NSMutableDictionary *returningItemDictToUse, NSMutableArray *returningDataDisplaySectionsArrayToUse, NSMutableDictionary *returningDataDisplayDict, NSMutableDictionary *returningDataDisplayAmountDict) {
        
        self->itemDict = [returningItemDictToUse mutableCopy];
        self->dataDisplaySectionsArray = [returningDataDisplaySectionsArrayToUse mutableCopy];
        self->dataDisplayDict = [returningDataDisplayDict mutableCopy];
        self->dataDisplayAmountDict = [returningDataDisplayAmountDict mutableCopy];
        
        [self CompleteGenerateItemsToDisplay];
        
        finishBlock(YES);
        
    }];
    
}

-(void)General_GenerateItemsToDisplayForSpecificItem:(NSDictionary *)userInfo completionHandler:(void (^)(BOOL finished))finishBlock {
    
    [[[DisplayTasksObject alloc] init] GenerateItemsToDisplayForSpecificItem:userInfo itemType:self->itemType keyArray:self->keyArray homeMembersDict:self->homeMembersDict sideBarCategorySectionArrayAltered:self->sideBarCategorySectionArrayAltered taskListDict:self->taskListDict dataDisplayDict:self->dataDisplayDict dataDisplaySectionsArray:self->dataDisplaySectionsArray dataDisplayAmountDict:self->dataDisplayAmountDict sectionDict:self->sectionDict pinnedDict:self->pinnedDict sideBarCategorySectionArrayOriginal:sideBarCategorySectionArrayOriginal sectionOriginalSection:sectionOriginalSection usersSection:usersSection tagsSection:tagsSection colorsSection:colorsSection completionHandler:^(BOOL finished, NSMutableArray * _Nonnull returningDataDisplaySectionsArray, NSMutableDictionary * _Nonnull returningDataDisplayDict, NSMutableDictionary * _Nonnull returningDataDisplayAmountDict) {
        
        self->dataDisplaySectionsArray = [returningDataDisplaySectionsArray mutableCopy];
        self->dataDisplayDict = [returningDataDisplayDict mutableCopy];
        self->dataDisplayAmountDict = [returningDataDisplayAmountDict mutableCopy];
       
        [self CompleteGenerateItemsToDisplay];
        
        finishBlock(YES);
        
    }];
    
}

#pragma mark

-(void)General_AddMultipleItemsInItemDict_CompletionBlock:(NSMutableDictionary *)allSetDataDict selectedItemsDict:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr Looping:(BOOL)Looping completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if (Looping == NO ||
        (Looping == YES && [[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[[selectedItemsDict allKeys] mutableCopy] objectArr:objectArr])) {
       
        [self AddMultipleItemsToItemDict:allSetDataDict];
        [self SelectDoneButtonAction:self];
        
        
        
        BOOL OnlyOneTaskIsBeingEdited = (Looping == NO || 
                                         (Looping == YES && [(NSArray *)allSetDataDict[@"ItemUniqueID"] count] == 1));
        
        if (OnlyOneTaskIsBeingEdited == YES) {
            
            for (NSString *itemUniqueID in allSetDataDict[@"ItemUniqueID"]) {
                
                NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
                NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:[self->itemDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
              
                [self General_GenerateItemsToDisplayForSpecificItem:singleObjectItemDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }
            
        } else {
            
            [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                
            }];
            
        }
        
        
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self CallPopupMethods];
            
        });
        
    }
    
}

-(void)General_RemoveMultipleItemsInItemDict_CompletionBlock:(NSMutableArray *)setDataArray itemUniqueID:(NSString *)itemUniqueID selectedItemsDict:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr Looping:(BOOL)Looping MoveToTrash:(BOOL)MoveToTrash MoveOutOfTrash:(BOOL)MoveOutOfTrash Waive:(BOOL)Waive Remove:(BOOL)Remove completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if ([setDataArray containsObject:itemUniqueID] == NO) {
        [setDataArray addObject:itemUniqueID];
    }
    
    if (Looping == NO ||
        (Looping == YES && [[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[[selectedItemsDict allKeys] mutableCopy] objectArr:objectArr])) {
       
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"SelectOptionActionSelected"];
            
            NSMutableDictionary *tempItemDict = [self->itemDict mutableCopy];
            
            [self RemoveMultipleItemsToItemDict:setDataArray MoveToTrash:MoveToTrash MoveOutOfTrash:MoveOutOfTrash Waive:Waive Remove:Remove];
            [self SelectDoneButtonAction:self];
           
            
            
            BOOL OnlyOneTaskIsBeingEdited = (Looping == NO || (Looping == YES && [setDataArray count] == 1));
            
            if (OnlyOneTaskIsBeingEdited == YES &&
                (MoveToTrash == NO && MoveOutOfTrash == NO && Waive == NO)) {
                
                for (NSString *itemUniqueID in setDataArray) {
                    
                    NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:tempItemDict];
                    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:tempItemDict keyArray:[tempItemDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
                    [singleObjectItemDict setObject:@"Yes" forKey:@"ItemDeleted"];
                   
                    [self General_GenerateItemsToDisplayForSpecificItem:singleObjectItemDict completionHandler:^(BOOL finished) {
                        
                    }];
                    
                }
                
            } else {
               
                [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                    
                }];
                
            }
            
        });
        
    }
    
}

-(void)General_UpdateMultipleItemsInItemDict_CompletionBlock:(NSMutableDictionary *)allSetDataDict returningDictToUse:(NSMutableDictionary *)returningDictToUse returningOccurrencesDictToUse:(NSMutableDictionary *)returningOccurrencesDictToUse returningUpdatedTaskListDictToUse:(NSMutableDictionary *)returningUpdatedTaskListDictToUse selectedItemsDict:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr Looping:(BOOL)Looping {
    
    for (NSString *key in [returningDictToUse allKeys]) {
        NSMutableArray *arr = allSetDataDict[key] ? [allSetDataDict[key] mutableCopy] : [NSMutableArray array];
        id object = returningDictToUse[key] ? returningDictToUse[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
        [arr addObject:object];
        [allSetDataDict setObject:arr forKey:key];
    }
    
    itemOccurrencesDict = [returningOccurrencesDictToUse mutableCopy];
    
    self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDict:@[returningUpdatedTaskListDictToUse] taskListDict:self->taskListDict];
    
   
    
    if (Looping == NO ||
        (Looping == YES && [[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[[selectedItemsDict allKeys] mutableCopy] objectArr:objectArr])) {
      
        [self ReplaceMultipleItemsToItemDict:allSetDataDict];
        [self SelectDoneButtonAction:self];
       
        
        
        BOOL OnlyOneTaskIsBeingEdited = (Looping == NO || 
                                         (Looping == YES && [(NSArray *)allSetDataDict[@"ItemUniqueID"] count] == 1));
        
        if (OnlyOneTaskIsBeingEdited == YES) {
            
            for (NSString *itemUniqueID in allSetDataDict[@"ItemUniqueID"]) {
               
                NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
                NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:[self->itemDict allKeys] indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
               
                [self General_GenerateItemsToDisplayForSpecificItem:singleObjectItemDict completionHandler:^(BOOL finished) {
                    
                }];
                
            }
            
        } else {
            
            [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                
            }];
            
        }
        
        
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self CallPopupMethods];
            
        });
        
    }
    
}

#pragma mark PastDueTaskContextMenu

-(UIAction *)TaskContextMenuUnlimitedAction {
    
    UIAction *unlimitedAction = [UIAction actionWithTitle:@"Unlimited" image:nil identifier:@"Unlimited" handler:^(__kindof UIAction * _Nonnull action) {
        
        NSMutableDictionary *dictToUse = self->dataDisplayDict[@"Past Due"] ? [self->dataDisplayDict[@"Past Due"] mutableCopy] : [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in dictToUse[@"ItemUniqueID"]) {
            
            if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                
                [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                
            }
            
        }
        
        
        NSString *collection = [NSString stringWithFormat:@"%@s", self->itemType];
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        NSMutableArray *objectArr = [NSMutableArray array];
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSString *itemID = self->itemDict[@"ItemID"] && [(NSArray *)self->itemDict[@"ItemID"] count] > index ? self->itemDict[@"ItemID"][index] : @"xxx";
            NSString *itemOccurrenceID = self->itemDict[@"ItemOccurrenceID"] && [(NSArray *)self->itemDict[@"ItemOccurrenceID"] count] > index ? self->itemDict[@"ItemOccurrenceID"][index] : @"xxx";
            
            NSMutableDictionary *itemOccurrencePastDue = [self GenerateUpdatedItemOccurrencePastDueDict:@"Unlimited" index:index];
            
            [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemOccurrencePastDue" : itemOccurrencePastDue} itemID:itemID itemOccurrenceID:itemOccurrenceID collection:collection homeID:homeID completionHandler:^(BOOL finished) {
                
                [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[@{@"ItemUniqueID" : itemUniqueID, @"ItemOccurrencePastDue" : itemOccurrencePastDue} mutableCopy] returningOccurrencesDictToUse:self->itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                
            }];
            
        }
        
    }];
    
    return unlimitedAction;
}

-(UIAction *)TaskContextMenuTimeAction:(NSString *)key {
    
    UIAction *timeAction = [UIAction actionWithTitle:[NSString stringWithFormat:@"Add %@", key] image:nil identifier:[NSString stringWithFormat:@"Add %@", key] handler:^(__kindof UIAction * _Nonnull action) {
        
        [self StartProgressView];
        
        NSMutableDictionary *dictToUse = self->dataDisplayDict[@"Past Due"] ? [self->dataDisplayDict[@"Past Due"] mutableCopy] : [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in dictToUse[@"ItemUniqueID"]) {
            
            if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                
                [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                
            }
            
        }
        
        
        NSString *collection = [NSString stringWithFormat:@"%@s", self->itemType];
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        NSMutableArray *objectArr = [NSMutableArray array];
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSString *itemID = self->itemDict[@"ItemID"] && [(NSArray *)self->itemDict[@"ItemID"] count] > index ? self->itemDict[@"ItemID"][index] : @"xxx";
            NSString *itemOccurrenceID = self->itemDict[@"ItemOccurrenceID"] && [(NSArray *)self->itemDict[@"ItemOccurrenceID"] count] > index ? self->itemDict[@"ItemOccurrenceID"][index] : @"xxx";
            
            NSMutableDictionary *itemOccurrencePastDue = [self GenerateUpdatedItemOccurrencePastDueDict:key index:index];
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemOccurrencePastDue" : itemOccurrencePastDue} itemID:itemID itemOccurrenceID:itemOccurrenceID collection:collection homeID:homeID completionHandler:^(BOOL finished) {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:[@{@"ItemUniqueID" : itemUniqueID, @"ItemOccurrencePastDue" : itemOccurrencePastDue} mutableCopy] returningOccurrencesDictToUse:self->itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }];
                
            });
            
        }
        
    }];
    
    return timeAction;
}

-(UIAction *)TaskContextMenuCustomAction {
    
    UIAction *customAction = [UIAction actionWithTitle:@"Custom" image:nil identifier:@"Custom" handler:^(__kindof UIAction * _Nonnull action) {
        
        [self PostponeTableViewSection:self];
        
    }];
    
    return customAction;
}

#pragma mark AddTask

-(BOOL)CheckForErrors {
    
    if ([itemType isEqualToString:@"Chore"]) {
        
        NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
        NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
        
        if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
            
            [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
            return YES;
            
        }
        
        
    } else if ([itemType isEqualToString:@"Expense"]) {
        
        NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
        NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
        NSString *trimmedStringItemAmount = [_addTaskItemAmountTextView.text stringByTrimmingCharactersInSet:charSet];
        
        if (([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) || ([trimmedStringItemAmount length] == 0 || [trimmedStringItemAmount isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]])) {
            
            if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
                [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
            }
            if ([trimmedStringItemAmount length] == 0 || [trimmedStringItemAmount isEqualToString:[NSString stringWithFormat:@"0%@00", localCurrencyDecimalSeparatorSymbol]]) {
                [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemAmountTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
            }
            
            return YES;
        }
        
    } else if ([itemType isEqualToString:@"List"]) {
        
        NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
        NSString *trimmedStringItemName = [_addTaskItemNameTextView.text stringByTrimmingCharactersInSet:charSet];
        NSString *trimmedStringItemListItems = [_addTaskItemListItemsTextView.text stringByTrimmingCharactersInSet:charSet];
        
        if (([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) || [[chosenItemListItems allKeys] count] == 0) {
            
            if ([trimmedStringItemName length] == 0 || [trimmedStringItemName isEqualToString:@"Name"]) {
                [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemNameTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
            }
            if ([trimmedStringItemListItems length] == 0 || [trimmedStringItemListItems isEqualToString:@"0 Items"]) {
                [[[GeneralObject alloc] init] TextFieldIsEmptyColorChange:_addTaskItemListItemsTextView textFieldField:nil textFieldShouldDisplay:YES defaultColor:[UIColor clearColor]];
            }
            
            return YES;
        }
        
    }
    
    return NO;
}

-(NSDictionary *)GenerateSetDataDict:(NSString *)itemNameLocal
                     itemAmountLocal:(NSString *)itemAmountLocal
                  itemListItemsLocal:(NSMutableDictionary *)itemListItemsLocal
                 itemAssignedToLocal:(NSMutableArray *)itemAssignedToLocal
   itemAssignedToNewHomeMembersLocal:(NSString *)itemAssignedToNewHomeMembersLocal
                    itemDueDateLocal:(NSString *)itemDueDateLocal
                    itemRepeatsLocal:(NSString *)itemRepeatsLocal
        itemRepeatIfCompletedEarlyLocal:(NSString *)itemRepeatIfCompletedEarlyLocal
           itemCompleteAsNeededLocal:(NSString *)itemCompleteAsNeededLocal
                  itemTakeTurnsLocal:(NSString *)itemTakeTurnsLocal
                       itemDaysLocal:(NSString *)itemDaysLocal
                       itemTimeLocal:(NSString *)itemTimeLocal
              itemRemindersDictLocal:(NSMutableDictionary *)itemRemindersDictLocal
                      itemNotesLocal:(NSString *)itemNotesLocal
                   itemPriorityLocal:(NSString *)itemPriorityLocal {
    
    BOOL TaskIsRepeatingDaily = [[[BoolDataObject alloc] init] TaskIsRepeatingDaily:[@{@"ItemRepeats" : itemRepeatsLocal} mutableCopy] itemType:itemType];
    
    
    
    
    //Item Type Is Chore, Expense, List
    NSMutableArray *itemAssignedTo = itemAssignedToLocal;
    
    
    
    
    //Item Type Is Chore or Expense
    NSMutableArray *itemSpecificDueDates = [NSMutableArray array];
    NSString *itemApprovalNeeded = @"No";
    NSMutableDictionary *itemApprovalRequests = [NSMutableDictionary dictionary];
    
    
    
    
    //Item Type Is Chore
    NSString *itemCompletedBy = @"Everyone";
    NSMutableDictionary *itemSubTasks = [NSMutableDictionary dictionary];
    
    
    
    
    //Item Type Is Chore, Expense, List
    NSString *itemUniqueID = chosenItemUniqueID;
    NSString *itemID = chosenItemID;
    NSString *itemHomeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
    NSString *itemOccurrenceStatus = @"None";
    NSString *itemCreatedBy = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"];
    NSString *itemDatePosted = chosenItemDatePosted;
    NSString *itemName = itemNameLocal;
    NSString *itemAssignedToNewHomeMembers = itemAssignedToNewHomeMembersLocal;
    NSString *itemAssignedToAnybody = @"No";
    NSString *itemRepeatIfCompletedEarly = itemRepeatIfCompletedEarlyLocal;
    NSString *itemCompleteAsNeeded = itemCompleteAsNeededLocal;
    NSString *itemRepeats = itemRepeatsLocal;
    NSString *itemDays = TaskIsRepeatingDaily == NO ? itemDaysLocal : @"";
    NSMutableArray *itemDueDatesSkipped = [NSMutableArray array];
    NSString *itemDateLastReset = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat: @"MMMM dd, yyyy hh:mm a" returnAs:[NSString class]];
    NSString *itemDueDate = [self GenerateItemDueDate:itemRepeatsLocal itemTime:@"Any Time" itemDays:@"Any Day" itemDueDate:itemDueDateLocal itemRepeatIfCompletedEarly:itemRepeatIfCompletedEarly itemCompleteAsNeeded:itemCompleteAsNeeded itemDueDatesSkipped:[NSMutableArray array] itemDateLastReset:itemDateLastReset chosenItemDatePosted:chosenItemDatePosted];
    NSString *itemTime = [self GenerateItemTime:itemDueDate itemTime:itemTimeLocal];
    NSMutableDictionary *itemAdditionalReminders = [NSMutableDictionary dictionary];
    NSDictionary *itemReminderDict = itemRemindersDictLocal;
    NSMutableDictionary *itemReward = [@{@"Reward" : @"None", @"RewardDescription" : @"", @"RewardNotes" : @""} mutableCopy];
    NSString *itemDifficulty = @"None";
    NSString *itemPriority = itemPriorityLocal;
    NSString *itemColor = @"None";
    NSString *itemPrivate = @"No";
    NSString *itemImageURL = @"xxx";
    NSString *itemNotes = itemNotesLocal;
    NSString *itemStartDate = [self GenerateItemStartDate];
    NSString *itemEndDate = @"Never";
    NSString *itemTakeTurns = itemTakeTurnsLocal;
    NSString *itemGracePeriod = @"None";
    NSString *itemStatus = @"None";
    NSString *itemPastDue = @"2 Days";
    
    NSString *itemTurnUserID = @"";
    NSMutableDictionary *itemCompletedDictLocal = [NSMutableDictionary dictionary];
    
    NSMutableDictionary *itemInProgressDictLocal = [NSMutableDictionary dictionary];
    NSMutableDictionary *itemWontDoLocal = [NSMutableDictionary dictionary];
    NSMutableArray *itemTags = [NSMutableArray array];
    NSString *itemTrash = @"No";
    NSString *itemAddedLocation = @"TasksViewController";
    
    NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
    [setDataDict setObject:[[[GeneralObject alloc] init] GenerateItemType] forKey:@"ItemType"];
    [setDataDict setObject:itemUniqueID forKey:@"ItemUniqueID"];
    [setDataDict setObject:itemID forKey:@"ItemID"];
    [setDataDict setObject:itemHomeID forKey:@"ItemHomeID"];
    [setDataDict setObject:itemCreatedBy forKey:@"ItemCreatedBy"];
    [setDataDict setObject:itemDatePosted forKey:@"ItemDatePosted"];
    [setDataDict setObject:itemName forKey:@"ItemName"];
    [setDataDict setObject:itemAssignedTo forKey:@"ItemAssignedTo"];
    [setDataDict setObject:itemAssignedToNewHomeMembers forKey:@"ItemAssignedToNewHomeMembers"];
    [setDataDict setObject:itemAssignedToAnybody forKey:@"ItemAssignedToAnybody"];
    [setDataDict setObject:itemDueDate forKey:@"ItemDueDate"];
    [setDataDict setObject:itemCompleteAsNeeded forKey:@"ItemCompleteAsNeeded"];
    [setDataDict setObject:itemTime forKey:@"ItemTime"];
    [setDataDict setObject:itemAdditionalReminders forKey:@"ItemAdditionalReminders"];
    [setDataDict setObject:itemReminderDict forKey:@"ItemReminderDict"];
    [setDataDict setObject:itemReward forKey:@"ItemReward"];
    [setDataDict setObject:itemDifficulty forKey:@"ItemDifficulty"];
    [setDataDict setObject:itemPriority forKey:@"ItemPriority"];
    [setDataDict setObject:itemColor forKey:@"ItemColor"];
    [setDataDict setObject:itemPrivate forKey:@"ItemPrivate"];
    [setDataDict setObject:itemImageURL forKey:@"ItemImageURL"];
    [setDataDict setObject:itemNotes forKey:@"ItemNotes"];
    [setDataDict setObject:itemCompletedDictLocal forKey:@"ItemCompletedDict"];
    [setDataDict setObject:itemInProgressDictLocal forKey:@"ItemInProgressDict"];
    [setDataDict setObject:itemWontDoLocal forKey:@"ItemWontDo"];
    [setDataDict setObject:chosenItemOccurrenceID forKey:@"ItemOccurrenceID"];
    [setDataDict setObject:itemOccurrenceStatus forKey:@"ItemOccurrenceStatus"];
    [setDataDict setObject:@{} forKey:@"ItemOccurrencePastDue"];
    [setDataDict setObject:itemDays forKey:@"ItemDays"];
    [setDataDict setObject:itemStartDate forKey:@"ItemStartDate"];
    [setDataDict setObject:itemEndDate forKey:@"ItemEndDate"];
    [setDataDict setObject:[itemEndDate containsString:@" Time"] ? @"Yes" : @"No" forKey:@"ItemEndNumberOfTimes"];
    [setDataDict setObject:itemRepeats forKey:@"ItemRepeats"];
    [setDataDict setObject:itemRepeatIfCompletedEarly forKey:@"ItemRepeatIfCompletedEarly"];
    [setDataDict setObject:itemTakeTurns forKey:@"ItemTakeTurns"];
    [setDataDict setObject:itemGracePeriod forKey:@"ItemGracePeriod"];
    [setDataDict setObject:itemStatus forKey:@"ItemStatus"];
    [setDataDict setObject:itemDueDatesSkipped forKey:@"ItemDueDatesSkipped"];
    [setDataDict setObject:itemPastDue forKey:@"ItemPastDue"];
    [setDataDict setObject:itemTags forKey:@"ItemTags"];
    [setDataDict setObject:@"Never" forKey:@"ItemSelfDestruct"];
    [setDataDict setObject:@"0 Minutes" forKey:@"ItemEstimatedTime"];
    [setDataDict setObject:itemTrash forKey:@"ItemTrash"];
    [setDataDict setObject:itemTurnUserID forKey:@"ItemTurnUserID"];
    [setDataDict setObject:@"Never" forKey:@"ItemScheduledStart"];
    [setDataDict setObject:@"No" forKey:@"ItemPhotoConfirmation"];
    [setDataDict setObject:[NSMutableDictionary dictionary] forKey:@"ItemPhotoConfirmationDict"];
    [setDataDict setObject:itemAddedLocation forKey:@"ItemAddedLocation"];
    
    if ([itemType containsString:@"Chore"] || [itemType containsString:@"Expense"]) {
        
        [setDataDict setObject:itemSpecificDueDates forKey:@"ItemSpecificDueDates"];
        [setDataDict setObject:itemApprovalNeeded forKey:@"ItemApprovalNeeded"];
        [setDataDict setObject:itemApprovalRequests forKey:@"ItemApprovalRequests"];
        
    }
    
    if ([itemType containsString:@"Chore"]) {
        
        [setDataDict setObject:itemCompletedBy forKey:@"ItemMustComplete"];
        [setDataDict setObject:itemSubTasks forKey:@"ItemSubTasks"];
        
        //Item Type is Expense
    } else if ([itemType containsString:@"Expense"]) {
        
        [setDataDict setObject:itemAmountLocal forKey:@"ItemAmount"];
        [setDataDict setObject:[self GenerateItemCostPerPerson:itemAmountLocal itemAssignedToArrayLocal:itemAssignedTo] forKey:@"ItemCostPerPerson"];
        [setDataDict setObject:@{@"PaymentMethod" : @"None", @"PaymentMethodData" : @"", @"PaymentMethodNotes" : @""} forKey:@"ItemPaymentMethod"];
        [setDataDict setObject:@"No" forKey:@"ItemItemized"];
        [setDataDict setObject:@{} forKey:@"ItemItemizedItems"];
        
        //Item Type is List
    } else if ([itemType containsString:@"List"]) {
        
        [setDataDict setObject:itemListItemsLocal ? itemListItemsLocal : [@{} mutableCopy] forKey:@"ItemListItems"];
        
    }
    
    [setDataDict setObject:@"No" forKey:@"ItemTutorial"];
    
    return [setDataDict copy];
}

#pragma mark - IBAction Methods

-(void)CompleteUncompleteTaskAction_DisplayUnclickableError:(NSMutableDictionary *)singleObjectItemDict {
    
    if (![[NSUserDefaults standardUserDefaults] objectForKey:singleObjectItemDict[@"ItemUniqueID"]]) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Clicked" forKey:singleObjectItemDict[@"ItemUniqueID"]];
        
    } else if ([[NSUserDefaults standardUserDefaults] objectForKey:singleObjectItemDict[@"ItemUniqueID"]] &&
               [[[NSUserDefaults standardUserDefaults] objectForKey:singleObjectItemDict[@"ItemUniqueID"]] isEqualToString:@"Clicked"]) {
        
        if ([singleObjectItemDict[@"ItemItemized"] isEqualToString:@"Yes"]) {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:[NSString stringWithFormat:@"You are unable to complete this %@ on this page because it is itemized.", [itemType lowercaseString]] currentViewController:self];
            
        } else if ([itemType isEqualToString:@"List"]) {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:[NSString stringWithFormat:@"You are unable to complete a %@ on this page.", [itemType lowercaseString]] currentViewController:self];
            
        } else if ([singleObjectItemDict[@"ItemAssignedTo"] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] == NO) {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:[NSString stringWithFormat:@"You are unable to complete this %@ because you are not assigned to it.", [itemType lowercaseString]] currentViewController:self];
            
        } else if ([singleObjectItemDict[@"ItemTurnUserID"] isEqualToString:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] == NO) {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:[NSString stringWithFormat:@"You are unable to complete this %@ because it is not your turn.", [itemType lowercaseString]] currentViewController:self];
            
        } else {
            
            [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:[NSString stringWithFormat:@"You are unable to complete this %@.", [itemType lowercaseString]] currentViewController:self];
            
        }
        
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:singleObjectItemDict[@"ItemUniqueID"]];
        
    }
    
}

-(void)CompleteUncompleteTaskAction_DisplayRepeatIfCompletedEarlyResetDropDown:(NSMutableDictionary *)returningDictToUse TaskIsFullyCompleted:(BOOL)TaskIsFullyCompleted {
    
    BOOL TaskIsOccurrence = [[[BoolDataObject alloc] init] TaskIsOccurrence:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingAndRepeatingIfCompletedEarly = [[[BoolDataObject alloc] init] TaskIsRepeatingAndRepeatingIfCompletedEarly:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeating = [[[BoolDataObject alloc] init] TaskIsRepeating:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingAsNeeded = [[[BoolDataObject alloc] init] TaskIsRepeatingAsNeeded:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingWhenCompleted = [[[BoolDataObject alloc] init] TaskIsRepeatingWhenCompleted:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingDaily = [[[BoolDataObject alloc] init] TaskIsRepeatingDaily:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingWeekly = [[[BoolDataObject alloc] init] TaskIsRepeatingWeekly:returningDictToUse itemType:itemType];
    BOOL TaskIsRepeatingMonthly = [[[BoolDataObject alloc] init] TaskIsRepeatingMonthly:returningDictToUse itemType:itemType];
    BOOL TaskHasAnyDay = [[[BoolDataObject alloc] init] TaskHasAnyDay:returningDictToUse itemType:itemType];
    
    if (TaskIsFullyCompleted == YES && TaskIsOccurrence == NO && TaskIsRepeatingAndRepeatingIfCompletedEarly == YES && TaskIsRepeating == YES && TaskIsRepeatingAsNeeded == NO && TaskIsRepeatingWhenCompleted == NO &&
        
        ((TaskIsRepeatingDaily == YES) ||
         ((TaskIsRepeatingWeekly == YES || TaskIsRepeatingMonthly == YES) && TaskHasAnyDay == YES))) {
        
        
        
        dispatch_async(dispatch_get_main_queue(), ^{
           
            NSString *repeatIfCompletedEarlyDropDownText = [self CompleteUncompleteTaskAction_GenerateRepeatIfCompletedEarlyDrowDownText:returningDictToUse];
            self->_notificationitemReminderLabel.text = repeatIfCompletedEarlyDropDownText;
            
            
            
            [UIView animateWithDuration:0.25 animations:^{
                
                self->_notificationReminderView.frame = CGRectMake(0, self->_topView.frame.origin.y + self->_topView.frame.size.height, self.view.frame.size.width, self.view.frame.size.height*0.07201 > 53?(53):self.view.frame.size.height*0.07201);
                
                CGFloat yToUse = self->_notificationReminderView.frame.origin.y + self->_notificationReminderView.frame.size.height + self.view.frame.size.height*0.01630435;
                
                self->_customTableView.frame = CGRectMake(0, yToUse, self.view.frame.size.width, self.view.frame.size.height+1);
                
                CGFloat width = CGRectGetWidth(self.notificationReminderView.bounds);
                CGFloat height = CGRectGetHeight(self.notificationReminderView.bounds);
                
                self->_notificationReminderSeparator.frame = CGRectMake(0, 0, width, 0);
                self->_notificationitemReminderLabel.frame = CGRectMake(width*0.028985, height*0.5 - (((height*0.5471698)*0.5)), width - (width*0.028985)*2, height*0.5471698);
                self->_notificationitemReminderImage.hidden = YES;
                
                self->_notificationitemReminderLabel.font = [UIFont systemFontOfSize:height*0.413793 weight:UIFontWeightBold];
                self->_notificationitemReminderLabel.adjustsFontSizeToFitWidth = YES;
                
                [self AdjustTableViewHeight];
                
            } completion:^(BOOL finished) {
                
                [UIView animateWithDuration:0.25 delay:7.5 options:UIViewAnimationOptionAllowUserInteraction animations:^{
                    
                    self->_notificationReminderView.frame = CGRectMake(0, self->_topView.frame.origin.y, self.view.frame.size.width, self->_topView.frame.size.height);
                    
                    CGFloat yToUse = self->_topView.frame.origin.y + self->_topView.frame.size.height + self.view.frame.size.height*0.01630435;
                    
                    self->_customTableView.frame = CGRectMake(0, yToUse, self.view.frame.size.width, self.view.frame.size.height+1);
                    
                    CGFloat width = CGRectGetWidth(self.notificationReminderView.bounds);
                    CGFloat height = CGRectGetHeight(self.notificationReminderView.bounds);
                    
                    height = self.view.frame.size.height*0.07201 > 53?(53):self.view.frame.size.height*0.07201;
                    
                    self->_notificationReminderSeparator.frame = CGRectMake(0, 0, width, 0);
                    self->_notificationitemReminderLabel.frame = CGRectMake(width*0.028985, height*0.5 - (((height*0.5471698)*0.5)), width - (width*0.028985)*2, height*0.5471698);
                    self->_notificationitemReminderImage.hidden = YES;
                    
                    self->_notificationitemReminderLabel.font = [UIFont systemFontOfSize:height*0.413793 weight:UIFontWeightBold];
                    self->_notificationitemReminderLabel.adjustsFontSizeToFitWidth = YES;
                    
                    [self AdjustTableViewHeight];
                    
                } completion:nil];
                
            }];
            
        });
        
    }
    
}

-(void)CompleteUncompleteTaskAction_GenerateUpdateDueDateAlertView:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished, NSMutableDictionary *singleObjectItemDict))finishBlock {
    
    BOOL TaskWasCreatedBySpecificUser = [[[BoolDataObject alloc] init] TaskWasCreatedBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
    BOOL TaskIsRepeating = [[[BoolDataObject alloc] init] TaskIsRepeating:singleObjectItemDict itemType:itemType];
    BOOL TaskIsRepeatingDaily = [[[BoolDataObject alloc] init] TaskIsRepeatingDaily:[@{@"ItemRepeats" : singleObjectItemDict[@"ItemRepeats"]} mutableCopy] itemType:itemType];
    
    BOOL DontShowAgainClicked =
    ([[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] &&
     [[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"][@"DontShowAgain"] &&
     [[[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"][@"DontShowAgain"] isEqualToString:@"Yes"]) ||
    
    ([[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] &&
     [[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"][singleObjectItemDict[@"ItemID"]] &&
     [[[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"][singleObjectItemDict[@"ItemID"]] isEqualToString:@"Yes"]);
    
    BOOL TaskIsPastDue = NO;
    
    for (NSString *sections in dataDisplayDict) {
        if ([sections isEqualToString:@"Past Due"]) {
            if (dataDisplayDict[sections]) {
                if ([dataDisplayDict[sections][@"ItemUniqueID"] containsObject:singleObjectItemDict[@"ItemUniqueID"]]) {
                    TaskIsPastDue = YES;
                    break;
                }
            }
        }
    }
    
    if (TaskWasCreatedBySpecificUser == YES && TaskIsPastDue == YES && TaskIsRepeating == YES && TaskIsRepeatingDaily == NO && DontShowAgainClicked == NO) {
        
        NSString *originalDate = [[[GeneralObject alloc] init] GenerateDateWithConvertedFormatWithFormat:@"MMMM dd, yyyy hh:mm a" dateToConvert:singleObjectItemDict[@"ItemDueDate"] newFormat:@"MMMM d, yyyy" returnAs:[NSString class]];
        NSString *currentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM d, yyyy" returnAs:[NSString class]];
        
        NSCalendar *calendar = [NSCalendar currentCalendar];
        NSDate *originalDateInDateForm = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:@"MMMM dd, yyyy" dateToConvert:originalDate returnAs:[NSDate class]];
        NSDate *currentDateInDateForm = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:@"MMMM d, yyyy" dateToConvert:currentDate returnAs:[NSDate class]];
        
        // Get the weekday
        NSDateComponents *weekdayComponentsOriginalDate = [calendar components:NSCalendarUnitWeekday fromDate:originalDateInDateForm];
        NSString *weekdayStrOriginalDate = [[calendar weekdaySymbols] count] > [weekdayComponentsOriginalDate weekday] - 1 ? [calendar weekdaySymbols][[weekdayComponentsOriginalDate weekday] - 1] : @"";
        
        if ([weekdayStrOriginalDate isEqualToString:@""]) {
            return;
        }
        
        NSDateComponents *weekdayComponentsCurrentDate = [calendar components:NSCalendarUnitWeekday fromDate:currentDateInDateForm];
        NSString *weekdayStrCurrentDate = [[calendar weekdaySymbols] count] > [weekdayComponentsCurrentDate weekday] - 1 ? [calendar weekdaySymbols][[weekdayComponentsCurrentDate weekday] - 1] : @"";
        
        if ([weekdayStrCurrentDate isEqualToString:@""]) {
            return;
        }
        
        UIAlertController *controller = [UIAlertController alertControllerWithTitle:@"Update Task?"
                                                                            message:[NSString stringWithFormat:@"This task was originally scheduled for %@, %@ but was completed on %@, %@. Would you like to reschedule this chore for %@'s instead?", weekdayStrOriginalDate, originalDate, weekdayStrCurrentDate, currentDate, weekdayStrCurrentDate]
                                                                     preferredStyle:UIAlertControllerStyleAlert];
        
        UIAlertAction *original = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@"Original - %@", weekdayStrOriginalDate]
                                                           style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * _Nonnull action) {
            
            finishBlock(YES, singleObjectItemDict);
            
        }];
        
        UIAlertAction *completed = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@"Completed - %@", weekdayStrCurrentDate]
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * _Nonnull action) {
            
            NSCalendar *calendar = [NSCalendar currentCalendar];
            NSDate *currentDate = [NSDate date];
            
            // Get the weekday
            NSDateComponents *weekdayComponents = [calendar components:NSCalendarUnitWeekday fromDate:currentDate];
            NSInteger weekday = [weekdayComponents weekday]; // Sunday: 1, Monday: 2, ..., Saturday: 7
            NSString *weekdayStr = [calendar weekdaySymbols][[weekdayComponents weekday] - 1];
            
            // Get the day of the month
            NSDateComponents *dayComponents = [calendar components:NSCalendarUnitDay fromDate:currentDate];
            NSInteger day = [dayComponents day];
            
            NSString *ending;
            
            if (day >= 11 && day <= 13) {
                ending = @"th";
            } else {
                NSInteger lastDigit = day % 10;
                
                switch (lastDigit) {
                    case 1:
                        ending = @"st";
                        break;
                    case 2:
                        ending = @"nd";
                        break;
                    case 3:
                        ending = @"rd";
                        break;
                    default:
                        ending = @"th";
                        break;
                }
            }
            
            NSString *dayString = [NSString stringWithFormat:@"%ld%@", (long)day, ending];
            
            
            // Printing the weekday and day of the month
            NSLog(@"Current weekday: %ld", (long)weekday);
            NSLog(@"Current day of the month: %ld", (long)day);
            
            BOOL TaskIsRepeatingWeekly = [[[BoolDataObject alloc] init] TaskIsRepeatingWeekly:[@{@"ItemRepeats" : singleObjectItemDict[@"ItemRepeats"]} mutableCopy] itemType:self->itemType];
            BOOL TaskIsRepeatingMonthly = [[[BoolDataObject alloc] init] TaskIsRepeatingMonthly:[@{@"ItemRepeats" : singleObjectItemDict[@"ItemRepeats"]} mutableCopy] itemType:self->itemType];
            
            if (TaskIsRepeatingWeekly == YES) {
                [singleObjectItemDict setObject:weekdayStr forKey:@"ItemDays"];
            } else if (TaskIsRepeatingMonthly == YES) {
                [singleObjectItemDict setObject:dayString forKey:@"ItemDays"];
            }
            
            NSString *newItemDueDate = [[[NotificationsObject alloc] init] GenerateArrayOfRepeatingDueDates:singleObjectItemDict[@"ItemRepeats"] itemRepeatIfCompletedEarly:singleObjectItemDict[@"ItemRepeatIfCompletedEarly"] itemCompleteAsNeeded:singleObjectItemDict[@"ItemCompleteAsNeeded"] totalAmountOfFutureDates:2 maxAmountOfDueDatesToLoopThrough:1000 itemDatePosted:singleObjectItemDict[@"ItemDatePosted"] itemDueDate:singleObjectItemDict[@"ItemDueDate"] itemStartDate:singleObjectItemDict[@"ItemStartDate"] itemEndDate:singleObjectItemDict[@"ItemEndDate"] itemTime:singleObjectItemDict[@"ItemTime"] itemDays:singleObjectItemDict[@"ItemDays"] itemDueDatesSkipped:singleObjectItemDict[@"ItemDueDatesSkipped"] itemDateLastReset:singleObjectItemDict[@"ItemDateLastReset"] SkipStartDate:NO][0];
            
            [singleObjectItemDict setObject:newItemDueDate forKey:@"ItemDueDate"];
            
            [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemUniqueID" : singleObjectItemDict[@"ItemUniqueID"], @"ItemDays" : singleObjectItemDict[@"ItemDays"], @"ItemDueDate" : singleObjectItemDict[@"ItemDueDate"]} itemID:singleObjectItemDict[@"ItemID"] itemOccurrenceID:singleObjectItemDict[@"ItemOccurrenceID"] collection:self->itemTypeCollection homeID:self->homeID completionHandler:^(BOOL finished) {
                
                finishBlock(YES, singleObjectItemDict);
                
            }];
            
        }];
        
        UIAlertAction *dontShowAgainForThisTask = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@"Don't Show Again For This %@", [[[GeneralObject alloc] init] GenerateItemType]]
                                                                           style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * _Nonnull action) {
            
            NSMutableDictionary *dontShowUpdatePopup = [[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] mutableCopy] : [NSMutableDictionary dictionary];
            
            [dontShowUpdatePopup setObject:@"Yes" forKey:singleObjectItemDict[@"ItemID"]];
            
            [[NSUserDefaults standardUserDefaults] setObject:dontShowUpdatePopup forKey:@"DontShowUpdatePopup"];
            
            finishBlock(YES, singleObjectItemDict);
            
            
        }];
        
        UIAlertAction *dontShowAgain = [UIAlertAction actionWithTitle:@"Don't Show Again"
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * _Nonnull action) {
            
            NSMutableDictionary *dontShowUpdatePopup = [[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"DontShowUpdatePopup"] mutableCopy] : [NSMutableDictionary dictionary];
            
            [dontShowUpdatePopup setObject:@"Yes" forKey:@"DontShowAgain"];
            
            [[NSUserDefaults standardUserDefaults] setObject:dontShowUpdatePopup forKey:@"DontShowUpdatePopup"];
            
            finishBlock(YES, singleObjectItemDict);
            
            
        }];
        
        UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"Cancel"
                                                         style:UIAlertActionStyleCancel
                                                       handler:^(UIAlertAction * _Nonnull action) {
            
            finishBlock(YES, singleObjectItemDict);
            
        }];
        
        [controller addAction:original];
        [controller addAction:completed];
        [controller addAction:dontShowAgain];
        [controller addAction:dontShowAgainForThisTask];
        [controller addAction:cancel];
        [self presentViewController:controller animated:YES completion:nil];
        
    } else {
        
        finishBlock(YES, singleObjectItemDict);
        
    }
    
}

-(void)SelectDeselectItems_CheckIfAllTasksSelected {
    
    int totalCount = 0;
    
    for (NSString *section in self->dataDisplaySectionsArray) {
        
        NSMutableDictionary *dictToUse = self->dataDisplayDict[section] ? self->dataDisplayDict[section] : [NSMutableDictionary dictionary];
        NSMutableArray *itemUniqueIDArray = dictToUse[@"ItemUniqueID"] ? [dictToUse[@"ItemUniqueID"] mutableCopy] : [NSMutableArray array];
        
        totalCount += [itemUniqueIDArray count];
        
    }
    
    if ([[selectedItemsDict allKeys] count] >= totalCount) {
        
        [selectedSelectDeselectAllButton setTitle:@"Deselect All" forState:UIControlStateNormal];
        
        CGRect newRect = selectedSelectDeselectAllButton.frame;
        newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:selectedSelectDeselectAllButton.titleLabel.text withFont:selectedSelectDeselectAllButton.titleLabel.font];
        selectedSelectDeselectAllButton.frame = newRect;
        
    } else {
        
        [selectedSelectDeselectAllButton setTitle:@"Select All" forState:UIControlStateNormal];
        
        CGRect newRect = selectedSelectDeselectAllButton.frame;
        newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:selectedSelectDeselectAllButton.titleLabel.text withFont:selectedSelectDeselectAllButton.titleLabel.font];
        selectedSelectDeselectAllButton.frame = newRect;
        
    }
    
    self->selectedSelectDeselectAllButtonOverlayView = [[UIView alloc] initWithFrame:CGRectMake(self->selectedSelectDeselectAllButton.frame.origin.x - 10, self->selectedSelectDeselectAllButton.frame.origin.y - 10, self->selectedSelectDeselectAllButton.frame.size.width - 20, self->selectedSelectDeselectAllButton.frame.size.height - 20)];
    
    [self.customTableView reloadData];
    
}

#pragma mark - Select Option - General

-(void)SelectOption_UpdateItemData:(NSMutableDictionary *)dataDict {
    
    if (self->selectedItemsDict.count > 0) {
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        [self StartProgressView];
        
        NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:self->keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            
            NSString *itemID = singleObjectItemDict[@"ItemID"] ? singleObjectItemDict[@"ItemID"] : @"";
            NSString *itemOccurrenceID = singleObjectItemDict[@"ItemOccurrenceID"] ? singleObjectItemDict[@"ItemOccurrenceID"] : @"";
            
            NSMutableDictionary *dataDictCopy = [dataDict mutableCopy];
            [dataDictCopy setObject:itemUniqueID forKey:@"ItemUniqueID"];
            
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                
                [[[SetDataObject alloc] init] UpdateDataEditItem:dataDict itemID:itemID itemOccurrenceID:itemOccurrenceID collection:self->itemTypeCollection homeID:self->homeID completionHandler:^(BOOL finished) {
                    
                    [self General_UpdateMultipleItemsInItemDict_CompletionBlock:setDataDict returningDictToUse:dataDictCopy returningOccurrencesDictToUse:self->itemOccurrencesDict returningUpdatedTaskListDictToUse:[NSMutableDictionary dictionary] selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES];
                    
                }];
                
            });
            
        }
        
    }
    
}

#pragma mark Select Option - Move To Task List

-(void)MoveToTaskList_UpdateTaskInTaskList:(NSString *)newTaskListName completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move To List %@ For Tasks %@ Clicked For %@", newTaskListName, self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
    
    if ([[self->selectedItemsDict allKeys] count] == 0) {
        
        finishBlock(YES);
        
    } else {
        
        [self StartProgressView];
       
        NSMutableDictionary *itemUniqueIDDict = [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            [itemUniqueIDDict setObject:@{@"SpecificItemUniqueID" : @""} forKey:itemUniqueID];
        }
        
        [[[GeneralObject alloc] init] AddTaskToSpecificTaskListAndRemoveFromAllTaskListsThatContainSpecificItem:[taskListDict mutableCopy] newTaskListName:newTaskListName itemUniqueIDArray:[self->selectedItemsDict allKeys] itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningUpdatedTaskListDict, NSMutableDictionary * _Nonnull returningUpdatedTaskListDictNo1) {
            
            NSArray *arrayOfDicts = @[returningUpdatedTaskListDict, returningUpdatedTaskListDictNo1];
           
            self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDict:arrayOfDicts taskListDict:self->taskListDict];
           
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self SelectDoneButtonAction:self];
                [self General_GenerateItemsToDisplay:^(BOOL finished) {
                    
                    finishBlock(YES);
                    
                }];
                
            });
            
        }];
        
    }
    
}

-(void)MoveToTaskList_RemoveTaskFromTaskList:(void (^)(BOOL finished))finishBlock {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Remove From List For Tasks %@ Clicked For %@", self->selectedItemsDict, self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if ([[self->selectedItemsDict allKeys] count] == 0) {
        
        finishBlock(YES);
        
    } else {
        
        [self StartProgressView];
        
        NSMutableDictionary *itemUniqueIDDict = [NSMutableDictionary dictionary];
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            [itemUniqueIDDict setObject:@{@"SpecificItemUniqueID" : @""} forKey:itemUniqueID];
        }
        
        [[[GeneralObject alloc] init] AddOrRemoveTaskToAllTaskListsThatContainSpecificItem:taskListDict newTaskListName:@"" itemUniqueIDDict:itemUniqueIDDict AddTask:NO completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningUpdatedTaskListDict) {
            
            self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDict:@[returningUpdatedTaskListDict] taskListDict:self->taskListDict];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self SelectDoneButtonAction:self];
                [self General_GenerateItemsToDisplay:^(BOOL finished) {
                    
                    finishBlock(YES);
                    
                }];
                
            });
            
        }];
        
    }
    
}

#pragma mark Select Option - Move To Trash

-(NSMutableDictionary *)MoveToTrash_MoveOutOfTrash_GenerateUpdatedSingleObjectDict:(NSString *)itemUniqueID MoveToTrash:(BOOL)MoveToTrash {
    
    NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
    [singleObjectItemDict setObject:MoveToTrash ? @"Yes" : @"No" forKey:@"ItemTrash"];
    
    return singleObjectItemDict;
}


-(void)MoveToTrash_MoveOutOfTrash_UpdateItemData:(NSString *)itemID itemOccurrenceID:(NSString *)itemOccurrenceID MoveToTrash:(BOOL)MoveToTrash completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *itemTrash = MoveToTrash ? @"Yes" : @"No";
        
        [[[SetDataObject alloc] init] UpdateDataEditItem:@{@"ItemTrash" : itemTrash} itemID:itemID itemOccurrenceID:itemOccurrenceID collection:self->itemTypeCollection homeID:self->homeID completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)MoveToTrash_MoveOutOfTrash_SendPushNotifications:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:YES Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                        DueDate:NO Reminder:NO
                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                       itemType:self->itemType];
    
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *pushNotificationTitle = [NSString stringWithFormat:@"\"%@\"", singleObjectItemDict[@"ItemName"] ? singleObjectItemDict[@"ItemName"] : @""];
        NSString *pushNotificationBody = [NSString stringWithFormat:@"%@ moved this %@ %@ \"Trash\". 🗑️", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUsername"], [self->itemType lowercaseString], [singleObjectItemDict[@"ItemTrash"] isEqualToString:@"Yes"] ? @"to" : @"out of"];
        
        
        
        NSString *notificationTitle = [NSString stringWithFormat:@"\"%@\"", singleObjectItemDict[@"ItemName"] ? singleObjectItemDict[@"ItemName"] : @""];
        NSString *notificationBody = [NSString stringWithFormat:@"%@ moved this %@ to \"Trash\". 🗑️", [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUsername"], [self->itemType lowercaseString]];
        
        
        
        NSMutableArray *userIDArray = singleObjectItemDict[@"ItemAssignedTo"] ? [singleObjectItemDict[@"ItemAssignedTo"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *usersToSendNotificationTo = [userIDArray mutableCopy];
        
        NSArray *addTheseUsers = @[singleObjectItemDict[@"ItemCreatedBy"]];
        NSArray *removeTheseUsers = @[[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx"];
        
        usersToSendNotificationTo = [[[[NotificationsObject alloc] init] AddAndRemoveSpecificUsersFromArray:usersToSendNotificationTo addTheseUsers:addTheseUsers removeTheseUsers:removeTheseUsers] mutableCopy];
        
        
        
        [[[NotificationsObject alloc] init] SendPushNotificationToArrayOfUsers_Items:usersToSendNotificationTo
                                                                           dictToUse:singleObjectItemDict
                                                                              homeID:self->homeID homeMembersArray:self->homeMembersArray homeMembersDict:self->homeMembersDict
                                                            notificationSettingsDict:self->notificationSettingsDict notificationItemType:self->itemType notificationType:notificationType
                                                                           topicDict:self->topicDict
                                                                allItemTagsArrays:allItemTagsArrays
                                                               pushNotificationTitle:pushNotificationTitle pushNotificationBody:pushNotificationBody
                                                                   notificationTitle:notificationTitle notificationBody:notificationBody
                                                             SetDataHomeNotification:YES
                                                                RemoveUsersNotInHome:YES
                                                                   completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)MoveToTrash_MoveOutOfTrash_SetItemSilentNotifications:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSString *itemTrash = singleObjectItemDict[@"ItemTrash"] ? singleObjectItemDict[@"ItemTrash"] : @"";
    NSString *itemCreatedBy = singleObjectItemDict[@"ItemCreatedBy"] ? singleObjectItemDict[@"ItemCreatedBy"] : @"";
    NSMutableArray *itemAssignedTo = singleObjectItemDict[@"ItemAssignedTo"] ? singleObjectItemDict[@"ItemAssignedTo"] : [NSMutableArray array];
    
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:YES Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                        DueDate:NO Reminder:NO
                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                       itemType:self->itemType];
    
    NSMutableArray *userIDArray = [NSMutableArray array];
    NSMutableArray *userIDToRemoveArray = [NSMutableArray array];
    
    if ([itemTrash isEqualToString:@"Yes"]) {
        
        userIDArray = [NSMutableArray array];
        userIDToRemoveArray = [itemAssignedTo mutableCopy];
        
        [userIDToRemoveArray addObject:itemCreatedBy];
        
    } else {
        
        userIDArray = [itemAssignedTo mutableCopy];
        userIDToRemoveArray = [NSMutableArray array];
        
        [userIDArray addObject:itemCreatedBy];
        
    }
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[NotificationsObject alloc] init] ResetLocalNotificationReminderNotification:singleObjectItemDict homeMembersDict:self->homeMembersDict userIDArray:userIDArray userIDToRemoveArray:userIDToRemoveArray notificationSettingsDict:self->notificationSettingsDict allItemTagsArrays:allItemTagsArrays itemType:self->itemType notificationType:notificationType topicDict:self->topicDict completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}


-(void)MoveToTrash_MoveOutOfTrash_CompletionBlock:(int)totalQueries completedQueries:(int)completedQueries itemUniqueID:(NSString *)itemUniqueID selectedItemsDict:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr setDataArray:(NSMutableArray *)setDataArray MoveToTrash:(BOOL)MoveToTrash completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if (totalQueries == completedQueries) {
        
        [self General_RemoveMultipleItemsInItemDict_CompletionBlock:setDataArray itemUniqueID:itemUniqueID selectedItemsDict:selectedItemsDict objectArr:objectArr Looping:YES MoveToTrash:MoveToTrash == YES MoveOutOfTrash:MoveToTrash == NO Waive:NO Remove:YES completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    }
    
}

-(void)MoveToTrashSelected:(BOOL)MoveToTrash completionHandler:(void (^)(BOOL finished))finishBlock {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Move To Trash Selected For Tasks %@ For %@", self->selectedItemsDict , self->itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    if (self->selectedItemsDict.count > 0) {
        
        [self StartProgressView];
        
        NSMutableArray *setDataArray = [NSMutableArray array];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            [setDataArray addObject:itemUniqueID];
            
            
            
            __block int totalQueries = 3;
            __block int completedQueries = 0;
            
            
            
            NSMutableDictionary *singleObjectItemDict = [self MoveToTrash_MoveOutOfTrash_GenerateUpdatedSingleObjectDict:itemUniqueID MoveToTrash:MoveToTrash];
            
            NSString *itemID = singleObjectItemDict[@"ItemID"] ? singleObjectItemDict[@"ItemID"] : @"xxx";
            NSString *itemOccurrenceID = singleObjectItemDict[@"ItemOccurrenceID"] ? singleObjectItemDict[@"ItemOccurrenceID"] : @"xxx";
            NSString *itemUniqueID = singleObjectItemDict[@"ItemUniqueID"] ? singleObjectItemDict[@"ItemUniqueID"] : @"xxx";
            
            
            
            /*
             //
             //
             //Update Item Data
             //
             //
             */
            [self MoveToTrash_MoveOutOfTrash_UpdateItemData:itemID itemOccurrenceID:itemOccurrenceID MoveToTrash:MoveToTrash completionHandler:^(BOOL finished) {
                
                [self MoveToTrash_MoveOutOfTrash_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) itemUniqueID:itemUniqueID selectedItemsDict:self->selectedItemsDict objectArr:objectArr setDataArray:setDataArray MoveToTrash:MoveToTrash completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            /*
             //
             //
             //Send Push Notifications
             //
             //
             */
            [self MoveToTrash_MoveOutOfTrash_SendPushNotifications:singleObjectItemDict completionHandler:^(BOOL finished) {
                
                [self MoveToTrash_MoveOutOfTrash_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) itemUniqueID:itemUniqueID selectedItemsDict:self->selectedItemsDict objectArr:objectArr setDataArray:setDataArray MoveToTrash:MoveToTrash completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            /*
             //
             //
             //Send Item Silent Notifications
             //
             //
             */
            [self MoveToTrash_MoveOutOfTrash_SetItemSilentNotifications:singleObjectItemDict completionHandler:^(BOOL finished) {
                
                [self MoveToTrash_MoveOutOfTrash_CompletionBlock:totalQueries completedQueries:(completedQueries+=1) itemUniqueID:itemUniqueID selectedItemsDict:self->selectedItemsDict objectArr:objectArr setDataArray:setDataArray MoveToTrash:MoveToTrash completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
        }
        
    }
    
}

-(void)RemoveMultipleItemsToItemDict:(NSMutableArray *)userInfo MoveToTrash:(BOOL)MoveToTrash MoveOutOfTrash:(BOOL)MoveOutOfTrash Waive:(BOOL)Waive Remove:(BOOL)Remove {
    
    keyArray = [[[GeneralObject alloc] init] GenerateKeyArray];
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    
    for (NSString *itemUniqueID in userInfo) {
        
        NSUInteger index = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
        
        if (MoveToTrash) {
            
            NSMutableArray *arr = [self->itemDict[@"ItemTrash"] mutableCopy];
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:@"Yes"]; }
            [self->itemDict setObject:arr forKey:@"ItemTrash"];
            
        } else if (MoveOutOfTrash) {
            
            NSMutableArray *arr = [self->itemDict[@"ItemTrash"] mutableCopy];
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:@"No"]; }
            [self->itemDict setObject:arr forKey:@"ItemTrash"];
            
        } else if (Waive) {
            
            NSMutableArray *arr = [self->itemDict[@"ItemOccurrenceStatus"] mutableCopy];
            if (arr.count > index) { [arr replaceObjectAtIndex:index withObject:@"Waived"]; }
            [self->itemDict setObject:arr forKey:@"ItemOccurrenceStatus"];
            
        } else {
           
            for (NSString *key in keyArray) {
                
                NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
                if (arr.count > index) { [arr removeObjectAtIndex:index]; }
                [self->itemDict setObject:arr forKey:key];
                
            }
            
        }
        
    }
   
    [self SaveQueriedDataToUserDefaults:YES];
    
}

#pragma mark Select Option - Delete Trash Permanently

-(void)DeleteTrashPermanently_CompletionBlock:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr setDataArray:(NSMutableArray *)setDataArray itemUniqueID:(NSString *)itemUniqueID completionHandler:(void (^)(BOOL finished))finishBlock {
    
    [self General_RemoveMultipleItemsInItemDict_CompletionBlock:setDataArray itemUniqueID:itemUniqueID selectedItemsDict:self->selectedItemsDict objectArr:objectArr Looping:YES MoveToTrash:NO MoveOutOfTrash:NO Waive:NO Remove:YES completionHandler:^(BOOL finished) {
        
        finishBlock(YES);
        
    }];
    
}

-(void)DeleteTrashPermanently_DeleteItemData:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    
    
    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:YES Duplicating:NO Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                        DueDate:NO Reminder:NO
                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                       itemType:self->itemType];
    
    NSString *notificationItemType = itemType;
    
    NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[DeleteDataObject alloc] init] DeleteDataItemCompletely:singleObjectItemDict homeID:homeID itemType:self->itemType keyArray:self->keyArray homeMembersArray:self->homeMembersArray homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict notificationItemType:notificationItemType notificationType:notificationType topicDict:self->topicDict taskListDict:[self->taskListDict mutableCopy] allItemTagsArrays:allItemTagsArrays currentViewController:self completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningUpdatedTaskListDict) {
            
            self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDict:@[returningUpdatedTaskListDict] taskListDict:self->taskListDict];
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)DeleteTrashPermanently:(id)sender {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    if ([[self->selectedItemsDict allKeys] count] > 0) {
        
        [self StartProgressView];
        
        NSMutableArray *setDataArray = [NSMutableArray array];
        NSMutableArray *objectArr = [NSMutableArray array];
        
        [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"StopDoneActionReloadTableView"];
        
        
        
        for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
            
            
            
            NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
            
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
            
            
            
            /*
             //
             //
             //Delete Item Data
             //
             //
             */
            [self DeleteTrashPermanently_DeleteItemData:singleObjectItemDict completionHandler:^(BOOL finished) {
             
                [self DeleteTrashPermanently_CompletionBlock:self->selectedItemsDict objectArr:objectArr setDataArray:setDataArray itemUniqueID:itemUniqueID completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
            
            
        }
        
    }
    
}

#pragma mark Select Option - Complete/Uncomplete

-(void)ReplaceMultipleItemsToItemDict:(NSMutableDictionary *)userInfo {
    
    keyArray = [[[GeneralObject alloc] init] GenerateKeyArray];
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
   
    
    for (NSString *itemUniqueID in userInfo[@"ItemUniqueID"]) {
        
        NSUInteger indexUserInfo = [userInfo[@"ItemUniqueID"] indexOfObject:itemUniqueID];
        NSUInteger indexItemDict = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
       
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
            id object = userInfo[key] && [(NSArray *)userInfo[key] count] > indexUserInfo ? userInfo[key][indexUserInfo] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            if ([arr count] > indexItemDict) { [arr replaceObjectAtIndex:indexItemDict withObject:object]; }
            [self->itemDict setObject:arr forKey:key];
            
        }
        
    }
  
    [self SaveQueriedDataToUserDefaults:YES];
    
}

#pragma mark Select Option - Duplicate

-(NSMutableDictionary *)Duplicate_GenerateUpdatedAllSetDataDict:(NSMutableDictionary *)allSetDataDict setDataDict:(NSMutableDictionary *)setDataDict {
    
    for (NSString *key in keyArray) {
        
        NSMutableArray *arr = allSetDataDict[key] ? [allSetDataDict[key] mutableCopy] : [NSMutableArray array];
        id object = setDataDict[key] ? setDataDict[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
        [arr addObject:object];
        [allSetDataDict setObject:arr forKey:key];
        
    }
    
    return allSetDataDict;
}


-(void)Duplicate_SendPushNotifications:(NSMutableDictionary *)setDataDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSString *itemName = setDataDict[@"ItemName"];
    NSMutableArray *userIDArray = [setDataDict[@"ItemAssignedTo"] mutableCopy];
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:YES Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                        DueDate:NO Reminder:NO
                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                       itemType:self->itemType];
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *homeID = [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"] && [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"HomeChosen"][@"HomeID"] : @"xxx";
        
        
        
        NSString *pushNotificationTitle = [NSString stringWithFormat:@"\"%@\"", itemName];
        NSString *pushNotificationBody = [[[NotificationsObject alloc] init] GeneratePushNotificationAddItemBody:YES EditItem:NO DeleteItem:NO NotificationItem:NO NobodyAssigned:NO userIDArray:userIDArray];
        
        
        
        NSString *notificationTitle = [NSString stringWithFormat:@"\"%@\"", itemName];
        NSString *notificationBody = [[[NotificationsObject alloc] init] GeneratePushNotificationAddItemBody:YES EditItem:NO DeleteItem:NO NotificationItem:YES NobodyAssigned:NO userIDArray:userIDArray];
        
        
        
        NSMutableArray *usersToSendNotificationTo = [userIDArray mutableCopy];
        
        NSArray *addTheseUsers = @[setDataDict[@"ItemCreatedBy"]];
        NSArray *removeTheseUsers = @[[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx"];
        
        usersToSendNotificationTo = [[[[NotificationsObject alloc] init] AddAndRemoveSpecificUsersFromArray:usersToSendNotificationTo addTheseUsers:addTheseUsers removeTheseUsers:removeTheseUsers] mutableCopy];
        
        
        
        [[[NotificationsObject alloc] init] SendPushNotificationToArrayOfUsers_Items:usersToSendNotificationTo
                                                                           dictToUse:setDataDict
                                                                              homeID:homeID homeMembersArray:self->homeMembersArray homeMembersDict:self->homeMembersDict
                                                            notificationSettingsDict:self->notificationSettingsDict notificationItemType:self->itemType notificationType:notificationType
                                                                           topicDict:self->topicDict
                                                                allItemTagsArrays:allItemTagsArrays
                                                               pushNotificationTitle:pushNotificationTitle pushNotificationBody:pushNotificationBody
                                                                   notificationTitle:notificationTitle notificationBody:notificationBody
                                                             SetDataHomeNotification:YES
                                                                RemoveUsersNotInHome:YES
                                                                   completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)Duplicate_ResetItemNotifications:(NSMutableDictionary *)setDataDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSString *itemCreatedBy = setDataDict[@"ItemCreatedBy"] ? setDataDict[@"ItemCreatedBy"] : @"";
    NSMutableArray *itemAssignedTo = setDataDict[@"ItemAssignedTo"] ? setDataDict[@"ItemAssignedTo"] : [NSMutableArray array];
    
    NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
    
    NSString *notificationType = [[[NotificationsObject alloc] init] NotificationSettingsUnknownItemType_Adding:NO Editing:NO Deleting:NO Duplicating:YES Waiving:NO Skipping:NO Pausing:NO Comments:NO
                                                                                                   SkippingTurn:NO RemovingUser:NO
                                                                                                 FullyCompleted:NO Completed:NO InProgress:NO WontDo:NO Accept:NO Decline:NO
                                                                                                        DueDate:NO Reminder:NO
                                                                                                 SubtaskEditing:NO SubtaskDeleting:NO
                                                                                               SubtaskCompleted:NO SubtaskInProgress:NO SubtaskWontDo:NO SubtaskAccept:NO SubtaskDecline:NO
                                                                                                 AddingListItem:NO EditingListItem:NO DeletingListItem:NO ResetingListItem:NO
                                                                                            EditingItemizedItem:NO DeletingItemizedItem:NO
                                                                                              GroupChatMessages:NO LiveSupportMessages:NO
                                                                                             SendingInvitations:NO DeletingInvitations:NO NewHomeMembers:NO HomeMembersMovedOut:NO HomeMembersKickedOut:NO
                                                                                            FeatureForumUpvotes:NO BugForumUpvotes:NO
                                                                                                       itemType:self->itemType];
    
    NSMutableArray *userIDArray = [itemAssignedTo mutableCopy];
    NSMutableArray *userIDToRemoveArray = [NSMutableArray array];
    
    [userIDArray addObject:itemCreatedBy];
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        [[[NotificationsObject alloc] init] ResetLocalNotificationReminderNotification:setDataDict homeMembersDict:self->homeMembersDict userIDArray:userIDArray userIDToRemoveArray:userIDToRemoveArray notificationSettingsDict:self->notificationSettingsDict allItemTagsArrays:allItemTagsArrays itemType:self->itemType notificationType:notificationType topicDict:self->topicDict completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)Duplicate_SetItemData:(NSMutableDictionary *)setDataDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSString *collection = [NSString stringWithFormat:@"%@s", self->itemType];
        
        [[[SetDataObject alloc] init] SetDataAddItem:setDataDict collection:collection homeID:self->homeID completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)Duplicate_SetImageData:(NSMutableDictionary *)setDataDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    UIImage *itemImageImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:setDataDict[@"ItemImageURL"]]]];
    NSString *chosenItemUniqueID = setDataDict[@"ItemUniqueID"] ? setDataDict[@"ItemUniqueID"] : @"xxx";
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSData *imgData = UIImageJPEGRepresentation(itemImageImage, 0.15);
        
        if (imgData != nil) {
            
            [[[SetDataObject alloc] init] SetDataItemImage:chosenItemUniqueID itemType:self->itemType imgData:imgData completionHandler:^(BOOL finished) {
                
                finishBlock(YES);
                
            }];
            
        } else {
            
            finishBlock(YES);
            
        }
        
    });
    
}

-(void)Duplicate_UpdateTaskListData:(NSMutableDictionary *)taskListDict itemUniqueIDDict:(NSDictionary *)itemUniqueIDDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
       
        [[[GeneralObject alloc] init] AddOrRemoveTaskToAllTaskListsThatContainSpecificItem:taskListDict newTaskListName:@"" itemUniqueIDDict:itemUniqueIDDict AddTask:YES completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningUpdatedTaskListDict) {
            
            self->taskListDict = [[[GeneralObject alloc] init] GenerateUpdatedTaskListDict:@[returningUpdatedTaskListDict] taskListDict:self->taskListDict];
         
            finishBlock(YES);
            
        }];
        
    });
    
}

-(NSString *)Duplicate_GenerateNewItemName:(NSMutableDictionary *)singleObjectItemDict itemNamesAlreadyUsed:(NSMutableArray *)itemNamesAlreadyUsed newItemNames:(NSMutableArray *)newItemNames {
    
    id object = singleObjectItemDict[@"ItemName"] ? singleObjectItemDict[@"ItemName"] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:@"ItemName"];
    
    NSString *newItemName = [NSString stringWithFormat:@"%@", object];
    
    for (int i=1 ; i<100 ; i++) {
        
        if ([itemNamesAlreadyUsed containsObject:newItemName] || [newItemNames containsObject:newItemName]) {
            
            for (int k=1 ; k<100 ; k++) {
                
                if ([newItemName containsString:[NSString stringWithFormat:@" (%d)", k]]) {
                    
                    newItemName = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:newItemName arrayOfSymbols:@[[NSString stringWithFormat:@" (%d)", k]]];
                    
                    break;
                    
                }
            }
            
            newItemName = [NSString stringWithFormat:@"%@ (%d)", newItemName, i];
            
        } else {
            
            break;
            
        }
        
    }
    
    return newItemName;
}

-(NSMutableDictionary *)Duplicate_GenerateSetDataDict:(NSMutableDictionary *)singleObjectItemDict itemNamesAlreadyUsed:(NSMutableArray *)itemNamesAlreadyUsed newItemNames:(NSMutableArray *)newItemNames {
    
    NSMutableDictionary *setDataDict = [NSMutableDictionary dictionary];
    
    NSString *chosenItemUniqueID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
    NSString *chosenItemID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
    NSString *chosenItemOccurrenceID = [singleObjectItemDict[@"ItemOccurrenceID"] length] > 0 ? [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString] : @"";
    NSString *chosenItemDatePosted = [[[GeneralObject alloc] init] GenerateCurrentDateString];

    for (NSString *key in keyArray) {
        
        if ([key isEqualToString:@"ItemName"]) {
            
            NSString *newItemName = [self Duplicate_GenerateNewItemName:singleObjectItemDict itemNamesAlreadyUsed:itemNamesAlreadyUsed newItemNames:newItemNames];
            
            [newItemNames addObject:newItemName];
            [setDataDict setObject:newItemName forKey:key];
            
        } else if ([key isEqualToString:@"ItemDatePosted"]) {
            
            [setDataDict setObject:chosenItemDatePosted forKey:key];
            
        } else if ([key isEqualToString:@"ItemUniqueID"]) {
            
            [setDataDict setObject:chosenItemUniqueID forKey:key];
            
        } else if ([key isEqualToString:@"ItemID"]) {
            
            [setDataDict setObject:chosenItemID forKey:key];
            
        } else if ([key isEqualToString:@"ItemOccurrenceID"]) {
            
            [setDataDict setObject:chosenItemOccurrenceID forKey:key];
            
        } else if ([key isEqualToString:@"ItemOccurrenceStatus"]) {
            
            [setDataDict setObject:@"None" forKey:key];
            
        } else if ([key isEqualToString:@"ItemStatus"]) {
            
            [setDataDict setObject:@"None" forKey:key];
            
        } else if ([key isEqualToString:@"ItemCompletedDict"]) {
            
            [setDataDict setObject:[NSMutableDictionary dictionary] forKey:key];
            
        } else if ([key isEqualToString:@"ItemInProgressDict"]) {
            
            [setDataDict setObject:[NSMutableDictionary dictionary] forKey:key];
            
        } else {
            
            id object = singleObjectItemDict[key] ? singleObjectItemDict[key] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [setDataDict setObject:object forKey:key];
            
        }
        
    }
    
    return setDataDict;
}


-(void)Duplicate_CompletionBlock:(int)totalQueries completedQueries:(int)completedQueries selectedItemsDict:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr allSetDataDict:(NSMutableDictionary *)allSetDataDict itemUniqueIDDict:(NSDictionary *)itemUniqueIDDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    if (totalQueries == completedQueries) {
       
        /*
         //
         //
         //Update Task List Data
         //
         //
         */
        [self Duplicate_UpdateTaskListData:taskListDict itemUniqueIDDict:itemUniqueIDDict completionHandler:^(BOOL finished) {
            
            [self General_AddMultipleItemsInItemDict_CompletionBlock:allSetDataDict selectedItemsDict:selectedItemsDict objectArr:objectArr Looping:YES completionHandler:^(BOOL finished) {
                
                finishBlock(YES);
                
            }];
            
        }];
        
    }
    
}

#pragma mark Select Option - Mute/Unmute

-(void)MuteUnmute_ResetItemNotifications:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        
        NSMutableArray *userIDArray = [NSMutableArray array];
        NSMutableArray *userIDToRemoveArray = [NSMutableArray array];
        
        [[[NotificationsObject alloc] init] ResetLocalNotificationReminderNotification:singleObjectItemDict homeMembersDict:self->homeMembersDict userIDArray:userIDArray userIDToRemoveArray:userIDToRemoveArray notificationSettingsDict:self->notificationSettingsDict allItemTagsArrays:allItemTagsArrays itemType:self->itemType notificationType:@"" topicDict:self->topicDict completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)MuteUnmute_ResetItemScheduledStartNotifications:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        
        [[[NotificationsObject alloc] init] ResetLocalNotificationScheduledStartNotifications:[singleObjectItemDict mutableCopy] itemType:self->itemType userIDArray:[NSMutableArray array] userIDToRemoveArray:[NSMutableArray array] allItemTagsArrays:allItemTagsArrays homeMembersArray:self->homeMembersArray homeMembersDict:self->homeMembersDict notificationSettingsDict:self->notificationSettingsDict topicDict:self->topicDict completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)MuteUnmute_ResetItemCustomReminderNotifications:(NSMutableDictionary *)singleObjectItemDict completionHandler:(void (^)(BOOL finished))finishBlock {
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        
        [[[NotificationsObject alloc] init] ResetLocalNotificationCustomReminderNotification_LocalOnly:@"" itemType:self->itemType dictToUse:singleObjectItemDict homeMembersDict:self->homeMembersDict homeMembersArray:self->homeMembersArray allItemTagsArrays:allItemTagsArrays completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    });
    
}

-(void)MuteUnmute_UpdateMutedArray:(NSMutableDictionary *)singleObjectItemDict Mute:(BOOL)Mute {
    
    NSString *itemUniqueID = singleObjectItemDict[@"ItemUniqueID"] ? singleObjectItemDict[@"ItemUniqueID"] : @"";
    
    NSMutableArray *mutedItemsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"MutedItems"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"MutedItems"] : [NSMutableArray array];
    
    if (Mute == YES) {
        if ([mutedItemsArray containsObject:itemUniqueID] == NO) { [mutedItemsArray addObject:itemUniqueID]; }
    } else {
        if ([mutedItemsArray containsObject:itemUniqueID] == YES) { [mutedItemsArray removeObject:itemUniqueID]; }
    }
    
    [[NSUserDefaults standardUserDefaults] setObject:mutedItemsArray forKey:@"MutedItems"];
    
}


-(void)MuteUnmute_CompletionBlock:(NSMutableDictionary *)selectedItemsDict objectArr:(NSMutableArray *)objectArr totalQueries:(int)totalQueries completedQueries:(int)completedQueries {
    
    if (totalQueries == completedQueries) {
        
//        double totalProgress = (double)objectArr.count+1/(double)[[self->selectedItemsDict allKeys] count];
//        
//        if (totalProgress < 0) {
//            totalProgress = 0;
//        }
//        
//        if (totalProgress >= 1) {
//            totalProgress = 0.99;
//        }
//        
//        if (totalProgress >= 0.95) {
//            totalProgress = 0.95;
//        }
//        
//        dispatch_async(dispatch_get_main_queue(), ^{
//            
//            [self->progressViewNo1 setProgress:totalProgress animated:YES];
//            
//        });
        
        if ([[[GeneralObject alloc] init] AddToObjectArrAndCheckIfQueryHasEnded:[[selectedItemsDict allKeys] mutableCopy] objectArr:objectArr]) {
            
            dispatch_async(dispatch_get_main_queue(), ^{
                        
                        [self SelectDoneButtonAction:self];
                        [self.customTableView reloadData];
                        [self->progressView setHidden:YES];
                        
                    });
            
        }
        
    }
    
}

#pragma mark - Table View CellForRow Methods

-(NSDictionary *)GenerateSpecificSideBarDict:(NSIndexPath *)indexPath {
    
    NSString *sideBarName = @"";
    NSString *sideBarImage = @"";
    
    
    if (self->sideBarCategorySectionArrayAltered) {
        if ([self->sideBarCategorySectionArrayAltered count] > indexPath.section) {
            if (self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"]) {
                if ([(NSArray *)self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"] count] > indexPath.row) {
                    sideBarName = self->sideBarCategorySectionArrayAltered[indexPath.section][@"Names"][indexPath.row];
                }
            }
        }
    }
    
    if (self->sideBarCategorySectionArrayAltered) {
        if ([self->sideBarCategorySectionArrayAltered count] > indexPath.section) {
            if (self->sideBarCategorySectionArrayAltered[indexPath.section][@"Images"]) {
                if ([(NSArray *)self->sideBarCategorySectionArrayAltered[indexPath.section][@"Images"] count] > indexPath.row) {
                    sideBarImage = self->sideBarCategorySectionArrayAltered[indexPath.section][@"Images"][indexPath.row];
                }
            }
        }
    }
    
    return @{@"Name" : sideBarName, @"Image" : sideBarImage};
}

-(void)GenerateitemAssignedToImage:(UIImageView *)imageViewToCheck index:(int)index dictToUse:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableArray *itemAssignedTo = dictToUse[@"ItemAssignedTo"] && [(NSArray *)dictToUse[@"ItemAssignedTo"] count] > indexPath.row ? [dictToUse[@"ItemAssignedTo"][indexPath.row] mutableCopy] : [NSMutableArray array];
    
    UIColor *backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:0.15f];
    UIColor *textColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    
    NSString *username = @"";
    NSString *profileImageURL = @"";
    
    int finalIndex = 4;
    
    BOOL TaskAssignedToContainsIndex = [itemAssignedTo count] > index;
    BOOL SpecificUserIsAHomeMember = TaskAssignedToContainsIndex == YES ? homeMembersDict[@"UserID"] && [homeMembersDict[@"UserID"] containsObject:itemAssignedTo[index]] : NO;
    
    
    
    if (TaskAssignedToContainsIndex == YES && SpecificUserIsAHomeMember == YES) {
        
        
        
        imageViewToCheck.hidden = NO;
        
        
        
        NSString *specificUserID = itemAssignedTo[index];
        NSDictionary *dataDict = [[[GeneralObject alloc] init] GenerateSpecificUserDataBasedOnKey:@"UserID" object:specificUserID homeMembersDict:homeMembersDict];
        
        username = dataDict[@"Username"];
        profileImageURL = dataDict[@"ProfileImageURL"];
        
        
        
        BOOL CustomProfileImageDoesNotExist = (profileImageURL == nil || profileImageURL.length == 0 || [profileImageURL containsString:@"(null)"] || [profileImageURL isEqualToString:@"xxx"] || [profileImageURL isEqualToString:@"XXX"] || [profileImageURL isEqualToString:@"https://firebasestorage.googleapis.com/v0/b/wedivvy-afe04.appspot.com/o/DefaultImages%2FdefaultProfileImage.png?alt=media&token=6892f430-8337-4327-89a4-53a403d1186c"] || [profileImageURL containsString:@"DefaultImage"]) == YES;
        BOOL ThereAreAtLeastTwoUsersRemaining = [itemAssignedTo count] - index > 1;
        
        BOOL ThingToCheckForGeneratedImage =
        index == finalIndex ?
        (CustomProfileImageDoesNotExist == YES || ThereAreAtLeastTwoUsersRemaining == YES) :
        CustomProfileImageDoesNotExist == YES;
        
        
        
        if (ThingToCheckForGeneratedImage == YES) {
            
            if (index == finalIndex && ThereAreAtLeastTwoUsersRemaining == YES) {
                username = [NSString stringWithFormat:@"+%lu", [itemAssignedTo count] - index];
            }
            
            [imageViewToCheck setImageWithString:username color:backgroundColor circular:YES textAttributes:@{NSFontAttributeName:[UIFont fontWithName:@"Futura-Medium" size:imageViewToCheck.frame.size.height*0.45], NSForegroundColorAttributeName:textColor}];
            
        } else {
            
            [imageViewToCheck sd_setImageWithURL:[NSURL URLWithString:profileImageURL]];
            
        }
        
        
        
    } else {
        
        imageViewToCheck.hidden = YES;
        
    }
    
}

-(void)GenerateitemAssignedToImage_Internal:(UIImageView *)imageViewToCheck index:(int)index indexOfAssignedTo:(int)indexOfAssignedTo dictToUse:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableArray *itemAssignedTo = dictToUse[@"ItemAssignedTo"] && [(NSArray *)dictToUse[@"ItemAssignedTo"] count] > indexPath.row ? [dictToUse[@"ItemAssignedTo"][indexPath.row] mutableCopy] : [NSMutableArray array];
    
    UIColor *backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:0.15f];
    UIColor *textColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    
    NSString *username = @"";
    NSString *profileImageURL = @"";
    
    int finalIndex = 4;
    
    imageViewToCheck.hidden = NO;
    
    
    
    NSString *specificUserID = itemAssignedTo[indexOfAssignedTo];
    NSDictionary *dataDict = [[[GeneralObject alloc] init] GenerateSpecificUserDataBasedOnKey:@"UserID" object:specificUserID homeMembersDict:homeMembersDict];
    
    username = dataDict[@"Username"];
    profileImageURL = dataDict[@"ProfileImageURL"];
    
    
    
    BOOL CustomProfileImageDoesNotExist = (profileImageURL == nil || profileImageURL.length == 0 || [profileImageURL containsString:@"(null)"] || [profileImageURL isEqualToString:@"xxx"] || [profileImageURL isEqualToString:@"XXX"] || [profileImageURL isEqualToString:@"https://firebasestorage.googleapis.com/v0/b/wedivvy-afe04.appspot.com/o/DefaultImages%2FdefaultProfileImage.png?alt=media&token=6892f430-8337-4327-89a4-53a403d1186c"] || [profileImageURL containsString:@"DefaultImage"]) == YES;
    BOOL ThereAreAtLeastTwoUsersRemaining = [itemAssignedTo count] - indexOfAssignedTo > 1;
    
    BOOL ThingToCheckForGeneratedImage =
    index == finalIndex ?
    (CustomProfileImageDoesNotExist == YES || ThereAreAtLeastTwoUsersRemaining == YES) :
    CustomProfileImageDoesNotExist == YES;
    
    
    
    if (ThingToCheckForGeneratedImage == YES) {
        
        if (index == finalIndex && ThereAreAtLeastTwoUsersRemaining == YES) {
            username = [NSString stringWithFormat:@"+%lu", [itemAssignedTo count] - indexOfAssignedTo];
        }
       
        [imageViewToCheck setImageWithString:username color:backgroundColor circular:YES textAttributes:@{NSFontAttributeName:[UIFont fontWithName:@"Futura-Medium" size:imageViewToCheck.frame.size.height*0.45], NSForegroundColorAttributeName:textColor}];
        
    } else {
       
        [imageViewToCheck sd_setImageWithURL:[NSURL URLWithString:profileImageURL]];
        
    }
    
}

-(void)GenerateitemAssignedToImageSpecificUser:(UIImageView *)imageViewToCheck index:(int)index dictToUse:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath specificUserID:(NSString *)specificUserID {
    
    NSMutableArray *itemAssignedTo = dictToUse[@"ItemAssignedTo"] && [(NSArray *)dictToUse[@"ItemAssignedTo"] count] > indexPath.row ? [dictToUse[@"ItemAssignedTo"][indexPath.row] mutableCopy] : [NSMutableArray array];
    
    UIColor *backgroundColor = [[[GeneralObject alloc] init] GenerateAppColor:0.15f];
    UIColor *textColor = [[[GeneralObject alloc] init] GenerateAppColor:1.0f];
    
    NSString *username = @"";
    NSString *profileImageURL = @"";
    
    int finalIndex = 4;
    
    BOOL TaskAssignedToContainsIndex = [itemAssignedTo count] > index;
    BOOL SpecificUserIsAHomeMember = TaskAssignedToContainsIndex == YES ? homeMembersDict[@"UserID"] && [homeMembersDict[@"UserID"] containsObject:specificUserID] : NO;
    
    
    
    if (TaskAssignedToContainsIndex == YES && SpecificUserIsAHomeMember == YES) {
        
        
        
        imageViewToCheck.hidden = NO;
        
        
        
        NSDictionary *dataDict = [[[GeneralObject alloc] init] GenerateSpecificUserDataBasedOnKey:@"UserID" object:specificUserID homeMembersDict:homeMembersDict];
        
        username = dataDict[@"Username"];
        profileImageURL = dataDict[@"ProfileImageURL"];
        
        
        
        BOOL CustomProfileImageDoesNotExist = (profileImageURL == nil || profileImageURL.length == 0 || [profileImageURL containsString:@"(null)"] || [profileImageURL isEqualToString:@"xxx"] || [profileImageURL isEqualToString:@"XXX"] || [profileImageURL isEqualToString:@"https://firebasestorage.googleapis.com/v0/b/wedivvy-afe04.appspot.com/o/DefaultImages%2FdefaultProfileImage.png?alt=media&token=6892f430-8337-4327-89a4-53a403d1186c"] || [profileImageURL containsString:@"DefaultImage"]) == YES;
        BOOL ThereAreAtLeastTwoUsersRemaining = [itemAssignedTo count] - index > 1;
        
        BOOL ThingToCheckForGeneratedImage =
        index == finalIndex ?
        (CustomProfileImageDoesNotExist == YES || ThereAreAtLeastTwoUsersRemaining == YES) :
        CustomProfileImageDoesNotExist == YES;
        
        
        
        if (ThingToCheckForGeneratedImage == YES) {
            
            if (index == finalIndex && ThereAreAtLeastTwoUsersRemaining == YES) {
                username = [NSString stringWithFormat:@"+%lu", [itemAssignedTo count] - index];
            }
            
            [imageViewToCheck setImageWithString:username color:backgroundColor circular:YES textAttributes:@{NSFontAttributeName:[UIFont fontWithName:@"Futura-Medium" size:imageViewToCheck.frame.size.height*0.45], NSForegroundColorAttributeName:textColor}];
            
        } else {
            
            [imageViewToCheck sd_setImageWithURL:[NSURL URLWithString:profileImageURL]];
            
        }
        
        
        
    } else {
        
        imageViewToCheck.hidden = YES;
        
    }
    
}

-(NSString *)GenerateCompletedLabel:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    BOOL TaskHasNoDueDate = [[[BoolDataObject alloc] init] TaskHasNoDueDate:singleObjectItemDict itemType:itemType];
    BOOL TaskWasCompletedByMe = [[[BoolDataObject alloc] init] TaskCompletedBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
    BOOL TaskIsFullyCompleted = [[[BoolDataObject alloc] init] TaskIsFullyCompleted:singleObjectItemDict itemType:itemType homeMembersDict:homeMembersDict];
    BOOL TaskIsCompleteAsNeeded = [[[BoolDataObject alloc] init] TaskIsCompleteAsNeeded:singleObjectItemDict itemType:itemType];
    BOOL TaskIsRepeatingWhenCompleted = [[[BoolDataObject alloc] init] TaskIsRepeatingWhenCompleted:singleObjectItemDict itemType:itemType];
    
    NSString *itemDueDate = dictToUse[@"ItemDueDate"] && [(NSArray *)dictToUse[@"ItemDueDate"] count] > indexPath.row ? dictToUse[@"ItemDueDate"][indexPath.row] : @"";
    NSString *itemPastDue = dictToUse[@"ItemPastDue"] && [(NSArray *)dictToUse[@"ItemPastDue"] count] > indexPath.row ? dictToUse[@"ItemPastDue"][indexPath.row] : @"";
    NSString *itemGracePeriod = dictToUse[@"ItemGracePeriod"] && [(NSArray *)dictToUse[@"ItemGracePeriod"] count] > indexPath.row ? dictToUse[@"ItemGracePeriod"][indexPath.row] : @"";
    
    NSString *subLabel = @"";
    
    if (TaskIsFullyCompleted == YES && TaskIsCompleteAsNeeded == NO) {
        
        subLabel = @"Completed";
        
    } else if (TaskWasCompletedByMe == YES && TaskIsFullyCompleted == NO && TaskIsCompleteAsNeeded == NO) {
        
        subLabel = @"Waiting for others...";
        
    } else if ((TaskHasNoDueDate == YES || TaskIsRepeatingWhenCompleted == YES) && TaskIsCompleteAsNeeded == NO) {
        
        subLabel = @"No Due Date";
        
    } else if (TaskIsCompleteAsNeeded == YES) {
        
        subLabel = [self GenerateCompletedLabelItemCompleteAsNeeded:dictToUse indexPath:indexPath];
        
    } else {
        
        subLabel = [[[GeneralObject alloc] init] GetDisplayTimeRemainingUntilDateStartingFromCurrentDate:itemDueDate shortStyle:NO reallyShortStyle:NO];
        
    }
    
    
    
    BOOL TaskIsPastDue = [subLabel isEqualToString:@"Past due"];
    
    //If Task Is Past Due Check If It Is Still Past Due With It's Grace Period
    if (TaskIsPastDue == YES) {
        subLabel = [[[GeneralObject alloc] init] GenerateDisplayTimeUntilDisplayTimeStartingFromCustomStartDate:itemGracePeriod itemDueDate:itemDueDate shortStyle:NO reallyShortStyle:NO];
    }
    
    
    
    BOOL TaskIsStillPastDue = ([subLabel isEqualToString:@"Past due"] || [subLabel isEqualToString:@""]);
    
    //If Task Is Still Past Due With It's Grace Period Continue
    if (TaskIsStillPastDue == YES) {
        
        
        NSDictionary *lastPastDueDict = [self GenerateLastOccurrencePastDue:dictToUse indexPath:indexPath];
        
        NSString *lastAddItem = lastPastDueDict[@"Add Time"];
        
        
        BOOL TaskPastDueDoesNotExpire = ([itemPastDue isEqualToString:@"Never"] ||
                                         [itemPastDue isEqualToString:@"Until Completed"] ||
                                         [lastAddItem isEqualToString:@"Unlimited"]);
        
        //If Past Due Task Does Not Expire Then Find Time Since It's Due Date Passed
        //Else Find How Much Time Until Past Due Task Expires
        if (TaskPastDueDoesNotExpire == YES) {
            
            subLabel = [NSString stringWithFormat:@"Due %@", [[[GeneralObject alloc] init] GetDisplayTimeSinceDate:itemDueDate shortStyle:NO reallyShortStyle:NO]];
            
        } else {
            
            subLabel = [self GenerateSubLabelThatHadMoreTimeAddedToComplete:dictToUse indexPath:indexPath subLabel:subLabel];
            
        }
        
    }
    
    
    
    subLabel = [self GenerateSubLabelIfTaskIsInProgress:dictToUse indexPath:indexPath subLabel:subLabel];
    
    subLabel = [self GenerateSubLabelIfTaskIsScheduledToBegin:dictToUse indexPath:indexPath subLabel:subLabel];
    
    subLabel = [self GenerateSubLabelIfTaskIsPasued:dictToUse indexPath:indexPath subLabel:subLabel];
    
    
    
    return subLabel;
}

-(UIImage * _Nullable)GenerateitemPriorityImage:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSString *itemPriority = dictToUse[@"ItemPriority"] && [(NSArray *)dictToUse[@"ItemPriority"] count] > indexPath.row ? dictToUse[@"ItemPriority"][indexPath.row] : @"";
    
    UIImage *imageToReturn = nil;
    
    if ([itemPriority isEqualToString:@"High"]) {
        
        imageToReturn = [UIImage imageNamed:@"MainCellIcons.HighPriority"];
        
    } else if ([itemPriority isEqualToString:@"Medium"]) {
        
        imageToReturn = [UIImage imageNamed:@"MainCellIcons.MediumPriority"];
        
    } else if ([itemPriority isEqualToString:@"Low"]) {
        
        imageToReturn = [UIImage imageNamed:@"MainCellIcons.LowPriority"];
        
    }
    
    return imageToReturn;
    
}

-(NSString *)GenerateitemPendingRequestLabel:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    int totalPending = 0;
    
    NSMutableDictionary *itemApprovalRequests = dictToUse[@"ItemApprovalRequests"]  && [(NSArray *)dictToUse[@"ItemApprovalRequests"] count] > indexPath.row ? [dictToUse[@"ItemApprovalRequests"][indexPath.row] mutableCopy] : [NSMutableDictionary dictionary];
    NSString *itemCreatedBy = dictToUse[@"ItemCreatedBy"]  && [(NSArray *)dictToUse[@"ItemCreatedBy"] count] > indexPath.row ? dictToUse[@"ItemCreatedBy"][indexPath.row] : @"";
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:itemApprovalRequests classArr:@[[NSDictionary class], [NSMutableDictionary class]]];
    
    //Dict crash
    if (ObjectIsKindOfClass == YES) {
        
        for (NSString *key in [itemApprovalRequests allKeys]) {
            
            NSString *approvalRequestStatus = itemApprovalRequests[key] && itemApprovalRequests[key][@"ApprovalRequestStatus"] ? itemApprovalRequests[key][@"ApprovalRequestStatus"] : @"";
            
            if ([approvalRequestStatus isEqualToString:@"Pending"] &&
                [itemCreatedBy isEqualToString:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]]) {
                
                totalPending += 1;
                
            }
            
        }
        
    }
    
    return [NSString stringWithFormat:@"%d", totalPending];
}

#pragma mark - Table View NumberOfRows Methods

-(int)GenerateLowestArrayCountFromMainSectionsArray:(NSMutableDictionary *)dataDisplayDict sectionsArray:(NSMutableArray *)sectionsArray section:(NSInteger)section keyArray:(NSArray *)keyArray {
    
    int lowestNumber = 100000;
    
    for (NSString *key in keyArray) {
        
        if (sectionsArray.count > section) {
            
            NSString *currentSection = sectionsArray[section];
            
            if (dataDisplayDict[currentSection]) {
                
                NSMutableDictionary *currentDict = [dataDisplayDict[currentSection] mutableCopy];
                
                if (currentDict[key]) {
                    
                    if (lowestNumber > [(NSArray *)currentDict[key] count]) {
                        
                        lowestNumber = (int)[(NSArray *)currentDict[key] count];
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    if (lowestNumber == 100000) {
        lowestNumber = 0;
    }
    
    return lowestNumber;
    
}

-(int)GenerateLowestArrayCountFromSideBarSectionsArray:(NSMutableArray *)dataDisplayDict sectionsArray:(NSMutableArray *)sectionsArray section:(NSInteger)section {
    
    int lowestNumber = 100000;
    
    if ([dataDisplayDict count] > section) {
        
        NSMutableDictionary *currentDict = dataDisplayDict[section] ? [dataDisplayDict[section] mutableCopy] : [NSMutableDictionary dictionary];
        
        if (currentDict[@"Names"]) {
            
            if (lowestNumber > [(NSArray *)currentDict[@"Names"] count]) {
                
                lowestNumber = (int)[(NSArray *)currentDict[@"Names"] count];
                
            }
            
        }
        
    }
    
    if (lowestNumber == 100000) {
        lowestNumber = 0;
    }
    
    return lowestNumber;
    
}

#pragma mark - Table View WillDisplayCell Methods

-(void)SwipeTableViewCell:(UIPanGestureRecognizer *)recognizer {
    
    if(!_customTableView.isDragging && !_customTableView.isDecelerating)
    {
        
        static dispatch_once_t leftSideToken = 0;
        static dispatch_once_t leftSideTokenNo1 = 0;
        static dispatch_once_t rightSideToken = 0;
        static dispatch_once_t rightSideTokenNo1 = 0;
        
        CGPoint beginLocation = [recognizer locationInView:_customTableView];
        NSIndexPath *indexPath = [_customTableView indexPathForRowAtPoint:beginLocation];
        MainCell *cell = [_customTableView cellForRowAtIndexPath : indexPath];
        
        __block BOOL TaskIsPinned = NO;
        __block BOOL TaskCanBeCompletedInTaskBySpecificUser = NO;
        __block BOOL TaskCompletedBySpecificUser = NO;
        __block BOOL TaskInProgressBySpecificUser = NO;
        __block BOOL TaskHasBeenMuted = NO;
        __block BOOL UserShouldReceiveNotificationsForTask = NO;
        
        [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.row] forKey:@"TempIndexPathRow"];
        [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.section] forKey:@"TempIndexPathSection"];
        
        NSMutableDictionary *dictToUse = [self General_GenerateSectionItemDict:indexPath];
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:keyArray indexPath:indexPath];
        
        BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:singleObjectItemDict[@"ItemID"] classArr:@[[NSArray class], [NSMutableArray class]]];
        
        if ((singleObjectItemDict && singleObjectItemDict[@"ItemID"] && ObjectIsKindOfClass == YES) == NO) {
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            
            TaskCanBeCompletedInTaskBySpecificUser = [[[BoolDataObject alloc] init] TaskCanBeCompletedInTaskBySpecificUser:singleObjectItemDict itemType:itemType userID:userID homeMembersDict:homeMembersDict];
            TaskCompletedBySpecificUser = [[[BoolDataObject alloc] init] TaskCompletedBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            TaskInProgressBySpecificUser = [[[BoolDataObject alloc] init] TaskInProgressBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            TaskHasBeenMuted = [[[BoolDataObject alloc] init] TaskHasBeenMuted:singleObjectItemDict];
            UserShouldReceiveNotificationsForTask = [[[BoolDataObject alloc] init] UserShouldReceiveNotificationsForTask:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] homeMembersDict:homeMembersDict];
            
        }
        
        self->selectedItemsDict = [NSMutableDictionary dictionary];
        
        NSString *itemUniqueID = singleObjectItemDict && singleObjectItemDict[@"ItemUniqueID"] ? singleObjectItemDict[@"ItemUniqueID"] : @"xxx";
        
        [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
        
        for (NSString *itemUniqueID in [selectedItemsDict allKeys]) {
            
            if (pinnedDict[itemUniqueID]) {
                
                TaskIsPinned = YES;
                
            }
            
        }
        
        
        
        float starting = self.view.frame.size.width*0.5 - ((self.view.frame.size.width*0.90338164)*0.5);
        
        _notificationitemReminderLabel.text = @"";
        
        CGPoint centerPoint = [recognizer translationInView:recognizer.view];
        
        int inProgressBottomLimit = -1*(cell.rightSlideViewImage.frame.size.width + 52);
        int completedBottomLimit = -1*(cell.rightSlideViewImage.frame.size.width + 8);
        
        int pinBottomLimit = (starting + cell.leftSlideViewImage.frame.size.width + 32);
        int muteBottomLimit = (starting + cell.leftSlideViewImage.frame.size.width + 76);
        
        BOOL ShowPreCompletionImage = (recognizer.view.frame.origin.x < starting && recognizer.view.frame.origin.x > completedBottomLimit);
        BOOL ShowCompletionImage = (recognizer.view.frame.origin.x < completedBottomLimit && recognizer.view.frame.origin.x > inProgressBottomLimit);
        BOOL ShowInProgressImage = (recognizer.view.frame.origin.x < inProgressBottomLimit);
        
        BOOL ShowPrePinImage = (recognizer.view.frame.origin.x > starting && recognizer.view.frame.origin.x < pinBottomLimit);
        BOOL ShowPinImage = (recognizer.view.frame.origin.x > pinBottomLimit && recognizer.view.frame.origin.x < muteBottomLimit);
        BOOL ShowMuteImage = (recognizer.view.frame.origin.x > muteBottomLimit && [[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES);
        
        CGFloat amount = centerPoint.x * 0.5f;
        
        if (ShowPreCompletionImage == YES) {
            
            if (TaskCompletedBySpecificUser) {
                
                cell.slideView.backgroundColor = [UIColor systemRedColor];
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"xmark.circle"];
                
            } else {
                
                cell.slideView.backgroundColor = [UIColor systemGreenColor];
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"checkmark.circle"];
                
            }
            
        } else if (ShowCompletionImage == YES) {
            
            if (TaskCompletedBySpecificUser) {
                
                cell.slideView.backgroundColor = [UIColor systemRedColor];
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"xmark.circle.fill"];
                
            } else {
                
                cell.slideView.backgroundColor = [UIColor systemGreenColor];
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"checkmark.circle.fill"];
                
            }
            
            dispatch_once(&rightSideToken, ^{
                
                if (ShowCompletionImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
                        
                        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Swipe Actions" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                        
                    }
                    
                    UIImpactFeedbackGenerator *myGen = [[UIImpactFeedbackGenerator alloc] initWithStyle:(UIImpactFeedbackStyleHeavy)];
                    [myGen impactOccurred];
                    
                    [UIView animateWithDuration:0.25 delay:0 options:0 animations:^{
                        
                        cell.rightSlideViewImage.transform = CGAffineTransformMakeScale(1.35, 1.35);
                        
                    } completion:^(BOOL finished) {
                        
                        [UIView animateWithDuration:0.25 animations:^{
                            
                            cell.rightSlideViewImage.transform = CGAffineTransformIdentity;
                            
                        }];
                        
                    }];
                    
                }
                
            });
            
        } else if (ShowInProgressImage == YES) {
            
            cell.slideView.backgroundColor = [UIColor systemYellowColor];
            
            if (TaskInProgressBySpecificUser) {
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"clock.badge.xmark.fill"];
                
            } else {
                
                cell.rightSlideViewImage.image = [UIImage systemImageNamed:@"clock.badge.checkmark.fill"];
                
            }
            
            dispatch_once(&rightSideTokenNo1, ^{
                
                if (ShowInProgressImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
                        
                        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Swipe Actions" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                        
                    }
                    
                    UIImpactFeedbackGenerator *myGen = [[UIImpactFeedbackGenerator alloc] initWithStyle:(UIImpactFeedbackStyleHeavy)];
                    [myGen impactOccurred];
                    
                    [UIView animateWithDuration:0.25 delay:0 options:0 animations:^{
                        
                        cell.rightSlideViewImage.transform = CGAffineTransformMakeScale(1.35, 1.35);
                        
                    } completion:^(BOOL finished) {
                        
                        [UIView animateWithDuration:0.25 animations:^{
                            
                            cell.rightSlideViewImage.transform = CGAffineTransformIdentity;
                            
                        }];
                        
                    }];
                    
                }
                
            });
            
        } else if (ShowPrePinImage == YES) {
            
            cell.slideView.backgroundColor = [UIColor colorWithRed:255.0f/255.0f green:190.0f/255.0f blue:0.0/255.0f alpha:1.0f];
            
            if (TaskIsPinned) {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"pin.slash"];
                
            } else {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"pin"];
                
            }
            
        } else if (ShowPinImage == YES) {
            
            cell.slideView.backgroundColor = [UIColor colorWithRed:255.0f/255.0f green:190.0f/255.0f blue:0.0/255.0f alpha:1.0f];
            
            if (TaskIsPinned) {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"pin.slash.fill"];
                
            } else {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"pin.fill"];
                
            }
            
            dispatch_once(&leftSideToken, ^{
                
                if (ShowPinImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
                        
                        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Swipe Actions" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                        
                    }
                    
                    UIImpactFeedbackGenerator *myGen = [[UIImpactFeedbackGenerator alloc] initWithStyle:(UIImpactFeedbackStyleHeavy)];
                    [myGen impactOccurred];
                    
                    [UIView animateWithDuration:0.25 delay:0 options:0 animations:^{
                        
                        cell.leftSlideViewImage.transform = CGAffineTransformMakeScale(1.35, 1.35);
                        
                    } completion:^(BOOL finished) {
                        
                        [UIView animateWithDuration:0.25 animations:^{
                            
                            cell.leftSlideViewImage.transform = CGAffineTransformIdentity;
                            
                        }];
                        
                    }];
                    
                }
                
            });
            
        } else if (ShowMuteImage == YES) {
            
            cell.slideView.backgroundColor = UserShouldReceiveNotificationsForTask ? [UIColor systemPurpleColor] : [UIColor lightGrayColor];
            
            if (TaskHasBeenMuted == NO) {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"bell.slash.fill"];
                
            } else {
                
                cell.leftSlideViewImage.image = [UIImage systemImageNamed:@"bell.fill"];
                
            }
            
            dispatch_once(&leftSideTokenNo1, ^{
                
                if (ShowMuteImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
                        
                        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Swipe Actions" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                        
                    }
                    
                    UIImpactFeedbackGenerator *myGen = [[UIImpactFeedbackGenerator alloc] initWithStyle:(UIImpactFeedbackStyleHeavy)];
                    [myGen impactOccurred];
                    
                    [UIView animateWithDuration:0.25 delay:0 options:0 animations:^{
                        
                        cell.leftSlideViewImage.transform = CGAffineTransformMakeScale(1.35, 1.35);
                        
                    } completion:^(BOOL finished) {
                        
                        [UIView animateWithDuration:0.25 animations:^{
                            
                            cell.leftSlideViewImage.transform = CGAffineTransformIdentity;
                            
                        }];
                        
                    }];
                    
                }
                
            });
            
        }
        
        BOOL LeftSideShouldNotShow = NO;//(TaskHasBeenMuted == NO || UserShouldReceiveNotificationsForTask == NO);
        BOOL RightSideShouldNotShow = TaskCanBeCompletedInTaskBySpecificUser == NO;
        
        if ((LeftSideShouldNotShow && recognizer.view.center.x + amount < cell.slideView.center.x) ||
            (RightSideShouldNotShow && recognizer.view.center.x + amount > cell.slideView.center.x) ||
            (LeftSideShouldNotShow == NO && RightSideShouldNotShow == NO)){
            
            recognizer.view.center = CGPointMake(recognizer.view.center.x + amount, recognizer.view.center.y);
            [recognizer setTranslation:CGPointZero inView:recognizer.view];
            
            if (recognizer.view.frame.origin.x > completedBottomLimit && recognizer.view.frame.origin.x < starting) {
                
                CGRect newRect = cell.rightSlideViewImage.frame;
                newRect.origin.x = newRect.origin.x + amount;
                cell.rightSlideViewImage.frame = newRect;
                
            } else if (recognizer.view.frame.origin.x < pinBottomLimit && recognizer.view.frame.origin.x > starting) {
                
                CGRect newRect = cell.leftSlideViewImage.frame;
                newRect.origin.x = newRect.origin.x + amount;
                cell.leftSlideViewImage.frame = newRect;
                
            }
            
            if (recognizer.state == UIGestureRecognizerStateEnded)
            {
                
                leftSideToken = 0;
                leftSideTokenNo1 = 0;
                rightSideToken = 0;
                rightSideTokenNo1 = 0;
                
                [UIView animateWithDuration:0.25 animations:^{
                    
                    CGRect newRect = recognizer.view.frame;
                    newRect.origin.x = starting;
                    recognizer.view.frame = newRect;
                    
                    newRect = cell.rightSlideViewImage.frame;
                    newRect.origin.x = cell.mainView.frame.size.width + 8;
                    cell.rightSlideViewImage.frame = newRect;
                    
                    newRect = cell.leftSlideViewImage.frame;
                    newRect.origin.x = -newRect.size.width - 8;
                    cell.leftSlideViewImage.frame = newRect;
                    
                    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.row] forKey:@"TempIndexPathRow"];
                    [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.section] forKey:@"TempIndexPathSection"];
                    
                    if (ShowCompletionImage == YES) {
                        
                        if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                            
                            NSString *completedUncompletedString = TaskCompletedBySpecificUser == YES ? @"Uncomplete" : @"Complete";
                            
                            [self SelectOptionCompleteUncomplete:completedUncompletedString];
                            
                        }
                        
                    } else if (ShowInProgressImage == YES) {
                        
                        if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                            
                            NSString *inProgressNotInProgressString = TaskInProgressBySpecificUser == YES ? @"Not In Progress" : @"In Progress";
                            
                            [self SelectOptionInProgressNotInProgress:inProgressNotInProgressString];
                            
                        }
                        
                    } else if (ShowPinImage == YES) {
                        
                        if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                            
                            [self SelectOptionPinUnpin:self];
                            
                        }
                        
                    } else if (ShowMuteImage == YES && UserShouldReceiveNotificationsForTask == YES) {
                        
                        if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                            
                            [self SelectOptionMuteUnmute:self];
                            
                        }
                        
                    }
                    
                } completion:^(BOOL finished) {
                    
                    cell.slideView.backgroundColor = self.view.backgroundColor;
                    
                }];
                
                
            }
            
        } else if (recognizer.state == UIGestureRecognizerStateEnded) {
            
            leftSideToken = 0;
            leftSideTokenNo1 = 0;
            rightSideToken = 0;
            rightSideTokenNo1 = 0;
            
            [UIView animateWithDuration:0.25 animations:^{
                
                CGRect newRect = recognizer.view.frame;
                newRect.origin.x = starting;
                recognizer.view.frame = newRect;
                
                newRect = cell.rightSlideViewImage.frame;
                newRect.origin.x = cell.mainView.frame.size.width + 8;
                cell.rightSlideViewImage.frame = newRect;
                
                newRect = cell.leftSlideViewImage.frame;
                newRect.origin.x = -newRect.size.width - 8;
                cell.leftSlideViewImage.frame = newRect;
                
                [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.row] forKey:@"TempIndexPathRow"];
                [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%ld", (long)indexPath.section] forKey:@"TempIndexPathSection"];
                
                if (ShowCompletionImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                        
                        NSString *completedUncompletedString = TaskCompletedBySpecificUser == YES ? @"Uncomplete" : @"Complete";
                        
                        [self SelectOptionCompleteUncomplete:completedUncompletedString];
                        
                    }
                    
                } else if (ShowInProgressImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                        
                        NSString *inProgressNotInProgressString = TaskInProgressBySpecificUser == YES ? @"Not In Progress" : @"In Progress";
                        
                        [self SelectOptionInProgressNotInProgress:inProgressNotInProgressString];
                        
                    }
                    
                } else if (ShowPinImage == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                        
                        [self SelectOptionPinUnpin:self];
                        
                    }
                    
                } else if (ShowMuteImage == YES && UserShouldReceiveNotificationsForTask == YES) {
                    
                    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
                        
                        [self SelectOptionMuteUnmute:self];
                        
                    }
                    
                }
                
            } completion:^(BOOL finished) {
                
                cell.slideView.backgroundColor = self.view.backgroundColor;
                
            }];
            
        }
        
    }
    
}

-(void)AdjustSlideView:(UIView *)mainView cell:(MainCell *)cell {
    
    cell.slideView.frame = mainView.frame;
    cell.leftSlideCoverView.frame = CGRectMake(0, mainView.frame.origin.y, mainView.frame.origin.x, mainView.frame.size.height);
    cell.rightSlideCoverView.frame = CGRectMake(mainView.frame.origin.x + cell.slideView.frame.size.width, mainView.frame.origin.y, mainView.frame.origin.x, mainView.frame.size.height);
    
    CGFloat height = CGRectGetHeight(mainView.bounds);
    CGFloat width = CGRectGetWidth(mainView.bounds);
    
    cell.leftSlideViewImage.frame = CGRectMake(-20 - 8, 0, 20, height);
    cell.rightSlideViewImage.frame = CGRectMake(width + 8, 0, 20, height);
    
}

-(void)GenerateItemAssignedToImageBorderColor:(UIImageView *)imageViewToCheck index:(int)index dictToUse:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableArray *itemAssignedTo = dictToUse[@"ItemAssignedTo"] && [(NSArray *)dictToUse[@"ItemAssignedTo"] count] > indexPath.row ? [dictToUse[@"ItemAssignedTo"][indexPath.row] mutableCopy] : [NSMutableArray array];
    
    BOOL TaskAssignedToContainsIndex = [itemAssignedTo count] > index;
    
    int finalIndex = 4;
    
    if (TaskAssignedToContainsIndex == YES) {
        
        BOOL SpecificUserIsAHomeMember = TaskAssignedToContainsIndex == YES && homeMembersDict[@"UserID"] && [homeMembersDict[@"UserID"] containsObject:itemAssignedTo[index]];
        BOOL ThereAreAtLeastTwoUsersRemaining = [itemAssignedTo count] - index > 1;
        
        BOOL ThingToCheckForColoredLayer = YES;
        
        if (index == finalIndex) {
            ThingToCheckForColoredLayer = (SpecificUserIsAHomeMember == YES && ThereAreAtLeastTwoUsersRemaining == NO);
        }
        
        if (ThingToCheckForColoredLayer == YES) {
            
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
            
            NSString *userID = TaskAssignedToContainsIndex == YES ? itemAssignedTo[index] : @"";
            
            BOOL TaskCompletedBySpecificUser = [[[BoolDataObject alloc] init] TaskCompletedBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskInProgressBySpecificUser = [[[BoolDataObject alloc] init] TaskInProgressBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskWontDoBySpecificUser = [[[BoolDataObject alloc] init] TaskWontDoBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskApprovalRequestPendingBySpecificUser = [[[BoolDataObject alloc] init] TaskApprovalRequestPendingBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskIsCompleteAsNeeded = [[[BoolDataObject alloc] init] TaskIsCompleteAsNeeded:singleObjectItemDict itemType:itemType];
            
            if (TaskWontDoBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor colorWithRed:186.0f/255.0f green:188.0f/255.0f blue:190.0f/255.0f alpha:1.0f].CGColor;
                
            } else if (TaskApprovalRequestPendingBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemBlueColor].CGColor;
                
            } else if (TaskInProgressBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemYellowColor].CGColor;
                
            } else if (TaskCompletedBySpecificUser == YES && TaskIsCompleteAsNeeded == NO) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemGreenColor].CGColor;
                
            }
            
        }
        
    }
    
}

-(void)GenerateItemAssignedToImageBorderColor_Internal:(UIImageView *)imageViewToCheck index:(int)index indexOfAssignedTo:(int)indexOfAssignedTo dictToUse:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableArray *itemAssignedTo = dictToUse[@"ItemAssignedTo"] && [(NSArray *)dictToUse[@"ItemAssignedTo"] count] > indexPath.row ? [dictToUse[@"ItemAssignedTo"][indexPath.row] mutableCopy] : [NSMutableArray array];
    
    BOOL TaskAssignedToContainsIndex = [itemAssignedTo count] > indexOfAssignedTo;
    
    int finalIndex = 4;
    
    if (TaskAssignedToContainsIndex == YES) {
        
        BOOL SpecificUserIsAHomeMember = TaskAssignedToContainsIndex == YES && homeMembersDict[@"UserID"] && [homeMembersDict[@"UserID"] containsObject:itemAssignedTo[indexOfAssignedTo]];
        BOOL ThereAreAtLeastTwoUsersRemaining = [itemAssignedTo count] - indexOfAssignedTo > 1;
        
        BOOL ThingToCheckForColoredLayer = YES;
        
        if (index == finalIndex) {
            ThingToCheckForColoredLayer = (SpecificUserIsAHomeMember == YES && ThereAreAtLeastTwoUsersRemaining == NO);
        }
        
        if (ThingToCheckForColoredLayer == YES) {
            
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
            
            NSString *userID = TaskAssignedToContainsIndex == YES ? itemAssignedTo[indexOfAssignedTo] : @"";
            
            BOOL TaskCompletedBySpecificUser = [[[BoolDataObject alloc] init] TaskCompletedBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskInProgressBySpecificUser = [[[BoolDataObject alloc] init] TaskInProgressBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskWontDoBySpecificUser = [[[BoolDataObject alloc] init] TaskWontDoBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskApprovalRequestPendingBySpecificUser = [[[BoolDataObject alloc] init] TaskApprovalRequestPendingBySpecificUser:singleObjectItemDict itemType:itemType userID:userID];
            BOOL TaskIsCompleteAsNeeded = [[[BoolDataObject alloc] init] TaskIsCompleteAsNeeded:singleObjectItemDict itemType:itemType];
            
            if (TaskWontDoBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor colorWithRed:186.0f/255.0f green:188.0f/255.0f blue:190.0f/255.0f alpha:1.0f].CGColor;
                
            } else if (TaskApprovalRequestPendingBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemBlueColor].CGColor;
                
            } else if (TaskInProgressBySpecificUser == YES) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemYellowColor].CGColor;
                
            } else if (TaskCompletedBySpecificUser == YES && TaskIsCompleteAsNeeded == NO) {
                
                imageViewToCheck.layer.borderColor = [UIColor systemGreenColor].CGColor;
                
            }
            
        }
        
    }
    
}

-(NSDictionary *)GenerateCheckmarkColor:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSString *itemColor = dictToUse[@"ItemColor"] && [(NSArray *)dictToUse[@"ItemColor"] count] > indexPath.row ? dictToUse[@"ItemColor"][indexPath.row] : @"";
    
    UIColor *unselectedColor = [UIColor colorWithRed:236.0f/255.0f green:238.0f/255.0f blue:240.0f/255.0f alpha:1.0f];
    UIColor *selectedColor = [UIColor systemGreenColor];
    
    if ([[[GeneralObject alloc] init] GenerateColorOptionFromColorString:itemColor] != [UIColor clearColor]) {
        
        unselectedColor = [[[GeneralObject alloc] init] GenerateColorOptionFromColorString:itemColor];
        selectedColor =  [[[GeneralObject alloc] init] GenerateColorOptionFromColorString:itemColor];
        
    }
    
    return @{@"SelectedColor" : selectedColor, @"UnselectedColor" : unselectedColor};
    
}

-(int)GenerateIndexOfFinalFolderSection {
    
    int finalIndex = colorsSection;
    
    
    
    finalIndex = (int)[self->sideBarCategorySectionArrayAltered count];
    
    
    
    
    
    for (int i=colorsSection; i<[self->sideBarCategorySectionArrayAltered count] ; i++) {
        
        BOOL TaskListBelongsToFolder = NO;
        NSMutableArray *IDArray = self->sideBarCategorySectionArrayAltered[i][@"IDs"];
        
        if ([IDArray count] > 0) {
            
            NSString *taskListID = IDArray[0];
            
            for (NSString *folderID in self->folderDict[@"FolderID"]) {
                
                NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
                NSMutableDictionary *folderTaskLists = self->folderDict[@"FolderTaskLists"] && [(NSArray *)self->folderDict[@"FolderTaskLists"] count] > index ? [self->folderDict[@"FolderTaskLists"][index] mutableCopy] : [NSMutableDictionary dictionary];
                
                for (NSString *innerTaskListID in [folderTaskLists allKeys]) {
                    
                    if ([taskListID isEqualToString:innerTaskListID]) {
                        
                        TaskListBelongsToFolder = YES;
                        break;
                        
                    }
                    
                }
                
            }
            
        }
        
        if (TaskListBelongsToFolder == YES) {
            
            finalIndex = i;
            break;
            
        }
        
    }
    
    
    
    return finalIndex;
}

#pragma mark - Table View DidSelect Methods

-(void)DidSelectTask:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    if (self->EverythingIsThere == YES) {
        
        NSMutableArray *itemNamesAlreadyUsed = self->itemDict && self->itemDict[@"ItemName"] && self->itemDict[@"ItemName"] ? [self->itemDict[@"ItemName"] mutableCopy] : [NSMutableArray array];
        NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
        NSMutableArray *allItemTagsArrays = [self GenerateAllItemTagsArrays:self->itemDict];
        NSMutableArray *allItemIDsArrays = [self GenerateNumberOfValidTasksInArrayForm];
        
        NSString *itemID = dictToUse[@"ItemID"] && [(NSArray *)dictToUse[@"ItemID"] count] > indexPath.row ? dictToUse[@"ItemID"][indexPath.row] : nil;
        NSString *itemOccurrenceID = dictToUse[@"ItemOccurrenceID"] && [(NSArray *)dictToUse[@"ItemOccurrenceID"] count] > indexPath.row ? dictToUse[@"ItemOccurrenceID"][indexPath.row] : nil;
        
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
      
        [[[PushObject alloc] init] PushToViewTaskViewController:itemID itemOccurrenceID:itemOccurrenceID itemDictFromPreviousPage:singleObjectItemDict homeMembersArray:homeMembersArray homeMembersDict:homeMembersDict itemOccurrencesDict:itemOccurrencesDict folderDict:folderDict taskListDict:[taskListDict mutableCopy] templateDict:templateDict draftDict:draftDict notificationSettingsDict:notificationSettingsDict topicDict:topicDict itemNamesAlreadyUsed:itemNamesAlreadyUsed allItemAssignedToArrays:allItemAssignedToArrays allItemTagsArrays:allItemTagsArrays allItemIDsArrays:allItemIDsArrays currentViewController:self Superficial:NO];
    
    } else {
        
        [[[GeneralObject alloc] init] CreateAlert:@"Oops!" message:@"We're still processing some data, please wait until WeDivvy has fully loaded. 😄" currentViewController:self];
        
    }
    
}

-(void)DidSelectOption:(NSString *)itemID itemUniqueID:(NSString *)itemUniqueID indexPath:(NSIndexPath *)indexPath singleObjectItemDict:(NSMutableDictionary *)singleObjectItemDict {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Selected %@ For %@", itemID, itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    BOOL TaskWasAlreadySelected = selectedItemsDict[itemUniqueID];
     
        [self.customTableView beginUpdates];
        [self.customTableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
        [self.customTableView endUpdates];
        
        if (TaskWasAlreadySelected == YES) {
            
            [selectedItemsDict removeObjectForKey:itemUniqueID];
            
            BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
            
            NSString *mainTableViewSectionName = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > indexPath.section ? [dataDisplaySectionsArray objectAtIndex:indexPath.section] : @"";
            
            BOOL SectionWasAlreadySelected = selectedSectionsDict[mainTableViewSectionName];
            
            if (SectionWasAlreadySelected == YES) {
                
                [selectedSectionsDict removeObjectForKey:mainTableViewSectionName];
                
            }
            
        } else {
            
            if ([[selectedItemsDict allKeys] containsObject:itemUniqueID] == NO &&
                itemUniqueID != nil &&
                itemUniqueID != NULL &&
                [itemUniqueID containsString:@"(null)"] == NO &&
                [itemUniqueID length] > 0) {
                
                [selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                
            }
            
            [self CheckIfSectionIsSelected:indexPath];
            
        }
        
        selectedAmountLabel.text = [NSString stringWithFormat:@"%lu Selected", (unsigned long)selectedItemsDict.count];
        
        [self SelectTaskUpdateBottomViewUI];
        [self SetUpBottomEllipsisContextMenu];
        [self SetUpBottomFolderContextMenu];
        
        [self SelectDeselectItems_CheckIfAllTasksSelected];
  
}

-(void)DidSelectNoSignUpLogin {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Did Select Side Bar Table View Item Log In For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    InitialNavigationViewController* viewControllerObject = [self.storyboard instantiateViewControllerWithIdentifier:@"InitialNavigationViewController"];
    
    if (![[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] isEqualToString:@"2021-08-24 23:51:563280984"]) {
        
        viewControllerObject.modalPresentationStyle = UIModalPresentationPopover;
        
        [self presentViewController:viewControllerObject animated:YES completion:nil];
        
    }
    
}

-(void)DidSelectWeDivvyPremium {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Did Select Side Bar Table View Item WeDivvy Premium For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
    
    [[[GeneralObject alloc] init] CheckPremiumSubscriptionStatus:homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeMembersDict) {
        
    }];
    
    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
        
        [[[PushObject alloc] init] PushToSettingsViewController:YES allItemAssignedToArrays:allItemAssignedToArrays currentViewController:self];
        
    } else {
        
        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:NO comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount" selectedSlide:@"" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
        
    }
    
    [self DisplaySideBar:NO duration:0.25 completionHandler:^(BOOL finished) {
        
        [self->tapGestureSideBarCustomScrollView removeFromSuperview];
        
    }];
    
}

-(IBAction)DidSelectSideBarPopup:(id)sender {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Did Select Side Bar Table View Item Upgrade WeDivvy Premium For %@", itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [[[NotificationsObject alloc] init] SendLocalNotificationPurchasePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
        
    }];
    
    [[[NotificationsObject alloc] init] SendLocalNotificationUpgradePremiumNotification_LocalOnly:self->homeMembersDict completionHandler:^(BOOL finished) {
        
    }];
    
    [[NSUserDefaults standardUserDefaults] setObject:@"Yes" forKey:@"SideBarPopupClicked"];
    
    [self.sideBarTableView beginUpdates];
    [self.sideBarTableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:0 inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
    [self.sideBarTableView endUpdates];
    
    NSMutableArray *allItemAssignedToArrays = [self GenerateAllItemAssignedToArrays:self->itemDict homeMembersDict:self->homeMembersDict];
    
    [[[GeneralObject alloc] init] CheckPremiumSubscriptionStatus:homeMembersDict completionHandler:^(BOOL finished, NSMutableDictionary * _Nonnull returningHomeMembersDict) {
        
    }];
    
    if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == YES) {
        
        [[[PushObject alloc] init] PushToSettingsViewController:YES allItemAssignedToArrays:allItemAssignedToArrays currentViewController:self];
        
    } else {
        
        NSString *defaultPlan = @"";
        
        BOOL PremiumUserHasIndividualPlan = [[[BoolDataObject alloc] init] PremiumUserHasIndividualPlanAndHasMoreThanOneHomeMember:self->homeMembersDict purchasingUserID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
        
        if (PremiumUserHasIndividualPlan) {
            
            if ([(NSArray *)homeMembersDict[@"UserID"] count] > 1 && [(NSArray *)homeMembersDict[@"UserID"] count] < 4) {
                defaultPlan = @"Housemate";
            } else if ([(NSArray *)homeMembersDict[@"UserID"] count] > 3) {
                defaultPlan = @"Family";
            }
            
        }
        
        [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:NO comingFromSignUp:NO defaultPlan:defaultPlan displayDiscount:@"Half-Off Yearly Discount" selectedSlide:@"" promoCodeID:@"" premiumPlanProductsArray:premiumPlanProductsArray premiumPlanPricesDict:premiumPlanPricesDict premiumPlanExpensivePricesDict:premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
        
    }
    
    [self DisplaySideBar:NO duration:0.25 completionHandler:^(BOOL finished) {
        
        [self->tapGestureSideBarCustomScrollView removeFromSuperview];
        
    }];
    
}

-(void)DidSelectSideBarCategory:(NSString *)sideBarName {
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Did Select Side Bar Table View Item %@ For %@", sideBarName, itemType] completionHandler:^(BOOL finished) {
        
    }];
    
    [self DisplaySideBar:NO duration:0.25 completionHandler:^(BOOL finished) {
        
        NSString *categoryName = sideBarName;
        [[NSUserDefaults standardUserDefaults] setObject:categoryName forKey:@"CategorySelected"];
        
        self->_middleLabel.text = categoryName;
        
        
        
        [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
            
        }];
        
        
        
        [self->tapGestureSideBarCustomScrollView removeFromSuperview];
        
    }];
    
}

#pragma mark - Table View ViewForHeader Methods

#pragma mark Main Table View

-(UIView *)GenerateSectionSuperView:(NSInteger)section cell:(MainCell *)cell tableView:(UITableView *)tableView mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    CGFloat yPos = SelectClicked ? -2.5 : 0;
    UIView *sectionSuperView = [[UIView alloc] initWithFrame:CGRectMake(0, yPos, tableView.frame.size.width, 0)];
    [sectionSuperView setBackgroundColor:self.view.backgroundColor];
    sectionSuperView.tag = section;
    UITapGestureRecognizer *tapGesture = SelectClicked ?
    [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureSelectSectionMainTableView:)] :
    [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureCollapseSectionMainTableView:)];
    [sectionSuperView addGestureRecognizer:tapGesture];
    
    return sectionSuperView;
}

-(UIView *)GenerateMainView {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIView *mainView = [[UIView alloc] initWithFrame:CGRectMake(((width*(1-0.9034))/2), 0, width*0.9034, (height*0.04755 > 35?(35):height*0.04755))];
    mainView.layer.cornerRadius = 5;
    
    return mainView;
}

-(UIView *)GenerateSelectView:(NSInteger)section cell:(MainCell *)cell mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIView *selectView = [[UIView alloc] initWithFrame:CGRectMake(cell.mainView.frame.size.width*0.04278075, ((height*0.04755 > 35?(35):height*0.04755)*0.5) - (25*0.5), 25, 25)];
    selectView.tag = section;
    [selectView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureSelectSectionMainTableView:)]];
    
    BOOL SelectOptionAvailable = (SelectClicked == YES);
    
    if (SelectOptionAvailable == YES) {
        
        selectView.layer.cornerRadius = selectView.frame.size.height/2;
        selectView.backgroundColor = [UIColor clearColor];
        selectView.layer.borderWidth = 2.0f;
        
        selectView.alpha = selectedSectionsDict[mainTableViewSectionName] ? 1.0f : 0.25f;
        
        if (selectedSectionsDict[mainTableViewSectionName]) {
            selectView.layer.borderColor = [UIColor colorWithRed:0.0f/255.0f green:126.0f/255.0f blue:197.0f/255.0f alpha:1.0f].CGColor;
        } else {
            selectView.layer.borderColor = [UIColor blackColor].CGColor;
        }
        
    } else {
        
        selectView.hidden = YES;
        
    }
    
    return selectView;
}

-(UIView *)GenerateSelecteViewInner:(NSInteger)section cell:(MainCell *)cell selectView:(UIView *)selectView mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    UIView *selectInnerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, selectView.frame.size.height/2, selectView.frame.size.height/2)];
    selectInnerView.frame = CGRectMake(selectView.frame.origin.x + selectView.frame.size.width*0.5 - ((selectView.frame.size.width*0.5)*0.5), selectView.frame.origin.y + selectView.frame.size.height*0.5 - ((selectView.frame.size.height*0.5)*0.5), selectView.frame.size.width*0.5, selectView.frame.size.height*0.5);
    selectInnerView.layer.cornerRadius = selectInnerView.frame.size.height/2;
    selectInnerView.backgroundColor = [UIColor colorWithRed:0.0f/255.0f green:126.0f/255.0f blue:197.0f/255.0f alpha:1.0f];
    selectInnerView.tag = section;
    [selectInnerView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureSelectSectionMainTableView:)]];
    
    BOOL SelectOptionAvailable = (SelectClicked == YES);
    
    if (SelectOptionAvailable == YES) {
        
        if (selectedSectionsDict[mainTableViewSectionName]) {
            selectInnerView.hidden = NO;
        } else {
            selectInnerView.hidden = YES;
        }
        
    } else {
        
        selectInnerView.hidden = YES;
        
    }
    
    return selectInnerView;
}

-(UILabel *)GenerateSectionLabel:(MainCell *)cell selectView:(UIView *)selectView mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    CGFloat xPos = SelectClicked ? selectView.frame.origin.x + selectView.frame.size.width + cell.mainView.frame.size.width*0.04278075 : (width*0.02899 > 12?(12):width*0.02899);
    UILabel *sectionLabel = [[UILabel alloc] initWithFrame:CGRectMake(xPos, 0, width*0.9034, (height*0.04755 > 35?(35):height*0.04755))];
    [sectionLabel setFont:[UIFont systemFontOfSize:(height*0.02038 > 15?(15):height*0.02038) weight:UIFontWeightSemibold]];//label.frame.size.height*0.56
    [sectionLabel setTextAlignment:NSTextAlignmentLeft];
    [sectionLabel setBackgroundColor:[UIColor clearColor]];
    //Post-Spike
    
    BOOL LabelShouldHaveSectionLabel = ([mainTableViewSectionName isEqualToString:@"Tutorial"] || [mainTableViewSectionName isEqualToString:@"Past Due"] || [mainTableViewSectionName isEqualToString:@"Completed"]);
    
    [sectionLabel setText:[NSString stringWithFormat:@"%@%@", mainTableViewSectionName, LabelShouldHaveSectionLabel ? @" • Clear" : @""]];
    [sectionLabel setTextColor:[[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeTextPrimary] : [[[LightDarkModeObject alloc] init] LightModeTextPrimary]];
    CGRect newRect = sectionLabel.frame;
    newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:sectionLabel.text withFont:sectionLabel.font];
    sectionLabel.frame = newRect;
    
    NSDictionary *attrsDictionary = [NSDictionary dictionaryWithObjectsAndKeys:sectionLabel.textColor, NSForegroundColorAttributeName, nil];
    NSMutableAttributedString * str = [[NSMutableAttributedString alloc] initWithString:sectionLabel.text attributes:attrsDictionary];
    NSRange range0 = [[NSString stringWithFormat:@"%@", str] rangeOfString:@"Clear"];
    NSMutableDictionary *dictToUse = [self->dataDisplayDict[mainTableViewSectionName] mutableCopy];
    [str addAttribute:NSForegroundColorAttributeName value:[(NSArray *)dictToUse[@"ItemUniqueID"] count] > 0 ? [UIColor linkColor] : [UIColor lightGrayColor] range: NSMakeRange(range0.location, range0.length)];
    [str addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:sectionLabel.font.pointSize weight:UIFontWeightRegular] range: NSMakeRange(range0.location, range0.length)];
    sectionLabel.attributedText = str;
    
    return sectionLabel;
}

-(UIView *)GenerateSectionLabelCover:(NSInteger)section sectionLabel:(UILabel *)sectionLabel mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    UIView *sectionLabelCover = [[UIView alloc] initWithFrame:CGRectMake(sectionLabel.frame.origin.x + [[[GeneralObject alloc] init] WidthOfString:[NSString stringWithFormat:@"%@ • ", mainTableViewSectionName] withFont:sectionLabel.font], sectionLabel.frame.origin.y, [[[GeneralObject alloc] init] WidthOfString:@"Clear" withFont:sectionLabel.font], sectionLabel.frame.size.height)];
    sectionLabelCover.tag = section;
    
    BOOL LabelShouldHaveSectionLabel = ([mainTableViewSectionName isEqualToString:@"Tutorial"] || [mainTableViewSectionName isEqualToString:@"Past Due"] || [mainTableViewSectionName isEqualToString:@"Completed"]);
    
    NSMutableDictionary *dictToUse = [self->dataDisplayDict[mainTableViewSectionName] mutableCopy];
    
    if (dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > 0 && LabelShouldHaveSectionLabel == YES) {
        
        [sectionLabelCover addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(ClearTableViewSection:)]];
        
    }
    
    return sectionLabelCover;
}

-(UIImageView *)GenerateArrowImageView:(UIView *)mainView selectView:(UIView *)selectView sectionLabel:(UILabel *)sectionLabel mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    CGFloat width = CGRectGetWidth(mainView.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"CollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    
    UIView *viewToRepelFrom = SelectClicked ? selectView : sectionLabel;
    
    UIImageView *arrowImageView = [[UIImageView alloc] initWithFrame:[collapseSectionsArray containsObject:mainTableViewSectionName] ?
                                   CGRectMake((width*1 - (height*0.02415 > 10?(10):height*0.02415)) - viewToRepelFrom.frame.origin.x, ((height*0.04755 > 35?(35):height*0.04755)*0.5) - ((1.5*(height*0.02415 > 10?(10):height*0.02415))*0.5), (height*0.02415 > 10?(10):height*0.02415), (1.5*(height*0.02415 > 10?(10):height*0.02415))) :
                                   CGRectMake((width*1 - (1.5*(height*0.02415 > 10?(10):height*0.02415))) - viewToRepelFrom.frame.origin.x, (height*0.04755 > 35?(35):height*0.04755)*0.5 - ((height*0.02415 > 10?(10):height*0.02415)*0.5), (1.5*(height*0.02415 > 10?(10):height*0.02415)), (height*0.02415 > 10?(10):height*0.02415))];
    [arrowImageView setImage:[collapseSectionsArray containsObject:mainTableViewSectionName] ? [UIImage imageNamed:@"TaskIcons.ChevronLeft.png"] : [UIImage imageNamed:@"TaskIcons.ChevronDown.png"]];
    
    return arrowImageView;
}

-(UILabel *)GenerateAmountLabel:(NSInteger)section mainView:(UIView *)mainView arrowImageView:(UIImageView *)arrowImageView {
    
    CGFloat width = CGRectGetWidth(mainView.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UILabel *amountLabel = [[UILabel alloc] initWithFrame:CGRectMake(arrowImageView.frame.origin.x - 12 - (width*0.02899 > 12?(12):width*0.02899), 0, 12, (height*0.04755 > 35?(35):height*0.04755))];
    NSString *amountString = @"0";
    
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    if (ObjectIsKindOfClass == YES) {
        
        if ([dataDisplaySectionsArray count] > section) {
            NSString *currentSection = dataDisplaySectionsArray[section];
            if (dataDisplayDict[currentSection]) {
                NSMutableDictionary *currentDict = [dataDisplayDict[currentSection] mutableCopy];
                if (currentDict[@"ItemID"]) {
                    amountString = [NSString stringWithFormat:@"%lu", [(NSArray *)currentDict[@"ItemID"] count]];
                }
            }
        }
        
    }
    
    
    [amountLabel setText:amountString];
    [amountLabel setTextColor:[UIColor colorWithRed:167.0f/255.0f green:176.0f/255.0f blue:185.0f/255.0f alpha:1.0f]];
    [amountLabel setTextAlignment:NSTextAlignmentRight];
    [amountLabel setFont:[UIFont systemFontOfSize:(height*0.02038 > 15?(15):height*0.02038) weight:UIFontWeightMedium]];
    
    
    CGRect newRect = amountLabel.frame;
    newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:amountLabel.text withFont:amountLabel.font];
    newRect.origin.x = arrowImageView.frame.origin.x - newRect.size.width - (width*0.02899 > 12?(12):width*0.02899);
    amountLabel.frame = newRect;
    
    
    return amountLabel;
}

-(UILabel *)GeneratePostponeLabel:(UIView *)mainView amountLabel:(UILabel *)amountLabel mainTableViewSectionName:(NSString *)mainTableViewSectionName {
    
    CGFloat width = CGRectGetWidth(mainView.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UILabel *postponeLabel = [[UILabel alloc] initWithFrame:CGRectMake(amountLabel.frame.origin.x - 25 - 12, amountLabel.frame.origin.y, 5, amountLabel.frame.size.height)];
    postponeLabel.text = @"Postpone";
    postponeLabel.textColor = [UIColor linkColor];
    postponeLabel.textAlignment = NSTextAlignmentRight;
    postponeLabel.font = [UIFont systemFontOfSize:(height*0.01834239 > 13.5?(13.5):height*0.01834239) weight:UIFontWeightSemibold];
    
    CGRect newRect = postponeLabel.frame;
    newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:postponeLabel.text withFont:postponeLabel.font];
    newRect.origin.x = amountLabel.frame.origin.x - newRect.size.width - (width*0.02899 > 12?(12):width*0.02899);
    postponeLabel.frame = newRect;
    
    postponeLabel.hidden = YES;//[mainTableViewSectionName isEqualToString:@"Past Due"] == NO;
    
    return postponeLabel;
}

-(UIButton *)GeneratePostponeLabelCover:(UILabel *)postponeLabel {
    
    UIButton *postponeLabelCover = [[UIButton alloc] initWithFrame:CGRectMake(postponeLabel.frame.origin.x - 10, postponeLabel.frame.origin.y, postponeLabel.frame.size.width + 20, postponeLabel.frame.size.height)];
    
    UIMenu *menu = [self PastDueTaskContextMenu];
    
    postponeLabelCover.menu = menu;
    postponeLabelCover.showsMenuAsPrimaryAction = postponeLabel.hidden == NO;
    
    return postponeLabelCover;
}

#pragma mark Side Bar Table View

-(UIView *)GenerateSideBarMainView:(UITableView *)tableView section:(NSInteger)section {
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, (height*0.02717 > 20?(20):height*0.02717))];
    //277, 20
    view.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeSecondary] : [[[LightDarkModeObject alloc] init] LightModePrimary];
    view.tag = section;
    [view addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureCollapseSectionSideBarTableView:)]];
    
    return view;
}

-(UILabel *)GenerateSideBarSectionLabel:(NSInteger)section {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    
    UILabel *sectionLabel = [[UILabel alloc] initWithFrame:CGRectMake(((width*(1-0.9034))/2), 0, width*0.9034, width*0.060386)];
    NSString *sectionName = @"";
    
    sectionName = self->sideBarSectionsArray.count > section ? self->sideBarSectionsArray[section] : @"";
    sectionLabel.text = sectionName;
    sectionLabel.font = [UIFont systemFontOfSize:sectionLabel.frame.size.height*0.56 weight:UIFontWeightMedium];
    sectionLabel.textColor = [UIColor colorWithRed:103.0f/255.0f green:122.0f/255.0f blue:140.0f/255.0f alpha:1.0f];
    sectionLabel.textAlignment = NSTextAlignmentLeft;
    CGRect newRect = sectionLabel.frame;
    newRect.size.width = [[[GeneralObject alloc] init] WidthOfString:sectionLabel.text withFont:sectionLabel.font];
    sectionLabel.frame = newRect;
    
    return sectionLabel;
}

-(UIImageView *)GenerateSideBarInfoImageView:(UILabel *)sectionLabel section:(NSInteger)section {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIImageView *infoButtonImage = [[UIImageView alloc] initWithFrame:CGRectMake(sectionLabel.frame.origin.x + sectionLabel.frame.size.width + (width*0.2888 > 8?(8):width*0.2888), sectionLabel.frame.origin.y + (sectionLabel.frame.size.height*0.5 - ((height*0.875 > 17.8?(17.8):height*0.875)*0.5)), (height*0.875 > 17.8?(17.8):height*0.875), (height*0.875 > 17.8?(17.8):height*0.875))];
    infoButtonImage.image = section == folderSection ? [UIImage imageNamed:@"SideBarIcons.InfoButton.png"] : nil;
    
    return infoButtonImage;
}

-(UIView *)GenerateSideBarInfoImageViewOverlay:(UIImageView *)infoButtonImage {
    
    UIView *infoButtonImageOverlay = [[UIView alloc] initWithFrame:CGRectMake(infoButtonImage.frame.origin.x - 10, infoButtonImage.frame.origin.y - 10, infoButtonImage.frame.size.width + 20, infoButtonImage.frame.size.height + 20)];
    [infoButtonImageOverlay addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureTaskListSectionInfoPopup:)]];
    infoButtonImageOverlay.hidden = infoButtonImage.image != [UIImage imageNamed:@"SideBarIcons.InfoButton.png"];
    return infoButtonImageOverlay;
}

#pragma mark Side Bar Table View Group

-(UIView *)GenerateSideBarTableViewGroupMainView:(UITableView *)tableView section:(NSInteger)section {
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIView *mainView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, (height*0.05978261 > 44?(44):height*0.05978261))];
    mainView.backgroundColor = [[[BoolDataObject alloc] init] DarkModeIsOn] ? [[[LightDarkModeObject alloc] init] DarkModeSecondary] : [[[LightDarkModeObject alloc] init] LightModePrimary];
    mainView.tag = section;
    [mainView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TapGestureCollapseSectionSideBarTableView:)]];
    
    return mainView;
}

-(UIImageView *)GenerateSideBarTableViewGroupImageView:(NSInteger)section folderNameArray:(NSMutableArray *)folderNameArray sideBarTableViewSectionName:(NSString *)sideBarTableViewSectionName {
    
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UIImageView *sideBarImageView = [[UIImageView alloc] initWithFrame:CGRectMake((height*0.06039 > 25?(25):height*0.06039), (height*0.05978261 > 44?(44):height*0.05978261)*0.5 - ((height*0.02717 > 20?(20):height*0.02717)*0.5), (height*0.02717 > 20?(20):height*0.02717), (height*0.02717 > 20?(20):height*0.02717))];
    NSString *sideBarImageString = @"";
    
    
    
    if (sideBarSectionsArray.count > section) {
        if ([folderNameArray containsObject:sideBarTableViewSectionName]) {
            sideBarImageString = @"SideBarIcons.Folder.png";
        } else if ([sideBarTableViewSectionName isEqualToString:@"Users"]) {
            sideBarImageString = @"SideBarIcons.Users.png";
        } else if ([sideBarTableViewSectionName isEqualToString:@"Tags"]) {
            sideBarImageString = @"SideBarIcons.Tags.png";
        } else {
            sideBarImageString = @"SideBarIcons.Colors.png";
        }
    } else {
        sideBarImageString = @"SideBarIcons.Colors.png";
    }
    
    
    
    [sideBarImageView setImage:[sideBarImageString length] > 0 ? [UIImage imageNamed:sideBarImageString] : nil];
    sideBarImageView.contentMode = UIViewContentModeScaleAspectFit;
    
    return sideBarImageView;
}

-(UILabel *)GenerateSideBarTableViewGroupSectionLabel:(NSInteger)section sideBarImageView:(UIImageView *)sideBarImageView {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    UILabel *sectionLabel = [[UILabel alloc] initWithFrame:CGRectMake(sideBarImageView.frame.origin.x + sideBarImageView.frame.size.width + (width*0.02899 > 12?(12):width*0.02899), 0, _sideBarTableView.frame.size.width - (sideBarImageView.frame.origin.x + sideBarImageView.frame.size.width + (width*0.02899 > 12?(12):width*0.02899)) - sideBarImageView.frame.origin.x, (height*0.05978261 > 44?(44):height*0.05978261))];
    NSString *sectionName = @"";
    
    
    
    sectionName = sideBarSectionsArray.count > section ? sideBarSectionsArray[section] : @"";
    sectionLabel.text = sectionName;
    sectionLabel.font = [UIFont systemFontOfSize:sectionLabel.frame.size.height*0.31818 weight:UIFontWeightMedium];
    sectionLabel.textColor = [UIColor colorWithRed:46.0f/255.0f green:64.0f/255.0f blue:82.0f/255.0f alpha:1.0f];
    sectionLabel.textAlignment = NSTextAlignmentLeft;
    
    return sectionLabel;
}

-(UIImageView *)GenerateSideBarTableViewGroupArrowImageView:(NSString *)sectionName {
    
    CGFloat width = CGRectGetWidth(self.view.bounds);
    CGFloat height = CGRectGetHeight(self.view.bounds);
    
    NSMutableArray *collapseSectionsArray = [[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] ? [[[NSUserDefaults standardUserDefaults] objectForKey:@"SideBarCollapseSectionsArray"] mutableCopy] : [NSMutableArray array];
    
    UIImageView *imageView = [[UIImageView alloc] initWithFrame:[collapseSectionsArray containsObject:sectionName] == NO ?
                              CGRectMake(_sideBarView.frame.size.width - (1.67*(width*0.02174 > 9?(9):width*0.02174)) - ((width*(1-0.9034))/2), ((height*0.05978261 > 44?(44):height*0.05978261)*0.5) - ((1.5*(width*0.02174 > 9?(9):width*0.02174))*0.5), (width*0.02174 > 9?(9):width*0.02174), (1.5*(width*0.02174 > 9?(9):width*0.02174))) :
                              CGRectMake(_sideBarView.frame.size.width - (1.67*(width*0.02174 > 9?(9):width*0.02174)) - ((width*(1-0.9034))/2), (height*0.05978261 > 44?(44):height*0.05978261)*0.5 - ((width*0.02174 > 9?(9):width*0.02174)*0.5), (1.5*(width*0.02174 > 9?(9):width*0.02174)), (width*0.02174 > 9?(9):width*0.02174))];
    [imageView setImage:[collapseSectionsArray containsObject:sectionName] == NO ? [UIImage imageNamed:@"TaskIcons.ChevronLeft.png"] : [UIImage imageNamed:@"TaskIcons.ChevronDown.png"]];
    
    return imageView;
}

#pragma mark - Table View TrailingSwipe Methods

-(void)EditTaskListAction:(NSString *)sideBarName {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Edit Task List Clicked %@", sideBarName] completionHandler:^(BOOL finished) {
        
    }];
    
    NSMutableDictionary *itemToEditDict = [NSMutableDictionary dictionary];
    
    NSString *taskListName = sideBarName;
    
    if (self->taskListDict[@"TaskListName"] && [self->taskListDict[@"TaskListName"] containsObject:taskListName]) {
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateTaskListKeyArray];
        
        NSUInteger index = [self->taskListDict[@"TaskListName"] indexOfObject:taskListName];
        itemToEditDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->taskListDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        
    }
    
    [[[PushObject alloc] init] PushToViewTaskListsViewController:[self->folderDict mutableCopy] taskListDict:[taskListDict mutableCopy] itemToEditDict:itemToEditDict itemUniqueID:@"" comingFromTasksViewController:NO comingFromViewTaskViewController:NO currentViewController:self];
    
}

-(void)DeleteTaskListAction:(NSString *)sideBarName {
    
    if ([[[GeneralObject alloc] init] ConnectedToInternet] == NO) {
        [[[GeneralObject alloc] init] CreateAlert:@"Oops" message:@"You need to be connected to the internet to do that." currentViewController:self];
        return;
    }
    
    [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Delete Task List Clicked %@", sideBarName] completionHandler:^(BOOL finished) {
        
    }];
    
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:@"Are you sure you would like to delete \"%@\"?", sideBarName] message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Delete" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Deleting Task List %@", sideBarName] completionHandler:^(BOOL finished) {
            
        }];
        
        [self StartProgressView];
        
        __block int totalQueries = 2;
        __block int completedQueries = 0;
        
        
        
        NSString *oldTaskName = sideBarName;
        NSMutableDictionary *sideBarCustomCetagoryDict = [self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection ? [self->sideBarCategorySectionArrayOriginal[self->taskListOriginalSection] mutableCopy] : [NSMutableDictionary dictionary];
        
        NSMutableArray *taskListNamesArray = sideBarCustomCetagoryDict[@"Names"] ? [sideBarCustomCetagoryDict[@"Names"] mutableCopy] : [NSMutableArray array];
        NSUInteger sideBarIndex = [taskListNamesArray indexOfObject:oldTaskName];
        if ([taskListNamesArray count] > sideBarIndex) { [taskListNamesArray removeObjectAtIndex:sideBarIndex]; }
        [sideBarCustomCetagoryDict setObject:taskListNamesArray forKey:@"Names"];
        
        NSMutableArray *taskListImagesArray = sideBarCustomCetagoryDict[@"Images"] ? [sideBarCustomCetagoryDict[@"Images"] mutableCopy] : [NSMutableArray array];
        if ([taskListImagesArray count] > sideBarIndex) { [taskListImagesArray removeObjectAtIndex:sideBarIndex]; }
        [sideBarCustomCetagoryDict setObject:taskListImagesArray forKey:@"Images"];
        
        NSMutableArray *taskListIDsArray = sideBarCustomCetagoryDict[@"IDs"] ? [sideBarCustomCetagoryDict[@"IDs"] mutableCopy] : [NSMutableArray array];
        if ([taskListIDsArray count] > sideBarIndex) { [taskListIDsArray removeObjectAtIndex:sideBarIndex]; }
        [sideBarCustomCetagoryDict setObject:taskListIDsArray forKey:@"IDs"];
        
        if ([self->sideBarCategorySectionArrayOriginal count] > self->taskListOriginalSection) {
            
            [self->sideBarCategorySectionArrayOriginal replaceObjectAtIndex:self->taskListOriginalSection withObject:sideBarCustomCetagoryDict];
            
        }
        
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [self DeleteTaskListAction_UpdateFolderData:oldTaskName completionHandler:^(BOOL finished) {
                
                [self DeleteTaskListAction_CompletionBlock:oldTaskName totalQueries:totalQueries completedQueries:(completedQueries+=1) completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
        });
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            [self DeleteTaskListAction_DeleteTaskListData:oldTaskName completionHandler:^(BOOL finished) {
                
                [self DeleteTaskListAction_CompletionBlock:oldTaskName totalQueries:totalQueries completedQueries:(completedQueries+=1) completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
        });
        
    }];
    
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Delete Task List Cancelled %@", sideBarName] completionHandler:^(BOOL finished) {
            
        }];
        
    }]];
    
    [deleteAction setValue:[UIColor systemRedColor] forKey:@"titleTextColor"];
    
    [actionSheet addAction:deleteAction];
    
    [self presentViewController:actionSheet animated:YES completion:nil];
    
}

#pragma mark - Table View ContextMenuConfig Methods

-(UIMenu *)GenerateItemContextMenu {
    
    NSMutableArray* contextMenuItemDataActions = [[NSMutableArray alloc] init];
    
    NSMutableArray* itemMarkingMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray* itemDataMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray* itemOtherMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray* itemShareMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray* itemSelectMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray *itemWaiveMenuActions = [NSMutableArray array];
    NSMutableArray* itemTrashMenuActions = [[NSMutableArray alloc] init];
    NSMutableArray* itemPremiumMenuActions = [[NSMutableArray alloc] init];
    
    
    
    
    NSString *wontDoString = @"";
    NSString *wontDoImageString = @"";
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        if (self->itemDict && self->itemDict[@"ItemUniqueID"] && [self->itemDict[@"ItemUniqueID"] containsObject:itemUniqueID]) {
            
            NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:indexOfObject inSection:0]];
            
            BOOL TaskIsAssignedToMyself = [[[BoolDataObject alloc] init] TaskWasAssignedToSpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            BOOL TaskIsAssignedToNobody = [[[BoolDataObject alloc] init] TaskIsAssignedToNobody:singleObjectItemDict itemType:itemType];
            BOOL TaskIsAssignedToAnybody = [[[BoolDataObject alloc] init] TaskIsAssignedToAnybody:singleObjectItemDict itemType:itemType];
            
            if (TaskIsAssignedToMyself || TaskIsAssignedToNobody || TaskIsAssignedToAnybody) {
                
                if ((self->itemDict[@"ItemWontDo"] && [[self->itemDict[@"ItemWontDo"][indexOfObject] allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] == YES)) {
                    
                    wontDoString = @"Will Do";
                    wontDoImageString = @"checkmark.square";
                    
                } else {
                    
                    wontDoString = @"Won't Do";
                    wontDoImageString = @"xmark.square";
                    
                }
                
            }
            
        }
        
    }
    
    if (wontDoString.length > 0) {
        
        [itemMarkingMenuActions addObject:[UIAction actionWithTitle:wontDoString image:[[wontDoImageString length] > 0 ? [UIImage systemImageNamed:wontDoImageString] : nil imageWithTintColor:[UIColor systemGrayColor] renderingMode:UIImageRenderingModeAlwaysOriginal] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionWillDoWontDo:wontDoString];
            
        }]];
        
    }
    
    NSString *inProgressNotInProgressString = @"";
    NSString *inProgressNotInProgressImageString = @"";
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        if (self->itemDict && self->itemDict[@"ItemUniqueID"] && [self->itemDict[@"ItemUniqueID"] containsObject:itemUniqueID]) {
            
            NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:indexOfObject inSection:0]];
            
            BOOL TaskIsAssignedToMyself = [[[BoolDataObject alloc] init] TaskWasAssignedToSpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            BOOL TaskIsAssignedToNobody = [[[BoolDataObject alloc] init] TaskIsAssignedToNobody:singleObjectItemDict itemType:itemType];
            BOOL TaskIsAssignedToAnybody = [[[BoolDataObject alloc] init] TaskIsAssignedToAnybody:singleObjectItemDict itemType:itemType];
            
            if (TaskIsAssignedToMyself || TaskIsAssignedToNobody || TaskIsAssignedToAnybody) {
                
                if ((self->itemDict[@"ItemInProgressDict"] && [[self->itemDict[@"ItemInProgressDict"][indexOfObject] allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] == NO)) {
                    
                    inProgressNotInProgressString = @"In Progress";
                    inProgressNotInProgressImageString = @"clock.arrow.circlepath";
                    
                } else {
                    
                    inProgressNotInProgressString = @"Not In Progress";
                    inProgressNotInProgressImageString = @"exclamationmark.arrow.circlepath";
                    
                }
                
            }
            
        }
        
    }
    
    if (inProgressNotInProgressString.length > 0) {
        
        [itemMarkingMenuActions addObject:[UIAction actionWithTitle:inProgressNotInProgressString image:[[inProgressNotInProgressImageString length] > 0 ? [UIImage systemImageNamed:inProgressNotInProgressImageString] : nil imageWithTintColor:[UIColor systemYellowColor] renderingMode:UIImageRenderingModeAlwaysOriginal] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionInProgressNotInProgress:inProgressNotInProgressString];
            
        }]];
        
    }
    
    NSString *completeUncompleteString = @"";
    NSString *completeUncompleteImageString = @"";
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        if (self->itemDict && self->itemDict[@"ItemUniqueID"] && [self->itemDict[@"ItemUniqueID"] containsObject:itemUniqueID]) {
            
            NSUInteger indexOfObject = [self->itemDict[@"ItemUniqueID"] indexOfObject:itemUniqueID];
            NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:indexOfObject inSection:0]];
            
            BOOL TaskIsAssignedToMyself = [[[BoolDataObject alloc] init] TaskWasAssignedToSpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
            BOOL TaskIsAssignedToNobody = [[[BoolDataObject alloc] init] TaskIsAssignedToNobody:singleObjectItemDict itemType:itemType];
            BOOL TaskIsAssignedToAnybody = [[[BoolDataObject alloc] init] TaskIsAssignedToAnybody:singleObjectItemDict itemType:itemType];
            
            if (TaskIsAssignedToMyself || TaskIsAssignedToNobody || TaskIsAssignedToAnybody) {
                
                if ((self->itemDict[@"ItemCompletedDict"] && [[self->itemDict[@"ItemCompletedDict"][indexOfObject] allKeys] containsObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]] == NO)) {
                    
                    completeUncompleteString = @"Complete";
                    completeUncompleteImageString = @"checkmark";
                    
                } else {
                    
                    completeUncompleteString = @"Uncomplete";
                    completeUncompleteImageString = @"xmark";
                    
                }
                
            }
            
        }
        
    }
    
    if (completeUncompleteString.length > 0) {
        
        UIColor *colorToUse = [completeUncompleteString isEqualToString:@"Complete"] ? [UIColor systemGreenColor] : [UIColor systemPinkColor];
        
        [itemMarkingMenuActions addObject:[UIAction actionWithTitle:completeUncompleteString image:[[completeUncompleteImageString length] > 0 ? [UIImage systemImageNamed:completeUncompleteImageString] : nil imageWithTintColor:colorToUse renderingMode:UIImageRenderingModeAlwaysOriginal] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionCompleteUncomplete:completeUncompleteString];
            
        }]];
        
    }
    
    
    
    
    
    [itemDataMenuActions addObject:[UIAction actionWithTitle:@"Tag" image:[UIImage systemImageNamed:@"tag"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [self SelectOptionTags:self];
        
    }]];
    
    NSMutableArray *colorMenuActions = [NSMutableArray array];
    
    NSArray *options = [[[GeneralObject alloc] init] GenerateColorOptionsArray];
    options = [[[GeneralObject alloc] init] GenerateArrayInReverse:[options mutableCopy]];
    
    for (NSString *color in options) {
        
        UIColor *colorColor = [[[GeneralObject alloc] init] GenerateColorOptionFromColorString:color];
        
        [colorMenuActions addObject:[UIAction actionWithTitle:color image:[[UIImage systemImageNamed:@"drop.fill"] imageWithTintColor:colorColor renderingMode:UIImageRenderingModeAlwaysOriginal] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionColor:color];
            
        }]];
        
    }
    
    UIMenu *colorMenu = [UIMenu menuWithTitle:@"Color" image:[UIImage systemImageNamed:@"drop"] identifier:@"Color" options:0 children:colorMenuActions];
    [itemDataMenuActions addObject:colorMenu];
    
    NSMutableArray *priorityMenuActions = [NSMutableArray array];
    
    for (NSString *priority in @[@"High", @"Medium", @"Low"]) {
        
        [priorityMenuActions addObject:[UIAction actionWithTitle:priority image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionPriority:priority];
            
        }]];
        
    }
    
    UIMenu *priorityMenu = [UIMenu menuWithTitle:@"Priority" image:[UIImage systemImageNamed:@"flag"] identifier:@"Priority" options:0 children:priorityMenuActions];
    [itemDataMenuActions addObject:priorityMenu];
    
    NSMutableArray *difficultyMenuActions = [NSMutableArray array];
    
    for (NSString *difficulty in @[@"Hard", @"Medium", @"Easy"]) {
        
        [difficultyMenuActions addObject:[UIAction actionWithTitle:difficulty image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionDifficulty:difficulty];
            
        }]];
        
    }
    
    UIMenu *difficultyMenu = [UIMenu menuWithTitle:@"Difficulty" image:[UIImage systemImageNamed:@"speedometer"] identifier:@"Difficulty" options:0 children:difficultyMenuActions];
    [itemDataMenuActions addObject:difficultyMenu];
    
    
    
    
    NSString *actionTitle = @"Unmute";
    NSString *actionImageString = @"bell.slash";
    
    BOOL TaskHasBeenMuted = NO;
    BOOL UserShouldReceiveNotificationsForTask = NO;
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        
        TaskHasBeenMuted = [[[BoolDataObject alloc] init] TaskHasBeenMuted:singleObjectItemDict];
        
        if (UserShouldReceiveNotificationsForTask == NO) {
            
            UserShouldReceiveNotificationsForTask = [[[BoolDataObject alloc] init] UserShouldReceiveNotificationsForTask:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] homeMembersDict:homeMembersDict];
            
        }
        
        if (TaskHasBeenMuted == NO) {
            actionTitle = @"Mute";
            actionImageString = @"bell";
            break;
        }
        
    }
    NSLog(@"testing don't know why it works %@", UserShouldReceiveNotificationsForTask ? @"Yes" : @"No");
    if (UserShouldReceiveNotificationsForTask == YES) {
        
        UIImage *actionImage = [[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO ? [UIImage systemImageNamed:actionImageString] : [actionImageString length] > 0 ? [UIImage systemImageNamed:actionImageString] : [UIImage systemImageNamed:actionImageString];
        
        [itemOtherMenuActions addObject:[UIAction actionWithTitle:actionTitle image:actionImage identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            if ([[[BoolDataObject alloc] init] PremiumSubscriptionIsOn] == NO) {
                
                [[[PushObject alloc] init] PushToWeDivvyPremiumViewController:YES comingFromSignUp:NO defaultPlan:@"" displayDiscount:@"Half-Off Yearly Discount No Sale Sticker" selectedSlide:@"Mute Tasks" promoCodeID:@"" premiumPlanProductsArray:self->premiumPlanProductsArray premiumPlanPricesDict:self->premiumPlanPricesDict premiumPlanExpensivePricesDict:self->premiumPlanExpensivePricesDict premiumPlanPricesDiscountDict:self->premiumPlanPricesDiscountDict premiumPlanPricesNoFreeTrialDict:self->premiumPlanPricesNoFreeTrialDict currentViewController:self Superficial:NO];
                
            } else {
                
                [self SelectOptionMuteUnmute:actionTitle];
                
            }
            
        }]];
        
    }
    
    [itemOtherMenuActions addObject:[UIAction actionWithTitle:@"Duplicate" image:[UIImage systemImageNamed:@"doc.on.doc"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [self TapGestureDuplicate:self];
        
    }]];
    
    BOOL TaskIsPinned = NO;
    
    for (NSString *itemUniqueID in [selectedItemsDict allKeys]) {
        
        if (pinnedDict[itemUniqueID]) {
            
            TaskIsPinned = YES;
            break;
            
        }
        
    }
    
    actionTitle = TaskIsPinned ? @"Unpin" : @"Pin";
    actionImageString = TaskIsPinned ? @"pin.slash" : @"pin";
    
    [itemOtherMenuActions addObject:[UIAction actionWithTitle:actionTitle image:[UIImage systemImageNamed:actionImageString] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [self SelectOptionPinUnpin:self];
        
    }]];
    
    
    
    
    BOOL PastDueOccurrenceFound = NO;
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {

        NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        NSString *itemOccurrenceID = singleObjectItemDict[@"ItemOccurrenceID"] ? singleObjectItemDict[@"ItemOccurrenceID"] : @"xxx";
        
        if ([itemOccurrenceID isEqualToString:@"xxx"] == NO && itemOccurrenceID.length > 0) {
            
            PastDueOccurrenceFound = YES;
            break;
            
        }
        
    }
    
    
    
    if (PastDueOccurrenceFound == YES) {
        
        [itemWaiveMenuActions addObject:[UIAction actionWithTitle:@"Waive" image:[UIImage systemImageNamed:@"hand.wave"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionWaive:self];
            
        }]];
        
    }
    
    
    
    [itemShareMenuActions addObject:[UIAction actionWithTitle:@"Share" image:[UIImage systemImageNamed:@"square.and.arrow.up"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [self SelectOptionShare:self];
        
    }]];
    
    
    
    
    if (SelectClicked == NO) {
        
        [itemSelectMenuActions addObject:[UIAction actionWithTitle:@"Select" image:[UIImage systemImageNamed:@"computermouse"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectSelect:self];
            
            int indexPathSection = [(NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"HeldDownCell"][@"indexPath.section"] intValue];
            int indexPathRow = [(NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"HeldDownCell"][@"indexPath.row"] intValue];
            
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:indexPathRow inSection:indexPathSection];
            NSMutableDictionary *singleObjectItemDict = [[[NSUserDefaults standardUserDefaults] objectForKey:@"HeldDownCell"][@"singleObjectItemDict"] mutableCopy];
            
            NSString *itemID = singleObjectItemDict[@"ItemID"] ? singleObjectItemDict[@"ItemID"] : @"xxx";
            NSString *itemUniqueID = singleObjectItemDict[@"ItemUniqueID"] ? singleObjectItemDict[@"ItemUniqueID"] : @"xxx";
            
            [self DidSelectOption:itemID itemUniqueID:itemUniqueID indexPath:indexPath singleObjectItemDict:singleObjectItemDict];
            
            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"HeldDownCell"];
            
        }]];
        
    }
    
    
    
    
    BOOL ShowMoveToTrashOption = NO;
    
    for (NSString *itemUniqueID in [self->selectedItemsDict allKeys]) {
        
        NSUInteger index = [self General_GenerateIndexOfItemInItemDict:itemUniqueID itemDict:self->itemDict];
        NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:self->itemDict keyArray:keyArray indexPath:[NSIndexPath indexPathForRow:index inSection:0]];
        
        NSString *itemTrash = singleObjectItemDict[@"ItemTrash"] ? singleObjectItemDict[@"ItemTrash"] : @"xxx";
        
        if ([itemTrash isEqualToString:@"No"]) {
            
            ShowMoveToTrashOption = YES;
            break;
            
        }
        
    }
    
    if (ShowMoveToTrashOption) {
        
        UIAction *itemMoveToTrashAction = [UIAction actionWithTitle:@"Move To Trash" image:[UIImage systemImageNamed:@"trash"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionMoveToTrash:self];
            
        }];
        
        [itemMoveToTrashAction setAttributes:UIMenuElementAttributesDestructive];
        
        [itemTrashMenuActions addObject:itemMoveToTrashAction];
        
    } else {
        
        UIAction *permanentlyDeleteAction = [UIAction actionWithTitle:@"Permanently Delete" image:[UIImage systemImageNamed:@"trash"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionDeleteTrashPermanently:self];
            
        }];
        
        [permanentlyDeleteAction setAttributes:UIMenuElementAttributesDestructive];
        
        [itemTrashMenuActions addObject:permanentlyDeleteAction];
        
        UIAction *itemMoveOutOfTrashAction = [UIAction actionWithTitle:@"Move Out of Trash" image:[UIImage systemImageNamed:@"arrow.up.bin"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectOptionMoveOutOfTrash:self];
            
        }];
        
        [itemTrashMenuActions addObject:itemMoveOutOfTrashAction];
        
    }
    
    
    
    
    UIMenu *itemPremiumActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Premium" options:UIMenuOptionsDisplayInline children:itemPremiumMenuActions];
    [contextMenuItemDataActions addObject:itemPremiumActionsInlineMenu];
    
    UIMenu *itemTrashActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"MoveToTrash" options:UIMenuOptionsDisplayInline children:itemTrashMenuActions];
    [contextMenuItemDataActions addObject:itemTrashActionsInlineMenu];
    
    UIMenu *itemSselectActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Select" options:UIMenuOptionsDisplayInline children:itemSelectMenuActions];
    [contextMenuItemDataActions addObject:itemSselectActionsInlineMenu];
    
    UIMenu *itemShareActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Share" options:UIMenuOptionsDisplayInline children:itemShareMenuActions];
    [contextMenuItemDataActions addObject:itemShareActionsInlineMenu];
    
    UIMenu *itemOtherActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Other" options:UIMenuOptionsDisplayInline children:itemOtherMenuActions];
    [contextMenuItemDataActions addObject:itemOtherActionsInlineMenu];
    
    UIMenu *itemWaiveMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Waive" options:UIMenuOptionsDisplayInline children:itemWaiveMenuActions];
    [itemDataMenuActions addObject:itemWaiveMenu];
    
    UIMenu *itemDataActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Data" options:UIMenuOptionsDisplayInline children:itemDataMenuActions];
    [contextMenuItemDataActions addObject:itemDataActionsInlineMenu];
    
    UIMenu *itemMarkingActionsInlineMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"Marking" options:UIMenuOptionsDisplayInline children:itemMarkingMenuActions];
    if (@available(iOS 16.0, *)) {
        itemMarkingActionsInlineMenu.preferredElementSize = UIMenuElementSizeMedium;
    }
    [contextMenuItemDataActions addObject:itemMarkingActionsInlineMenu];
    
    
    
    
    UIMenu *finalMenu = [UIMenu menuWithTitle:@"" children:contextMenuItemDataActions];
    
    return finalMenu;
}

-(void)SetUpBottomFolderContextMenu {
    
    NSMutableArray *actions = [NSMutableArray array];
    
    
    
    NSMutableArray *taskListActions = [NSMutableArray array];
    
    NSMutableArray *arrayOfSelectedTaskLists = [NSMutableArray array];
   
    for (NSString *taskListID in taskListDict[@"TaskListID"]) {
      
        NSUInteger index = [taskListDict[@"TaskListID"] indexOfObject:taskListID];
        NSMutableDictionary *taskListName = taskListDict[@"TaskListName"][index];
        NSMutableDictionary *taskListItems = taskListDict[@"TaskListItems"][index];
       
        for (NSString *itemUniqueID in [selectedItemsDict allKeys]) {
           
            if ([[taskListItems allKeys] containsObject:itemUniqueID]) {
                
                [arrayOfSelectedTaskLists addObject:taskListName];
                
            }
            
        }
        
    }
   
    for (NSString *taskListName in taskListDict[@"TaskListName"]) {
        
        UIAction *taskListAction = [self TaskListItemContextMenuTaskListAction:taskListName arrayOfSelectedTaskLists:arrayOfSelectedTaskLists];
        
        [taskListActions addObject:taskListAction];
        
    }
    
    UIMenu *taskListActionsMenu = [self TaskListItemContextMenuTaskListActionsMenu:taskListActions];
    
    [actions addObject:taskListActionsMenu];
    
    
    
    NSMutableArray *suggestedTaskListActions = [NSMutableArray array];
    
    NSArray *arrayToUse = [[[GeneralObject alloc] init] GenerateSuggestedTaskListArray:itemType];
    
    for (NSString *taskListName in arrayToUse) {
        
        UIAction *taskListAction = [self TaskListItemContextMenuSuggestedTaskListAction:taskListName arrayToUse:arrayToUse arrayOfSelectedTaskLists:arrayOfSelectedTaskLists];
        
        [suggestedTaskListActions addObject:taskListAction];
        
    }
    
    UIMenu *suggestedTaskListActionsMenu = [self TaskListItemContextMenuSuggestedTaskListActionsMenu:suggestedTaskListActions arrayToUse:arrayToUse arrayOfSelectedTaskLists:arrayOfSelectedTaskLists];
    
    [actions addObject:suggestedTaskListActionsMenu];
    
    
    
    
    NSMutableArray *newTaskListMenuActions = [NSMutableArray array];
    
    UIAction *newTaskListAction = [self TaskListItemContextMenuNewTaskListAction];
    [newTaskListMenuActions addObject:newTaskListAction];
    
    UIMenu *newTaskListActionsMenu = [self TaskListItemContextMenuNewTaskListActionsMenu:newTaskListMenuActions];
    
    [actions addObject:newTaskListActionsMenu];
    
    
    
    
    NSMutableArray *deleteListMenuActions = [NSMutableArray array];
    
    UIAction *noTaskListAction = [self TaskListItemContextMenuNoTaskListAction];
    [deleteListMenuActions addObject:noTaskListAction];
    
    UIMenu *noTaskListActionsMenu = [self TaskListItemContextMenuNoTaskListActionsMenu:deleteListMenuActions];
    
    [actions addObject:noTaskListActionsMenu];
    
    
    
    
    NSString *menuTitle = @"";
    
    if (actions.count - 2 == 0) {
        menuTitle = [NSString stringWithFormat:@"Create a list to organize your %@s", [itemType lowercaseString]];
    }
    
    
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        self->_bottomOptionsFolderImageOverlay.menu = [UIMenu menuWithTitle:menuTitle children:actions];
        self->_bottomOptionsFolderImageOverlay.showsMenuAsPrimaryAction = true;
        
    });
    
}

#pragma mark - Table View DragDelegate Methods

- (nonnull NSArray<UIDragItem *> *)tableView:(nonnull UITableView *)tableView itemsForBeginningDragSession:(nonnull id<UIDragSession>)session atIndexPath:(nonnull NSIndexPath *)indexPath {
    return @[];
}

- (void)encodeWithCoder:(nonnull NSCoder *)coder {
    
}

- (void)traitCollectionDidChange:(nullable UITraitCollection *)previousTraitCollection {
    
}

- (void)preferredContentSizeDidChangeForChildContentContainer:(nonnull id<UIContentContainer>)container {
    
}

- (CGSize)sizeForChildContentContainer:(nonnull id<UIContentContainer>)container withParentContainerSize:(CGSize)parentSize {
    return CGSizeMake(0, 0);
}

- (void)systemLayoutFittingSizeDidChangeForChildContentContainer:(nonnull id<UIContentContainer>)container {
    
}

- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(nonnull id<UIViewControllerTransitionCoordinator>)coordinator {
    
}

- (void)willTransitionToTraitCollection:(nonnull UITraitCollection *)newCollection withTransitionCoordinator:(nonnull id<UIViewControllerTransitionCoordinator>)coordinator {
    
}

- (void)didUpdateFocusInContext:(nonnull UIFocusUpdateContext *)context withAnimationCoordinator:(nonnull UIFocusAnimationCoordinator *)coordinator {
    
}

- (void)setNeedsFocusUpdate {
    
}

- (BOOL)shouldUpdateFocusInContext:(nonnull UIFocusUpdateContext *)context {
    return YES;
}

- (void)updateFocusIfNeeded {
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Sub-Internal Methods
#pragma mark
#pragma mark
#pragma mark -

#pragma mark UX Methods

#pragma mark PastDueTaskContextMenu

-(NSMutableDictionary *)GenerateUpdatedItemOccurrencePastDueDict:(NSString *)addTime index:(NSUInteger)index {
    
    NSMutableDictionary *itemOccurrencePastDue = self->itemDict[@"ItemOccurrencePastDue"] && [(NSArray *)self->itemDict[@"ItemOccurrencePastDue"] count] > index ? [self->itemDict[@"ItemOccurrencePastDue"][index] mutableCopy] : [NSMutableDictionary dictionary];
    
    NSString *itemOccurrencePastDueID = [[[GeneralObject alloc] init] GenerateRandomSmallNumberIntoString:10000 upperBound:99999];
    NSString *itemOccurrencePastDueDateSelected = [[[GeneralObject alloc] init] GenerateCurrentDateString];
    
    [itemOccurrencePastDue setObject:@{@"Date Selected" : itemOccurrencePastDueDateSelected, @"Add Time" : addTime} forKey:itemOccurrencePastDueID];
    
    return itemOccurrencePastDue;
}

#pragma mark AddTask

-(NSString *)GenerateItemStartDate {
    
    NSString *startDate = @"Now";
    NSString *dateFormat = @"MMMM dd, yyyy";
    
    if ([[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:startDate returnAs:[NSDate class]] == nil && startDate.length != 0 && [startDate isEqualToString:@"Now"] == NO) {
        dateFormat = @"MMMM dd, yyyy";
    }
    
    if (startDate.length == 0 || [startDate isEqualToString:@"Now"] || [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:startDate returnAs:[NSDate class]] == nil) {
        
        startDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSString class]];
        
    }
    
    NSArray *dateArr = [startDate componentsSeparatedByString:@" "];
    
    NSString *month = [dateArr count] > 0 ? dateArr[0] : @"";
    NSString *day = [dateArr count] > 1 ? dateArr[1] : @"";
    NSString *year = [dateArr count] > 2 ? dateArr[2] : @"";
    
    startDate = [NSString stringWithFormat:@"%@ %@ %@ 12:00 AM", month, day, year];
    
    return startDate;
    
}

-(NSString *)GenerateItemEndDate {
    
    NSString *endDate = @"Never";
    NSString *dateFormat = @"MMMM dd, yyyy";
    
    NSDate *endDateConvertedToDateFormat = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:endDate returnAs:[NSDate class]];
    
    if (endDateConvertedToDateFormat == nil &&
        endDate.length != 0 &&
        [endDate isEqualToString:@"Never"] == NO) {
        
        dateFormat = @"MMMM dd, yyyy";
        
    }
    
    endDateConvertedToDateFormat = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:endDate returnAs:[NSDate class]];
    
    if (endDate.length != 0 && [endDate isEqualToString:@"Never"] == NO && endDateConvertedToDateFormat != nil) {
        
        NSArray *dateArr = [endDate componentsSeparatedByString:@" "];
        
        NSString *month = [dateArr count] > 0 ? dateArr[0] : @"";
        NSString *day = [dateArr count] > 1 ? dateArr[1] : @"";
        NSString *year = [dateArr count] > 2 ? dateArr[2] : @"";
        
        endDate = [NSString stringWithFormat:@"%@ %@ %@ 11:59 PM", month, day, year];
        
    }
    
    return endDate;
    
}

-(NSString *)GenerateItemDueDate:(NSString *)itemRepeats itemTime:(NSString *)itemTime itemDays:(NSString *)itemDays itemDueDate:(NSString *)itemDueDate itemRepeatIfCompletedEarly:(NSString *)itemRepeatIfCompletedEarly itemCompleteAsNeeded:(NSString *)itemCompleteAsNeeded itemDueDatesSkipped:(NSMutableArray *)itemDueDatesSkipped itemDateLastReset:(NSString *)itemDateLastReset chosenItemDatePosted:(NSString *)chosenItemDatePosted {
    
    itemDueDate = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemDueDate stringToReplace:@"Any Time" replacementString:@"11:59 PM"];
    
    BOOL TaskIsRepeating = [[[BoolDataObject alloc] init] TaskIsRepeating:[@{@"ItemRepeats" : itemRepeats, @"ItemRepeatIfCompletedEarly" : itemRepeatIfCompletedEarly} mutableCopy] itemType:itemType];
    
    if (TaskIsRepeating == YES) {
        
        NSString *itemDatePosted = chosenItemDatePosted;
        NSString *dateFormat = @"MMMM dd, yyyy hh:mm a";
        
        if ([[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:dateFormat dateToConvert:itemDatePosted returnAs:[NSDate class]] == nil) {
            itemDatePosted = [[[GeneralObject alloc] init] GenerateDateWithConvertedFormatWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToConvert:itemDatePosted newFormat:dateFormat returnAs:[NSString class]];
        }
        
        NSString *itemStartDate = [self GenerateItemStartDate];
        NSString *itemEndDate = [self GenerateItemEndDate];
        
        BOOL EditingTaskWithoutAlteringDueDateData = NO;
        
        [[NSUserDefaults standardUserDefaults] setObject:EditingTaskWithoutAlteringDueDateData ? @"Yes" : @"No" forKey:@"EditingTaskWithoutAlteringDueDateData"];
        [[NSUserDefaults standardUserDefaults] setObject:EditingTaskWithoutAlteringDueDateData ? @"Yes" : @"No" forKey:@"EditingTaskWithoutAlteringDueDateData1"];
        [[NSUserDefaults standardUserDefaults] setObject:EditingTaskWithoutAlteringDueDateData == NO ? @"Yes" : @"No" forKey:@"AddingTaskForTheFirstTime1"];
        
        //First Iteration Should Always Be Equal To YES Here Because It Will Look For The First Future Due Date Even If The First Future Due Date Is The Current Item Due Date
        //If First Iteration Is Equal To NO It Will Ignore The First Future Due Date If It Happens To Be The Current Item Due Date
        NSLog(@"testing %@ing1 itemDatePosted:%@ itemDays:%@", @"Add", itemDatePosted, itemDays);
        NSString *newItemDueDate = [[[NotificationsObject alloc] init] GenerateArrayOfRepeatingDueDates:itemRepeats itemRepeatIfCompletedEarly:itemRepeatIfCompletedEarly itemCompleteAsNeeded:itemCompleteAsNeeded totalAmountOfFutureDates:2 maxAmountOfDueDatesToLoopThrough:1000 itemDatePosted:itemDatePosted itemDueDate:itemDueDate itemStartDate:itemStartDate itemEndDate:itemEndDate itemTime:itemTime itemDays:itemDays itemDueDatesSkipped:itemDueDatesSkipped itemDateLastReset:itemDateLastReset SkipStartDate:NO][0];
        NSLog(@"testing %@ing2 newItemDueDate:%@", @"Add", newItemDueDate);
        
        newItemDueDate = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:newItemDueDate stringToReplace:@"Any Time" replacementString:@"11:59 PM"];
        
        if ([newItemDueDate isEqualToString:itemDatePosted] && itemDueDate.length > 0 && itemDueDate != nil && itemDueDate != NULL && [itemDueDate containsString:@"(null)"] == NO) {
            newItemDueDate = itemDueDate;
        }
        
        newItemDueDate = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:newItemDueDate stringToReplace:@"Any Time" replacementString:@"11:59 PM"];
        
        return newItemDueDate;
        
    } else if ([chosenItemDueDate isEqualToString:@"Today"]) {
        
        NSString *dateStringCurrent = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrent];
        
    } else if ([chosenItemDueDate isEqualToString:@"Tomorrow"]) {
        
        NSString *dateStringCurrentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSDate class]];
        NSString *dateStringCurrentDateWeekBefore = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"MMMM dd, yyyy" dateToAddTimeTo:dateStringCurrentDate timeToAdd:60*60*24 returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrentDateWeekBefore];
        
    } else if ([chosenItemDueDate isEqualToString:@"End of Week"]) {
        
        NSDate *currentDate = [NSDate date];
        NSCalendar *calendar = [NSCalendar currentCalendar];
        NSDateComponents *components = [calendar components:(NSCalendarUnitWeekday | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond) fromDate:currentDate];
        int daysRemainingUntilSunday = ((7 - (int)components.weekday) % 7) + 1;
        
        if ((int)components.weekday == 1) {
            daysRemainingUntilSunday = 0;
        }
        
        NSString *dateStringCurrentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSDate class]];
        NSString *dateStringCurrentDateWeekBefore = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"MMMM dd, yyyy" dateToAddTimeTo:dateStringCurrentDate timeToAdd:60*60*24*daysRemainingUntilSunday returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrentDateWeekBefore];
        
    } else if ([chosenItemDueDate isEqualToString:@"Next Week"]) {
        
        NSDate *currentDate = [NSDate date];
        NSCalendar *calendar = [NSCalendar currentCalendar];
        NSDateComponents *components = [calendar components:(NSCalendarUnitWeekday | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond) fromDate:currentDate];
        int daysRemainingUntilSunday = (((7 - (int)components.weekday) % 7) + 1) + 7;
        
        if ((int)components.weekday == 1) {
            daysRemainingUntilSunday = 0+7;
        }
        
        NSString *dateStringCurrentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSDate class]];
        NSString *dateStringCurrentDateWeekBefore = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"MMMM dd, yyyy" dateToAddTimeTo:dateStringCurrentDate timeToAdd:60*60*24*daysRemainingUntilSunday returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrentDateWeekBefore];
        
    } else if ([chosenItemDueDate isEqualToString:@"End of Month"]) {
        
        NSDate *currentDate = [NSDate date];
        NSCalendar *calendar = [NSCalendar currentCalendar];
        NSDateComponents *components = [calendar components:(NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond) fromDate:currentDate];
        int numberOfDaysInMonth = [[[NotificationsObject alloc] init] GetMonthDayAmountFromMonthNumber:components.month];
        
        int daysRemainingUntilSunday = ((numberOfDaysInMonth - (int)components.day) % numberOfDaysInMonth);
        
        if ((int)components.day == numberOfDaysInMonth) {
            daysRemainingUntilSunday = 0;
        }
        
        NSString *dateStringCurrentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSDate class]];
        NSString *dateStringCurrentDateWeekBefore = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"MMMM dd, yyyy" dateToAddTimeTo:dateStringCurrentDate timeToAdd:60*60*24*daysRemainingUntilSunday returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrentDateWeekBefore];
        
    } else if ([chosenItemDueDate isEqualToString:@"Next Month"]) {
        
        NSDate *currentDate = [NSDate date];
        NSCalendar *calendar = [NSCalendar currentCalendar];
        NSDateComponents *components = [calendar components:(NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond) fromDate:currentDate];
        int numberOfDaysInMonth = [[[NotificationsObject alloc] init] GetMonthDayAmountFromMonthNumber:components.month];
        
        int numberOfDaysInNextMonth = 0;
        
        if (components.month == 12) {
            numberOfDaysInNextMonth = [[[NotificationsObject alloc] init] GetMonthDayAmountFromMonthNumber:1];
        } else {
            numberOfDaysInNextMonth = [[[NotificationsObject alloc] init] GetMonthDayAmountFromMonthNumber:components.month+1];
        }
        
        int daysRemainingUntilSunday = (((numberOfDaysInMonth - (int)components.day) % numberOfDaysInMonth)) + numberOfDaysInNextMonth;
        
        if ((int)components.day == numberOfDaysInMonth) {
            daysRemainingUntilSunday = 0+numberOfDaysInNextMonth;
        }
        
        NSString *dateStringCurrentDate = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy" returnAs:[NSDate class]];
        NSString *dateStringCurrentDateWeekBefore = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"MMMM dd, yyyy" dateToAddTimeTo:dateStringCurrentDate timeToAdd:60*60*24*daysRemainingUntilSunday returnAs:[NSString class]];
        
        return [NSString stringWithFormat:@"%@ 11:59 PM", dateStringCurrentDateWeekBefore];
        
    } else if ([itemDueDate containsString:@"AM"] || [itemDueDate containsString:@"PM"]) {
        
        return itemDueDate;
        
    }
    
    
    
    return @"No Due Date";
    
}

-(NSDictionary *)GenerateItemCostPerPerson:(NSString *)itemAmountLocal itemAssignedToArrayLocal:(NSMutableArray *)itemAssignedToArrayLocal {
    
    NSMutableDictionary *itemCostPerPerson = [NSMutableDictionary dictionary];
    
    if ([itemType isEqualToString:@"Expense"] == NO) {
        return itemCostPerPerson;
    }
    
    for (NSString *userID in itemAssignedToArrayLocal) {
        
        NSString *itemAmountTextFieldText = itemAmountLocal;
        itemAmountTextFieldText = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:itemAmountTextFieldText arrayOfSymbols:@[localCurrencyDecimalSeparatorSymbol]];
        
        float itemAmountDivided = [itemAmountTextFieldText floatValue]/itemAssignedToArrayLocal.count;
        NSString *itemAmountDividedString = [NSString stringWithFormat:@"%.2f", itemAmountDivided];
        
        itemAmountDividedString = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:itemAmountDividedString arrayOfSymbols:@[localCurrencyDecimalSeparatorSymbol, localCurrencyNumberSeparatorSymbol]];
        itemAmountDividedString = [[[GeneralObject alloc] init] GenerateAmountInTextFieldInProperFormat:NSRangeFromString(itemAmountDividedString) replacementString:itemAmountDividedString];
        
        [itemCostPerPerson setObject:itemAmountDividedString forKey:userID];
        
    }
    
    return itemCostPerPerson;
}

-(NSString *)GenerateItemTime:(NSString *)itemDueDate itemTime:(NSString *)itemTime {
    
    if ([itemDueDate containsString:@"Any Time"]) {
        return @"Any Time";
    }
    
    NSString *itemTimeLocal = @"Any Time";
    
    NSString *hourMinuteComp = @"";
    NSString *AMPMComp = @"";
    
    if ([itemDueDate containsString:@"AM"] || [itemDueDate containsString:@"PM"]) {
        
        NSArray *arr = [itemDueDate componentsSeparatedByString:@" "];
        hourMinuteComp = arr[3] ? arr[3] : @"";
        AMPMComp = arr[4] ? arr[4] : @"";
        
    }
    
    itemTime = [NSString stringWithFormat:@"%@ %@", hourMinuteComp, AMPMComp];
    
    if (([hourMinuteComp length] == 0 || [AMPMComp length] == 0) && [itemTime length] > 0) {
        itemTimeLocal = itemTime;
    }
    
    return itemTime;
}

#pragma mark - IBAction Methods

-(NSString *)CompleteUncompleteTaskAction_GenerateRepeatIfCompletedEarlyDrowDownText:(NSMutableDictionary *)returningDictToUse {
    
    NSString *itemRepeatsString = returningDictToUse[@"ItemRepeats"];
    
    NSArray *arr = [itemRepeatsString componentsSeparatedByString:@" "];
    
    if (arr.count == 3) {
        
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:itemRepeatsString arrayOfSymbols:@[@"Every"]];
        
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" Other " replacementString:@" 2 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 3rd " replacementString:@" 3 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 4th " replacementString:@" 4 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 5th " replacementString:@" 5 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 6th " replacementString:@" 6 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 7th " replacementString:@" 7 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 8th " replacementString:@" 8 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 9th " replacementString:@" 9 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 10th " replacementString:@" 10 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 11th " replacementString:@" 11 "];
        itemRepeatsString = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemRepeatsString stringToReplace:@" 12th " replacementString:@" 12 "];
        
        itemRepeatsString = [NSString stringWithFormat:@"%@S", itemRepeatsString];
        
    } else {
        
        if ([itemRepeatsString containsString:@"Day"] || [itemRepeatsString containsString:@"Daily"]) {
            
            itemRepeatsString = @"1 DAY";
            
        } else if ([returningDictToUse[@"ItemRepeats"] containsString:@"Week"]) {
            
            itemRepeatsString = @"1 WEEK";
            
        } else if ([returningDictToUse[@"ItemRepeats"] containsString:@"Month"]) {
            
            itemRepeatsString = @"1 MONTH";
            
        }
        
    }
    
    NSString *itemDueDate = returningDictToUse[@"ItemDueDate"];
    NSString *itemTime = returningDictToUse[@"ItemTime"];
    
    if ([itemTime containsString:@"Any Time"]) {
        itemDueDate = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:itemDueDate stringToReplace:@"11:59 PM" replacementString:@""];
    }
    
    NSString *repeatIfCompletedEarlyDropDownText = [NSString stringWithFormat:@"\"%@\" HAS BEEN COMPLETED EARLY. IT'S NEW DUE DATE IS %@.", returningDictToUse[@"ItemName"], [itemDueDate uppercaseString]];
    
    return repeatIfCompletedEarlyDropDownText;
}

#pragma mark - Select Option - Duplicate

-(void)AddMultipleItemsToItemDict:(NSDictionary *)userInfo {
    
    keyArray = [[[GeneralObject alloc] init] GenerateKeyArray];
    
    self->itemType = [[[GeneralObject alloc] init] GenerateItemType];
    self->itemDict = [self General_GenerateItemDictFomrNSUserDefaults];
    
    
    
    for (NSString *itemUniqueID in userInfo[@"ItemUniqueID"]) {
        
        NSUInteger indexUserInfo = [userInfo[@"ItemUniqueID"] indexOfObject:itemUniqueID];
        
        for (NSString *key in [userInfo allKeys]) {
            
            NSMutableArray *arr = self->itemDict[key] ? [self->itemDict[key] mutableCopy] : [NSMutableArray array];
            id object = userInfo[key] && [(NSArray *)userInfo[key] count] > indexUserInfo ? userInfo[key][indexUserInfo] : [[[GeneralObject alloc] init] GenerateDefaultValueBasedOnKey:key];
            [arr addObject:object];
            [self->itemDict setObject:arr forKey:key];
            
        }
        
    }

    [self SaveQueriedDataToUserDefaults:YES];
    
}

#pragma mark - Table View CellForRow Methods

-(NSString *)GenerateCompletedLabelItemCompleteAsNeeded:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    NSMutableDictionary *itemCompletedDict = singleObjectItemDict[@"ItemCompletedDict"] ? [singleObjectItemDict[@"ItemCompletedDict"] mutableCopy] : [NSMutableDictionary dictionary];
    
    NSString *subLabelString = @"No Due Date";
    NSString *lastTimeCompleted = @"";
    
    if ([[itemCompletedDict allKeys] count] > 0) {
        
        NSDictionary *lastTimeCompletedDict = [[[GeneralObject alloc] init] GeneralLastUserIDCompletedTaskRepeatingWhenCompleted:itemCompletedDict specificUserID:userID];
        NSString *temp = lastTimeCompletedDict[@"LastDateMarkedCompleted"] ? [[[GeneralObject alloc] init] GenerateDateWithConvertedFormatWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToConvert:lastTimeCompletedDict[@"LastDateMarkedCompleted"] newFormat:@"EEE, MMM. dd" returnAs:[NSString class]] : @"";
        lastTimeCompleted = lastTimeCompletedDict[@"LastDateMarkedCompleted"] ? [NSString stringWithFormat:@"%@", temp] : @"";

        subLabelString = [lastTimeCompleted containsString:@"null"] == NO ? [NSString stringWithFormat:@"Last Completed on %@", lastTimeCompleted] : @"No Due Date";
        
    }

    return subLabelString;
}

-(int)GenerateSecondsIfItemPastDueHasntExpired:(NSString *)itemPastDue itemDueDate:(NSString *)itemDueDate {
    
    int itemPastDueSeconds = [[[GeneralObject alloc] init] GenerateNumberOfUnitsStringToSeconds:itemPastDue];
    
    NSString *currentDateString = [[[GeneralObject alloc] init] GenerateCurrentDateWithFormat:@"MMMM dd, yyyy hh:mm a" returnAs:[NSString class]];
    NSTimeInterval secondsPassedSinceItemDueDate = [[[GeneralObject alloc] init] GenerateTimeIntervalBetweenTwoDates:itemDueDate dateString2:currentDateString dateFormat:@"MMMM dd, yyyy hh:mm a"];
    
    if (secondsPassedSinceItemDueDate < itemPastDueSeconds) {
        itemPastDueSeconds -= secondsPassedSinceItemDueDate;
        return itemPastDueSeconds;
    }
    
    return 0;
}

#pragma mark - Table View DidSelect Methods

-(void)CheckIfSectionIsSelected:(NSIndexPath *)indexPath {
    
    BOOL AllItemsSelectedInSection = true;
    
    BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:dataDisplaySectionsArray classArr:@[[NSArray class], [NSMutableArray class]]];
    
    NSString *mainTableViewSectionName = ObjectIsKindOfClass == YES && [dataDisplaySectionsArray count] > indexPath.section ? [dataDisplaySectionsArray objectAtIndex:indexPath.section] : @"";
    
    NSMutableDictionary *dictToUse = [NSMutableDictionary dictionary];
    
    if ([[self->dataDisplayDict allKeys] containsObject:mainTableViewSectionName]) {
        dictToUse = [self->dataDisplayDict[mainTableViewSectionName] mutableCopy];
    }
    
    if (dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > 0) {
        
        for (int i=0 ; i<[(NSArray *)dictToUse[@"ItemUniqueID"] count] ; i++) {
            
            NSString *itemUniqueID = dictToUse[@"ItemUniqueID"][i];
            
            if (!self->selectedItemsDict[itemUniqueID]) {
                
                AllItemsSelectedInSection = false;
                
            }
            
        }
        
    } else {
        
        AllItemsSelectedInSection = false;
        
    }
    
    if (AllItemsSelectedInSection) {
        [selectedSectionsDict setObject:mainTableViewSectionName forKey:mainTableViewSectionName];
    }
    
}

#pragma mark - Table View TrailingSwipe Methods

-(void)DeleteTaskListAction_UpdateFolderData:(NSString *)oldTaskName completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSMutableDictionary *oldFolderDict = [self DeleteTaskListAction_GenerateOldFolderDict:oldTaskName];
    
    if (oldFolderDict[@"FolderID"] && [oldFolderDict[@"FolderID"] length] > 0) {
        
        NSString *oldFolderID = oldFolderDict[@"FolderID"] ? oldFolderDict[@"FolderID"] : @"xxx";
        NSString *oldFolderCreatedBy = oldFolderDict[@"FolderCreatedBy"] ? oldFolderDict[@"FolderCreatedBy"] : @"xxx";
        NSMutableDictionary *oldFolderTaskLists = oldFolderDict[@"FolderTaskLists"] ? oldFolderDict[@"FolderTaskLists"] : [NSMutableDictionary dictionary];
        
        [[[SetDataObject alloc] init] UpdateDataFolder:oldFolderCreatedBy folderID:oldFolderID dataDict:@{@"FolderTaskLists" : oldFolderTaskLists} completionHandler:^(BOOL finished) {
            
            finishBlock(YES);
            
        }];
        
    } else {
        
        finishBlock(YES);
        
    }
    
}

-(void)DeleteTaskListAction_DeleteTaskListData:(NSString *)oldTaskName completionHandler:(void (^)(BOOL finished))finishBlock {
    
    NSUInteger taskListIndex = [self->taskListDict[@"TaskListName"] indexOfObject:oldTaskName];
    
    NSString *taskListID = self->taskListDict[@"TaskListID"] && [(NSArray *)self->taskListDict[@"TaskListID"] count] > taskListIndex ? self->taskListDict[@"TaskListID"][taskListIndex] : @"xxx";
    NSString *taskListCreatedBy = self->taskListDict[@"TaskListCreatedBy"] && [(NSArray *)self->taskListDict[@"TaskListCreatedBy"] count] > taskListIndex ? self->taskListDict[@"TaskListCreatedBy"][taskListIndex] : @"xxx";
    
   
    [[[DeleteDataObject alloc] init] DeleteDataRemoveTaskList:taskListID taskListCreatedBy:taskListCreatedBy completionHandler:^(BOOL finished) {
        
        finishBlock(YES);
        
    }];
    
}

-(void)DeleteTaskListAction_CompletionBlock:(NSString *)oldTaskName totalQueries:(int)totalQueries completedQueries:(int)completedQueries completionHandler:(void (^)(BOOL finished))finishBlock {
    
    
    if (totalQueries == completedQueries) {
        
        NSUInteger taskListIndex = [self->taskListDict[@"TaskListName"] indexOfObject:oldTaskName];
        NSString *taskListName = self->taskListDict[@"TaskListName"] && [(NSArray *)self->taskListDict[@"TaskListName"] count] > taskListIndex ? self->taskListDict[@"TaskListName"][taskListIndex] : @"xxx";
        
        NSArray *keyArray = [[[GeneralObject alloc] init] GenerateTaskListKeyArray];
        
        for (NSString *key in keyArray) {
            
            NSMutableArray *arr = self->taskListDict[key] ? [self->taskListDict[key] mutableCopy] : [NSMutableArray array];
            if ([arr count] > taskListIndex) {  [arr removeObjectAtIndex:taskListIndex]; }
            [self->taskListDict setObject:arr forKey:key];
            
        }
        
        
        
        NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
        
        if ([sectionSelected isEqualToString:taskListName]) {
            
            [[NSUserDefaults standardUserDefaults] setObject:@"All" forKey:@"CategorySelected"];
            self->_middleLabel.text = @"All";
            
        }
        
        
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            [self General_GenerateItemsToDisplay:^(BOOL finished) {
                
            }];
            
        });
        
    }
    
}

#pragma mark - Table View ContextMenuConfig Methods

-(UIMenu *)GenerateTopContextMenuSortMenu {
    
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultUser"]) {
        
        BOOL ObjectIsKindOfClass = [[[BoolDataObject alloc] init] CheckIfObjectIsKindOfClass:[[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultUser"] classArr:@[[NSString class]]];
        
        if (ObjectIsKindOfClass == YES) {
            
            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"SortSelectedDefaultUser"];
            
        }
        
    }
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    NSString *sortSelectedDefaultCategory = [[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultCategory"];
    
    BOOL TagSelected = sideBarCategorySectionArrayAltered && [sideBarCategorySectionArrayAltered count] > tagsSection && sideBarCategorySectionArrayAltered[tagsSection][@"Names"] ? [sideBarCategorySectionArrayAltered[tagsSection][@"Names"] containsObject:sectionSelected] : NO;
    BOOL ColorSelected = sideBarCategorySectionArrayAltered && [sideBarCategorySectionArrayAltered count] > colorsSection && sideBarCategorySectionArrayAltered[colorsSection][@"Names"] ? [sideBarCategorySectionArrayAltered[colorsSection][@"Names"] containsObject:sectionSelected] : NO;
    BOOL ListSelected = taskListDict[@"TaskListName"] ? [taskListDict[@"TaskListName"] containsObject:sectionSelected] : NO;
    
    
    
    NSMutableArray* actions = [[NSMutableArray alloc] init];
    
    
    
    NSArray *actionArray = @[@"By Name", @"By Date", @"By Difficulty", @"By Priority", @"By Tag", @"By Color", @"By List"];
    
    for (NSString *actionName in actionArray) {
        
        if (([actionName isEqualToString:@"Custom"] && ListSelected == YES) ||
            ([actionName isEqualToString:@"By Name"]) ||
            ([actionName isEqualToString:@"By Date"]) ||
            ([actionName isEqualToString:@"By Difficulty"]) ||
            ([actionName isEqualToString:@"By Priority"]) ||
            ([actionName isEqualToString:@"By Tag"] && TagSelected == NO) ||
            ([actionName isEqualToString:@"By Color"] && ColorSelected == NO) ||
            ([actionName isEqualToString:@"By LIst"] && ListSelected == NO)) {
            
            NSString *actionImageString = @"";
            
            if ([sortSelectedDefaultCategory isEqualToString:@"By Name"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if (([sortSelectedDefaultCategory isEqualToString:@"By Date"] || sortSelectedDefaultCategory == nil || sortSelectedDefaultCategory == NULL || sortSelectedDefaultCategory.length == 0) && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"By Difficulty"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"By Priority"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"By Tag"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"By Color"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"By List"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            } else if ([sortSelectedDefaultCategory isEqualToString:@"Custom"] && [actionName isEqualToString:sortSelectedDefaultCategory]) {
                
                actionImageString = @"checkmark";
                
            }
            
            [actions addObject:[UIAction actionWithTitle:actionName image:[actionImageString length] > 0 ? [UIImage systemImageNamed:actionImageString] : nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Sort %@", actionName] completionHandler:^(BOOL finished) {
                    
                }];
                
                NSString *key = @"SortSelectedDefaultCategory";
                [[NSUserDefaults standardUserDefaults] setObject:actionName forKey:key];
                
                [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                    
                }];
                
                [self SetUpTopEllipsisContextMenu];
                
                self.customTableView.dragDelegate = self;
                self.customTableView.dragInteractionEnabled = true;
                
            }]];
            
        }
        
    }
    
    
    
    UIMenu *menu = [UIMenu menuWithTitle:@"Sort" image:[UIImage systemImageNamed:@"arrow.up.arrow.down"] identifier:@"" options:0 children:actions];
    
    NSString *subtitleName = @"By Date";
    
    if ([sortSelectedDefaultCategory isEqualToString:@"By Name"]) {
        
        subtitleName = @"By Name";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By Date"] || sortSelectedDefaultCategory == nil || sortSelectedDefaultCategory == NULL || sortSelectedDefaultCategory.length == 0) {
        
        subtitleName = @"By Date";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By Difficulty"]) {
        
        subtitleName = @"By Difficulty";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By Priority"]) {
        
        subtitleName = @"By Priority";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By Tag"]) {
        
        subtitleName = @"By Tag";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By Color"]) {
        
        subtitleName = @"By Color";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"By List"]) {
        
        subtitleName = @"By List";
        
    } else if ([sortSelectedDefaultCategory isEqualToString:@"Custom"]) {
        
        subtitleName = @"Custom";
        
    }
    
    if (@available(iOS 15.0, *)) {
        menu.subtitle = subtitleName;
    } else {
        // Fallback on earlier versions
    }
    
    
    
    return menu;
}

-(UIMenu *)GenerateTopContextMenuAssignedToMenu {
    
    NSMutableArray *sortSelectedDefaultUser = [[[NSUserDefaults standardUserDefaults] objectForKey:@"SortSelectedDefaultUser"] mutableCopy];
    NSMutableArray *actions1 = [NSMutableArray array];
    NSMutableArray *actions2 = [NSMutableArray array];
    
    if (homeMembersDict && homeMembersDict[@"Username"]) {
        
        for (NSString *username in homeMembersDict[@"Username"]) {
            
            NSString *usernameSelected = @"";
            
            if ([sortSelectedDefaultUser containsObject:username]) {
                
                usernameSelected = username;
                
            }
            
            //usernameSelected = [[sortSelectedDefaultUser componentsSeparatedByString:@"Assigned To ••• "] count] > 1 ? [sortSelectedDefaultUser componentsSeparatedByString:@"Assigned To ••• "][1] : @"";
            //}
            
            UIImage *imageString = [usernameSelected isEqualToString:username] ? [[UIImage systemImageNamed:@"checkmark.circle.fill"] imageWithTintColor:[UIColor systemGreenColor] renderingMode:UIImageRenderingModeAlwaysOriginal] : nil;
            
            [actions2 addObject:[UIAction actionWithTitle:username image:imageString identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"View Assigned To - %@", username] completionHandler:^(BOOL finished) {
                    
                }];
                
                NSString *key = @"SortSelectedDefaultUser";
                NSMutableArray *arr = [[NSUserDefaults standardUserDefaults] objectForKey:key] ? [[[NSUserDefaults standardUserDefaults] objectForKey:key] mutableCopy] : [NSMutableArray array];
                if ([arr containsObject:@"Assigned To"] == NO) { [arr addObject:@"Assigned To"]; }
                if ([arr containsObject:username] == NO) { [arr addObject:username]; } else { [arr removeObject:username]; }
                [[NSUserDefaults standardUserDefaults] setObject:arr forKey:key];
                
                [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                    
                }];
                
                [self SetUpTopEllipsisContextMenu];
                
            }]];
            
        }
        
        UIAction *clearAction = [UIAction actionWithTitle:@"Clear" image:[UIImage systemImageNamed:@"clear.fill"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"View Assigned To - %@", @"Nobody"] completionHandler:^(BOOL finished) {
                
            }];
            
            NSString *key = @"SortSelectedDefaultUser";
            [[NSUserDefaults standardUserDefaults] removeObjectForKey:key];
            
            [self General_GenerateItemsToDisplay_Keep:^(BOOL finished) {
                
            }];
            
            [self SetUpTopEllipsisContextMenu];
            
        }];
        
        [clearAction setAttributes:UIMenuElementAttributesDestructive];
        
        [actions1 addObject:clearAction];
        
        UIMenu *clearMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"" options:UIMenuOptionsDisplayInline children:actions1];
        [actions2 addObject:clearMenu];
        
    }
    
    
    
    UIMenu *menu = [UIMenu menuWithTitle:@"Assigned To" image:nil identifier:@"View" options:0 children:actions2];
    
    
    
    NSString *key = @"SortSelectedDefaultUser";
    NSMutableArray *arr = [[NSUserDefaults standardUserDefaults] objectForKey:key] ? [[[NSUserDefaults standardUserDefaults] objectForKey:key] mutableCopy] : [NSMutableArray array];
    NSString *subtitle = @"";
    
    for (NSString *username in arr) {
        
        if ([username containsString:@"Assigned To"] == NO) {
            
            if (subtitle.length == 0) {
                subtitle = username;
            } else {
                subtitle = [NSString stringWithFormat:@"%@, %@", subtitle, username];
            }
            
        }
        
    }
    
    if (@available(iOS 15.0, *)) {
        menu.subtitle = subtitle;
    } else {
        // Fallback on earlier versions
    }
    
    
    
    return menu;
}

-(UIAction *)GenerateTopContextMenuShowCompletedAction {
    
    UIAction *action = [UIAction actionWithTitle:@"" image:nil identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
    }];
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    
    if ([sectionSelected isEqualToString:@"Completed"] == NO) {
        
        NSString *completeUncompleteString = @"Show Completed";
        NSString *completeUncompleteImageString = @"checkmark";
        
        if ([[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] isEqualToString:@"Yes"] ||
            [[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompleted"] == NULL ||
            [[[NSUserDefaults standardUserDefaults] objectForKey:@"ShowCompletedToggledAtLeastOnce"] isEqualToString:@"Yes"] == NO) {
            
            completeUncompleteString = @"Hide Completed";
            completeUncompleteImageString = @"xmark";
            
        }
        
        action = [UIAction actionWithTitle:completeUncompleteString image:[completeUncompleteImageString length] > 0 ? [UIImage systemImageNamed:completeUncompleteImageString] : nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
            
            [self SelectShowCompleted];
            
        }];
        
    }
    
    return action;
}

-(UIAction *)GenerateTopContextMenuManageSectionAction {
    
    UIAction *action = [UIAction actionWithTitle:@"" image:nil identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
    }];
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    
    BOOL ListSelected = taskListDict[@"TaskListName"] ? [taskListDict[@"TaskListName"] containsObject:sectionSelected] : NO;
    
    if (ListSelected == YES) {
        
        //        action = [UIAction actionWithTitle:@"Manage Sections" image:[UIImage systemImageNamed:@"square.stack.3d.up"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        //
        //            [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Manage Sections Selected"] completionHandler:^(BOOL finished) {
        //
        //            }];
        //
        //            [[[PushObject alloc] init] PushToViewMutableOptionsViewController:[NSMutableDictionary dictionary] itemsDict:[self->sectionDict mutableCopy] viewingSections:YES viewingFolders:NO homeMembersArray:nil homeMembersDict:nil itemOccurrencesDict:nil folderDict:nil taskListDict:nil sectionDict:nil templateDict:nil itemNamesAlreadyUsed:nil allItemAssignedToArrays:nil allItemTagsArrays:nil currentViewController:self];
        //
        //        }];
        
    }
    
    return action;
}

-(UIAction *)GenerateTopContextMenuSelectAction {
    
    UIAction *action = [UIAction actionWithTitle:@"" image:nil identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
    }];
    
    action = [UIAction actionWithTitle:@"Select" image:[UIImage systemImageNamed:@"computermouse"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [self SelectSelect:self];
        
    }];
    
    return action;
}

-(UIAction *)GenerateTopContextMenuTrashAction {
    
    UIAction *action = [UIAction actionWithTitle:@"" image:nil identifier:@"" handler:^(__kindof UIAction * _Nonnull action) {
        
    }];
    
    NSString *sectionSelected = [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"CategorySelected"] : @"All";
    
    BOOL TrashSelected = sectionSelected ? [sectionSelected isEqualToString:@"Trash"] : NO;
    
    if (TrashSelected == YES) {
        
        action = [UIAction actionWithTitle:@"Empty Trash" image:[UIImage systemImageNamed:@"trash"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {
            
            NSString *actionSheetTitle = [[self->selectedItemsDict allKeys] count] != 1 ? [NSString stringWithFormat:@"Are you sure you would like to permanently delete all of these %@s?", [self->itemType lowercaseString]] : [NSString stringWithFormat:@"Are you sure you would like to permanently delete this %@?", [self->itemType lowercaseString]];
            
            UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:actionSheetTitle message:nil preferredStyle:UIAlertControllerStyleActionSheet];
            
            UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:@"Permanently Delete" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Empty Trash Selected"] completionHandler:^(BOOL finished) {
                    
                }];
                
                if (self->dataDisplaySectionsArray) {
                    
                    for (NSString *section in self->dataDisplaySectionsArray) {
                        
                        NSDictionary *dictToUse = self->dataDisplayDict[section] ? self->dataDisplayDict[section] : [NSMutableDictionary dictionary];
                        
                        if (dictToUse[@"ItemUniqueID"]) {
                            
                            for (int i=0 ; i<[(NSArray *)dictToUse[@"ItemUniqueID"] count] ; i++) {
                                
                                NSString *itemUniqueID = dictToUse[@"ItemUniqueID"] && [(NSArray *)dictToUse[@"ItemUniqueID"] count] > i ? dictToUse[@"ItemUniqueID"][i] : @"";
                                
                                if ([[self->selectedItemsDict allKeys] containsObject:itemUniqueID] == NO) {
                                    
                                    [self->selectedItemsDict setObject:@{@"ItemUniqueID" : itemUniqueID} forKey:itemUniqueID];
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
                [self DeleteTrashPermanently:nil];
                
            }];
            
            [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
                
                [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Empty Trash Cancelled"] completionHandler:^(BOOL finished) {
                    
                }];
                
            }]];
            
            [actionSheet addAction:deleteAction];
            
            [self presentViewController:actionSheet animated:YES completion:nil];
            
        }];
        
        [action setAttributes:UIMenuElementAttributesDestructive];
        
    }
    
    return action;
}

#pragma mark - Task List Context Menu Actions

-(UIAction *)TaskListItemContextMenuTaskListAction:(NSString *)taskListName arrayOfSelectedTaskLists:(NSMutableArray *)arrayOfSelectedTaskLists {

    NSString *imageString = [arrayOfSelectedTaskLists containsObject:taskListName] ? @"checkmark" : @"list.bullet.rectangle.portrait";
   
    UIAction *taskListAction = [UIAction actionWithTitle:taskListName image:[UIImage systemImageNamed:imageString] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Specific List Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
        
        [self MoveToTaskList_UpdateTaskInTaskList:taskListName completionHandler:^(BOOL finished) {
            
            [self SetUpBottomFolderContextMenu];
            
        }];
        
    }];
    
    return taskListAction;
}

-(UIAction *)TaskListItemContextMenuSuggestedTaskListAction:(NSString *)taskListName arrayToUse:(NSArray *)arrayToUse arrayOfSelectedTaskLists:(NSMutableArray *)arrayOfSelectedTaskLists {
    
    NSString *imageString = @"list.bullet.rectangle.portrait";
    
    for (NSString *taskListName in arrayToUse) {
        
        if ([arrayOfSelectedTaskLists containsObject:taskListName] && [taskListDict[@"TaskListName"] containsObject:taskListName] == NO) {
            
            imageString = @"checkmark";
            
        }
        
    }
    
    UIAction *taskListAction = [UIAction actionWithTitle:taskListName image:[UIImage systemImageNamed:imageString] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"Specific List Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
        
        BOOL TaskListChosenAlreadyExists =  [self->taskListDict[@"TaskListName"] containsObject:taskListName];
        
        if (TaskListChosenAlreadyExists == YES) {
            
            [self MoveToTaskList_UpdateTaskInTaskList:taskListName completionHandler:^(BOOL finished) {
                
            }];
            
        } else {
            
            [self StartProgressView];
            
            NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] ? [[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"] : @"xxx";
            NSString *randomID = [[[GeneralObject alloc] init] GenerateRandomESTNumberIntoString];
            NSString *dateCreated = [[[GeneralObject alloc] init] GenerateCurrentDateString];
            NSString *newName = taskListName;
            
            NSMutableDictionary *setDataDict = [@{
                @"TaskListID" : randomID,
                @"TaskListDateCreated" : dateCreated,
                @"TaskListCreatedBy" : userID,
                @"TaskListName" : newName,
                @"TaskListSections" : [NSMutableArray array],
                @"TaskListItems" : [NSMutableDictionary dictionary]
            } mutableCopy];
            
            [[[SetDataObject alloc] init] SetDataAddTaskList:setDataDict[@"TaskListCreatedBy"] taskListID:setDataDict[@"TaskListID"] dataDict:setDataDict completionHandler:^(BOOL finished) {
                
                [[[GeneralObject alloc] init] CallNSNotificationMethods:@"AddOrEditTaskList" userInfo:setDataDict locations:@[@"Tasks", @"MultiAddTasks", @"ViewTask"]];
                
                [self->progressView setHidden:YES];
                
                [self MoveToTaskList_UpdateTaskInTaskList:taskListName completionHandler:^(BOOL finished) {
                    
                }];
                
            }];
            
        }
        
    }];
    
    return taskListAction;
}

-(UIAction *)TaskListItemContextMenuNewTaskListAction {
    
    UIAction *newTaskListAction = [UIAction actionWithTitle:@"New List" image:[UIImage systemImageNamed:@"plus"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"New List Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
        
        [[[PushObject alloc] init] PushToViewTaskListsViewController:[self->folderDict mutableCopy] taskListDict:[self->taskListDict mutableCopy] itemToEditDict:NULL itemUniqueID:@"" comingFromTasksViewController:YES comingFromViewTaskViewController:NO currentViewController:self];
     
    }];
    
    return newTaskListAction;
}

-(UIAction *)TaskListItemContextMenuNoTaskListAction {
    
    UIAction *noTaskListAction = [UIAction actionWithTitle:@"No List" image:[UIImage systemImageNamed:@"nosign"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
        
        [[[SetDataObject alloc] init] SetDataFIRStoreAnalyticsNewTouchEvent:self touchEvent:[NSString stringWithFormat:@"No List Clicked For %@", [[[GeneralObject alloc] init] GenerateItemType]] completionHandler:^(BOOL finished) {
            
        }];
         
        [self MoveToTaskList_RemoveTaskFromTaskList:^(BOOL finished) {
            
            [self SetUpBottomFolderContextMenu];
            
        }];
        
    }];
    
    [noTaskListAction setAttributes:UIMenuElementAttributesDestructive];
    
    return noTaskListAction;
}

#pragma mark - Task List Context Menus

-(UIMenu *)TaskListItemContextMenuTaskListActionsMenu:(NSMutableArray *)taskListActions {
    
    UIMenu *taskListMenu = [UIMenu menuWithTitle:@"" image:[UIImage systemImageNamed:@"list.bullet.rectangle.portrait"] identifier:@"" options:UIMenuOptionsDisplayInline children:taskListActions];
    
    return taskListMenu;
}


-(UIMenu *)TaskListItemContextMenuSuggestedTaskListActionsMenu:(NSMutableArray *)suggestedTaskListActions arrayToUse:(NSArray *)arrayToUse arrayOfSelectedTaskLists:(NSMutableArray *)arrayOfSelectedTaskLists {
    
    NSString *imageString = @"list.bullet.rectangle.portrait";
    
    for (NSString *taskListName in arrayToUse) {
        
        if ([arrayOfSelectedTaskLists containsObject:taskListName] && [taskListDict[@"TaskListName"] containsObject:taskListName] == NO) {
            
            imageString = @"checkmark";
            
        }
        
    }
    
    UIMenu *suggestedTaskListMenu = [UIMenu menuWithTitle:@"Suggested Lists" image:[UIImage systemImageNamed:imageString] identifier:@"" options:0 children:suggestedTaskListActions];
    
    return suggestedTaskListMenu;
}

-(UIMenu *)TaskListItemContextMenuNewTaskListActionsMenu:(NSMutableArray *)newTaskListActions {
    
    UIMenu *newTaskListMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"" options:UIMenuOptionsDisplayInline children:newTaskListActions];
    
    return newTaskListMenu;
}

-(UIMenu *)TaskListItemContextMenuNoTaskListActionsMenu:(NSMutableArray *)noTaskListActions {
    
    UIMenu *noTaskListMenu = [UIMenu menuWithTitle:@"" image:nil identifier:@"" options:UIMenuOptionsDisplayInline children:noTaskListActions];
    
    return noTaskListMenu;
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Sub-Sub Internal Methods
#pragma mark
#pragma mark
#pragma mark -

#pragma mark Table View CellForRow Methods

-(NSString *)GenerateSubLabelThatHadMoreTimeAddedToComplete:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath subLabel:(NSString *)subLabel {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    NSString *itemDueDate = singleObjectItemDict[@"ItemDueDate"] ? singleObjectItemDict[@"ItemDueDate"] : @"";
    NSString *itemPastDue = singleObjectItemDict[@"ItemPastDue"] ? singleObjectItemDict[@"ItemPastDue"] : @"";
    
   
    
    int itemPastDueSeconds = 0;
    NSDate *itemDueDateDate = [NSDate date];
    
    NSDictionary *lastPastDueDict = [self GenerateLastOccurrencePastDue:dictToUse indexPath:indexPath];
    
    NSString *lastAddItem = lastPastDueDict[@"Add Time"];
    NSString *lastDateAdded = lastPastDueDict[@"Date Selected"];
    
    //If Past Due Is Dict
    //Else If Past Due Is String
    if ([lastAddItem length] > 0 && [lastDateAdded length] > 0) {
        
        NSDictionary *lastPastDueDict = [self GenerateLastOccurrencePastDue:dictToUse indexPath:indexPath];
        
        NSString *lastAddItem = lastPastDueDict[@"Add Time"];
        NSString *lastDateAdded = lastPastDueDict[@"Date Selected"];
        
        itemPastDueSeconds = [[[GeneralObject alloc] init] GenerateNumberOfUnitsStringToSeconds:lastAddItem];
        
        itemPastDueSeconds += [self GenerateSecondsIfItemPastDueHasntExpired:itemPastDue itemDueDate:itemDueDate];
        
        itemDueDateDate = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToConvert:lastDateAdded returnAs:[NSDate class]];
        
    } else {
        
        itemPastDueSeconds = [[[GeneralObject alloc] init] GenerateNumberOfUnitsStringToSeconds:itemPastDue];
        
        itemDueDateDate = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:@"MMMM dd, yyyy hh:mm a" dateToConvert:itemDueDate returnAs:[NSDate class]];
        
    }
    
    
    
    itemDueDateDate = [[[GeneralObject alloc] init] GenerateDateWithAddedTimeWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToAddTimeTo:itemDueDateDate timeToAdd:itemPastDueSeconds returnAs:[NSDate class]];
    
    NSString *itemDueDateWithPastDue = [[[GeneralObject alloc] init] GenerateDateWithConvertedClassWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToConvert:itemDueDateDate returnAs:[NSString class]];
   
    subLabel = [[[GeneralObject alloc] init] GetDisplayTimeRemainingUntilDateStartingFromCurrentDate:itemDueDateWithPastDue shortStyle:NO reallyShortStyle:NO];
    
    subLabel = [[[GeneralObject alloc] init] GenerateStringWithReplacementString:subLabel stringToReplace:@"left" replacementString:@""];
   
    subLabel = [subLabel isEqualToString:@"Past due"] ?
    @"Expired" : [NSString stringWithFormat:@"Expires in %@", subLabel];
    
    return subLabel;
}

-(NSString *)GenerateSubLabelIfTaskIsInProgress:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath subLabel:(NSString *)subLabel {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    BOOL TaskIsInProgressByMe = [[[BoolDataObject alloc] init] TaskInProgressBySpecificUser:singleObjectItemDict itemType:itemType userID:[[NSUserDefaults standardUserDefaults] objectForKey:@"UsersUserID"]];
    
    NSString *inProgressStr = TaskIsInProgressByMe == YES ? @" • In Progress" : @"";
    
    subLabel = [NSString stringWithFormat:@"%@%@", subLabel, inProgressStr];
    
    return subLabel;
}

-(NSString *)GenerateSubLabelIfTaskIsScheduledToBegin:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath subLabel:(NSString *)subLabel {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    BOOL TaskIsScheduledStart = [[[BoolDataObject alloc] init] TaskIsScheduledStart:singleObjectItemDict itemType:self->itemType];
    BOOL TaskIsScheduledStartHasPassed = [[[BoolDataObject alloc] init] TaskIsScheduledStartHasPassed:singleObjectItemDict itemType:self->itemType];
    
    if (TaskIsScheduledStart == YES && TaskIsScheduledStartHasPassed == NO) {
        
        NSString *itemDatePosted = [[[GeneralObject alloc] init] GenerateDateWithConvertedFormatWithFormat:@"yyyy-MM-dd HH:mm:ss" dateToConvert:singleObjectItemDict[@"ItemDatePosted"] newFormat:@"MMMM dd, yyyy hh:mm a" returnAs:[NSString class]];
        
        NSString *left = [[[GeneralObject alloc] init] GenerateDisplayTimeUntilDisplayTimeStartingFromCustomStartDate:singleObjectItemDict[@"ItemScheduledStart"] itemDueDate:itemDatePosted shortStyle:NO reallyShortStyle:NO];
        
        left = [[[GeneralObject alloc] init] GenerateStringWithRemovedSymbols:left arrayOfSymbols:@[@" left"]];
        
        subLabel = [NSString stringWithFormat:@"Scheduled to begin in %@", left];
        
    }
    
    return subLabel;
}

-(NSString *)GenerateSubLabelIfTaskIsPasued:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath subLabel:(NSString *)subLabel {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    NSString *itemStatus = singleObjectItemDict[@"ItemStatus"] ? singleObjectItemDict[@"ItemStatus"] : @"";
    
    if ([itemStatus isEqualToString:@"Paused"]) {
        subLabel = @"Paused";
    }
    
    return subLabel;
}

#pragma mark - Table View TrailingSwipe Methods

-(NSMutableDictionary *)DeleteTaskListAction_GenerateOldFolderDict:(NSString *)oldTaskName {
    
    NSMutableDictionary *oldFolderDict = [NSMutableDictionary dictionary];
    
    BOOL TaskListBelongsToFolder = NO;
    
    
    NSUInteger taskListIndex = [self->taskListDict[@"TaskListName"] indexOfObject:oldTaskName];
    NSString *taskListID = self->taskListDict[@"TaskListID"] && [(NSArray *)self->taskListDict[@"TaskListID"] count] > taskListIndex ? self->taskListDict[@"TaskListID"][taskListIndex] : @"xxx";
    
    
    for (NSString *folderID in self->folderDict[@"FolderID"]) {
        
        NSUInteger index = [self->folderDict[@"FolderID"] indexOfObject:folderID];
        NSMutableDictionary *folderTaskLists = self->folderDict[@"FolderTaskLists"] && [(NSArray *)self->folderDict[@"FolderTaskLists"] count] > index ? [self->folderDict[@"FolderTaskLists"][index] mutableCopy] : [NSMutableDictionary dictionary];
        
        for (NSString *innerTaskListID in [folderTaskLists allKeys]) {
            
            if ([taskListID isEqualToString:innerTaskListID]) {
                
                TaskListBelongsToFolder = YES;
                break;
                
            }
            
        }
        
        if (TaskListBelongsToFolder == YES) {
            
            for (NSString *key in [self->folderDict allKeys]) {
                
                if ([(NSArray *)self->folderDict[key] count] > index) {
                    
                    [oldFolderDict setObject:self->folderDict[key][index] forKey:key];
                    
                }
                
            }
            
            NSMutableDictionary *folderTaskListCopy = [oldFolderDict[@"FolderTaskLists"] mutableCopy];
            
            if ([[folderTaskListCopy allKeys] containsObject:taskListID]) {
                
                [folderTaskListCopy removeObjectForKey:taskListID];
                
            }
            
            [oldFolderDict setObject:folderTaskListCopy forKey:@"FolderTaskLists"];
            
            break;
            
        }
        
    }
    
    return oldFolderDict;
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Sub-Sub-Sub-Internal Methods
#pragma mark
#pragma mark
#pragma mark -

#pragma mark Table View CellForRow Methods

-(NSDictionary *)GenerateLastOccurrencePastDue:(NSMutableDictionary *)dictToUse indexPath:(NSIndexPath *)indexPath {
    
    NSMutableDictionary *singleObjectItemDict = [[[GeneralObject alloc] init] GenerateSingleObjectDictionary:dictToUse keyArray:self->keyArray indexPath:indexPath];
    
    NSMutableDictionary *itemOccurrencePastDue = singleObjectItemDict[@"ItemOccurrencePastDue"] ? singleObjectItemDict[@"ItemOccurrencePastDue"] : [NSMutableDictionary dictionary];
    
    BOOL TaskHasAddMoreTime = [[[BoolDataObject alloc] init] TaskHasAddMoreTime:singleObjectItemDict itemType:itemType];
    
    
    
    //Get All Past Due Date Added So We Can Find The Last One
    NSMutableArray *arrayOfDateAdded = [NSMutableArray array];
    
    if (TaskHasAddMoreTime) {
        
        for (NSString *key in [itemOccurrencePastDue allKeys]) {
            
            if (itemOccurrencePastDue[key][@"Date Selected"]) {
                
                [arrayOfDateAdded addObject:itemOccurrencePastDue[key][@"Date Selected"]];
                
            }
            
        }
        
        arrayOfDateAdded = [[arrayOfDateAdded sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] mutableCopy];
        
    }
    
    
    
    //If Past Due Is Dict
    //Else If Past Due Is String
    if ([arrayOfDateAdded count] > 0) {
        
        NSString *lastKey = @"";
        
        for (NSString *key in [itemOccurrencePastDue allKeys]) {
            if (itemOccurrencePastDue[key][@"Date Selected"]) {
                if ([arrayOfDateAdded lastObject] == itemOccurrencePastDue[key][@"Date Selected"]) {
                    lastKey = key;
                    break;
                }
            }
        }
        
        NSString *lastAddItem = itemOccurrencePastDue[lastKey][@"Add Time"];
        NSString *lastDateAdded = itemOccurrencePastDue[lastKey][@"Date Selected"];
        
        return @{@"Add Time" : lastAddItem, @"Date Selected" : lastDateAdded};
        
    }
    
    return @{@"Add Time" : @"", @"Date Selected" : @""};
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Analytics Methods
#pragma mark
#pragma mark
#pragma mark -

-(void)Analytics {
    
    [self GetLocalNotifications:NO];
    
//    NSArray *arr = @[
//
//    ];
//
//    for (NSString *mixPanelID in arr) {
//        
//        FIRFirestore *defaultFirestore = [FIRFirestore firestore];
//        [[[defaultFirestore collectionWithPath:@"Users"] queryWhereField:@"MixPanelID" isEqualTo:mixPanelID] getDocumentsWithCompletion:^(FIRQuerySnapshot * _Nullable snapshot, NSError * _Nullable error) {
//            
//            __block int Myself = 0;
//            __block int Roommates = 0;
//            __block int Housemates = 0;
//            __block int Partner = 0;
//            __block int Spouse = 0;
//            __block int Family = 0;
//            __block int Other = 0;
//            
//            for (FIRDocumentSnapshot *doc in snapshot.documents) {
//                if (doc.data[@"WhoIsThisFor"]) { NSLog(@"x %@ x", doc.data[@"WhoIsThisFor"]); } else { NSLog(@"x Empty x"); }
//                if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Myself"]) {
//                   
//                    Myself += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Roommates"]) {
//
//                    Roommates += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Housemates"]) {
//                    
//                    Housemates += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Partner"]) {
//                    
//                    Partner += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Family"]) {
//                    
//                    Family += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Other"]) {
//                    
//                    Other += 1;
//                    break;
//                    
//                } else if (doc.data[@"WhoIsThisFor"] && [doc.data[@"WhoIsThisFor"] isEqualToString:@"Spouse"]) {
//                    
//                    Spouse += 1;
//                    break;
//                    
//                }
//                
//            }
//            
//        }];
//        
//    }

    //    //Retention
    //    [self GetDataRetention];
    //    [self GetDataRetentionMonthly];
    //    [self GetDataRetentionDaily];
    //
    //    //Active Users
    //    [self GetDataActiveUsers:YES];
    //    [self GetDataSignUpFunnel];
    //    [self GetDataCrashes];
    //    [self GetDataHeardAboutUs];
    //    [self GetDataCompletions];
    //    [self GetDataSignedUpAccounts];
    //
    //    //Revenue
    //    [self GetDataSubscriptionChurn];
    //    [self GetDataSubscriptionPassedFreeTrial:@"2023-06-18 00:00:00" endingWeek:@"2023-08-08 23:59:59"];
    //    [self GetDataSubscriptionUsersBetweensStartingWeek:@"2023-07-31" endingWeek:@"2023-08-05"];
    //    [self GetDataSubscriptionData];
    //    [self GetDataWeDivvyPremiumPaths];
    //    [self GetDataWeDivvyPremiumPurchasedPaths];
    //    [self GetDataSubscriptionsMixPanelIDs];
    //
    //
    //
    //    [self GetDataAverageAndMedianTasksForArrayOfMixPanelIDs];
    //    [self GetDataEmailsWithinSpecificDate:@"2023-09-10"];
    //
    //    [self GetDataCrashes:@"2023-01-01"];
    //    [self GetDataLastNumberOfMixPanelIDs:300];
    //    [self GetDataReceiveUpdateEmails:@"Yes"];
    //    [self GetDataItemsForSpecificHomeID:@"Chores" homeID:@"2022-05-26 15:44:054119138"];
    //    [self GetDataHomeMemberData:100];
    //
    //    [self SetDataNotificationsMissingKeys];
    //    [self SetDataUserMissingKeys];
    //    [self SetDataHomeMissingKeys];
    //    [self SetDataChoresMissingKeys];
    //    [self SetDataChoresOccurrencesMissingKeys];
    //    [self SetDataExpensesMissingKeys];
    //    [self SetDataExpensesOccurrencesMissingKeys];
    //    [self SetDataListsMissingKeys];
    //    [self SetDataListsOccurrencesMissingKeys];
    //    [self SetDataChatsMissingKeys];
    //    [self SetDataForumMissingKeys];
    //    [self SetDataHomesOfCrashedUsersForAppVersion:@"6.5.07" arrayOfHomeIDs:@[@"2023-10-01 13:11:227585765"]];
    //
    //    NSArray *emailArray = @[
    //
    //    ];
    //
    //    [self SetDataReceiveUpdateEmailsForEmailArray:emailArray yesOrNo:@"No"];
    //
    //    [self DeleteDataTasksAndGroupChats];
    //    [self DeleteDataNonExistentHomeMembersFromTasks];
    //    [self DeleteDataDuplicatesFromAssignedTo];
    //    [self DeleteDataArrayOf10UsersWithUsernameContainingStrings:@[@"testing"]];
    
    
    
    NSArray *previousArr = @[
        
    ];
    
    NSArray *currentArr = @[
        
    ];
    
    [self GetDataMixPanelIDsThatAreDifferent:previousArr currentArr:currentArr Quotations:YES];
    
    
    
    
    NSArray *mixPanelIDArray = @[
        
    ];
    
    [self GetDataEmailsFromMixPanelIDEmailArray:mixPanelIDArray];
    
    
    
    
    NSArray *sendingEmailsToArr = @[
        
    ];
    
    NSArray *alreadySentEmailsToArr = @[
        
        @"morganjayde99@gmail.com",
        @"morganjayde99@gmail.com",
        @"kiraliv1@gmail.com",
        @"kiraliv1@gmail.com",
        @"s4z6xzknzj@privaterelay.appleid.com",
        @"sara.m.difiore@gmail.com",
        @"necase7@gmail.com",
        @"yj5664nsrd@privaterelay.appleid.com",
        @"mackbonitz@gmail.com",
        @"allysonp2003@gmail.com",
        @"8qkgcckm55@privaterelay.appleid.com",
        @"8qkgcckm55@privaterelay.appleid.com",
        @"mdwd22ryj7@privaterelay.appleid.com",
        @"sammydruss@gmail.com",
        @"zbpnjmj9fm@privaterelay.appleid.com",
        @"abrahamvillegasa1243@gmail.com",
        @"agnieszka172@gmail.com",
        @"bbhhbwzvj9@privaterelay.appleid.com",
        @"virginiakingsford@yahoo.com",
        @"virginiakingsford@yahoo.com",
        @"virginiakingsford@yahoo.com",
        @"joshuastrozzi@gmail.com",
        @"joshuastrozzi@gmail.com",
        @"akilachandran0122@gmail.com",
        @"ziribaltazar18@gmail.com",
        @"7rkqm69nbc@privaterelay.appleid.com",
        @"7rkqm69nbc@privaterelay.appleid.com",
        @"rgfisher58@gmail.com",
        @"marissachristinecarson@gmail.com",
        @"morolayoo@gmail.com",
        @"9gkyjt9d5q@privaterelay.appleid.com",
        @"kshimats@gmail.com",
        @"mmarshall@futureautomationllc.com",
        @"alltimemomo74@icloud.com",
        @"alltimemomo74@icloud.com",
        @"5ngcy6spfm@privaterelay.appleid.com",
        @"5ngcy6spfm@privaterelay.appleid.com",
        @"rodriguez.andrew101@gmail.com",
        @"scwfqkcsct@privaterelay.appleid.com",
        @"danny.georgejr@gmail.com",
        @"lianashuu@gmail.com",
        @"j_garza5150@yahoo.com",
        @"j_garza5150@yahoo.com",
        @"trinwork05@gmail.com",
        @"mcatee8@gmail.com",
        @"hernandezacunasofia@gmail.com",
        @"hernandezacunasofia@gmail.com",
        @"hernandezacunasofia@gmail.com",
        @"j5rzrgpst8@privaterelay.appleid.com",
        @"kristynjanzen@gmail.com",
        @"stanlin634@gmail.com",
        @"aniaj2003@gmail.com",
        @"toranzojoel@gmail.com",
        @"toranzojoel@gmail.com",
        @"5jpd2kybqs@privaterelay.appleid.com",
        @"bmpqpzcmn4@privaterelay.appleid.com",
        @"imogen.morton4501@gmail.com",
        @"littlesam7404@icloud.com",
        @"farrkamr@hscsd1.com",
        @"robinlynnstepp40@gmail.com",
        @"georgette.hamilton@icloud.com",
        @"georgette.hamilton@icloud.com",
        @"georgette.hamilton@icloud.com",
        @"estefania.cardenas28@ucuenca.edu.ec",
        @"rareese08@gmail.com",
        @"jordan.v.brun@tampabay.rr.com",
        @"aturk12286@gmail.com",
        @"matthew.miller7076@icloud.com",
        @"westleybravo@icloud.com",
        @"karsonkachura@gmail.com",
        @"micah.cram@gmail.com",
        @"spearingjackie11@gmail.com",
        @"juliannmarie.s@gmail.com",
        @"gtgkrt4b5q@privaterelay.appleid.com",
        
        @"q24ztmxsgp@privaterelay.appleid.com",
        @"lianashuu@gmail.com",
        @"gurau.andrea@gmail.com",
        @"connor.evans@mac.com",
        @"g6vvrxxxvt@privaterelay.appleid.com",
        @"elnica17@gmail.com",
        @"b5fbtyp9jx@privaterelay.appleid.com",
        @"colleencoyle@hotmail.com",
        @"xkwcy8vnpt@privaterelay.appleid.com",
        @"k64h9744mr@privaterelay.appleid.com",
        @"clement.serena@icloud.com",
        @"6qp265xwqr@privaterelay.appleid.com",
        @"cpawlik6@gmail.com",
        @"makaylahill101@gmail.com",
        @"unverdidemyedek@gmail.com",
        @"andysimpson0926@gmail.com",
        @"jason@ascentus.com",
        @"rjstangroom@gmail.com",
        @"lizzie_bryant@icloud.com",
        @"62fhvs9dmx@privaterelay.appleid.com",
        @"kmgoin@iu.edu",
        @"tangie.larkin@gmail.com",
        @"yvonneluciano11@gmail.com",
        @"4hvdnf7z8y@privaterelay.appleid.com",
        @"sofia.gallaway@outlook.com",
        @"gracematkinson1@gmail.com",
        @"loren.wood@bigpind.com",
        @"sabriyyakamiylahwilson@gmail.com",
        @"dm4dvs28py@privaterelay.appleid.com",
        @"75jj8j2fcr@privaterelay.appleid.com",
        @"sidney_salmon@yahoo.com",
        @"8bnc27psz4@privaterelay.appleid.com",
        @"poteyatoe@gmail.com",
        @"chawan88@icloud.com",
        @"m.zamudio.k@gmail.com",
        @"jillblum@gmail.com",
        @"caitlinmcreavy@gmail.com",
        @"aimee.noone@icloud.com",
        @"5rppyjhfdb@privaterelay.appleid.com",
        
        @"chelyfern@gmail.com",
        @"dx2jk7tk4x@privaterelay.appleid.com",
        @"coconut1616@icloud.com",
        @"robyn_1026@live.com",
        @"kt7fhfj6tb@privaterelay.appleid.com",
        @"sdwvzskpzy@privaterelay.appleid.com",
        @"jpage8102@yahoo.com",
        @"smb2rn2srr@privaterelay.appleid.com",
        @"alaia.masuda@gmail.com",
        @"ydtcqbrp8x@privaterelay.appleid.com",
        @"gdy5nx4rgf@privaterelay.appleid.com",
        @"giants4ever46@gmail.com",
        @"s75dbd56kq@privaterelay.appleid.com",
        @"baredumorka@yahoo.com",
        @"6g22j8xtvy@privaterelay.appleid.com",
        @"yj5664nsrd@privaterelay.appleid.com",
        @"snsdlover99@gmail.com",
        @"michaeltacti@gmail.com",
        @"SSSreasefields@outlook.com",
        @"sayitinfootball@gmail.com",
        @"tn8d9mc22q@privaterelay.appleid.com",
        @"sx6jzfgspn@privaterelay.appleid.com",
        @"z97kzx6r4b@privaterelay.appleid.com",
        @"mail4orsunny@gmail.com",
        @"s8bswxxs5d@privaterelay.appleid.com",
        @"kirstianaholes@yahoo.com",
        @"hbthomp160@gmail.com",
        @"wh596jsncn@privaterelay.appleid.com",
        @"8hqqb4mhzm@privaterelay.appleid.com",
        @"christian.diaz2799@gmail.com",
        @"mematt@gmail.com",
        @"ffgsqmthq2@privaterelay.appleid.com",
        @"andreaperalesp@gmail.com",
        @"wahimin520@asoflex.com",
        @"742ydprw6x@privaterelay.appleid.com",
        @"vcarrielee@gmail.com",
        @"adreanmainhart@gmail.com",
        @"rity_79@hotmail.com",
        @"olivier.vanbesien@gmail.com",
        @"crazzy_ladie@outlook.com",
        @"knightrose@gmail.com",
        @"abby.wood465@gmail.com",
        @"729h42qfgp@privaterelay.appleid.com",
        
        @"sophiaimpo@gmail.com",
        @"katelynbritton18@gmail.com",
        @"Katieholdren5@gmail.com",
        @"xjkvht7fk9@privaterelay.appleid.com",
        @"cpcbxzn7pg@privaterelay.appleid.com",
        @"nr64mxshqy@privaterelay.appleid.com",
        @"jteng1990@gmail.com",
        @"h9h2r5btp8@privaterelay.appleid.com",
        @"jadeasean.biz@gmail.com",
        @"7rwp7pfnhr@privaterelay.appleid.com",
        @"dchaunte2004@gmail.com",
        @"kcq4zw2skp@privaterelay.appleid.com",
        @"faithhousellc@yahoo.com",
        @"tkesterson17@gmail.com",
        @"livelovetay24@gmail.com",
        @"sirgutemechegia@gmail.com",
        @"wddqbkwh8d@privaterelay.appleid.com",
        @"2mxff8zjry@privaterelay.appleid.com",
        @"savvycleanerteam@gmail.com",
        @"911someday@gmail.com",
        @"realtripcarter@gmail.com",
        @"madelinehartline@gmail.com",
        @"danireser@gmail.com",
        @"lignacio@usc.edu",
        @"ggingerandjuice@gmail.com",
        @"86qc9z6ym9@privaterelay.appleid.com",
        @"sophia.perriam@gmail.com",
        @"myanchycki@gmail.com",
        @"testing100@gmail.com",
        @"verne.newman@gmail.com",
        @"tqwy5skhp5@privaterelay.appleid.com",
        @"nkpnrdmbsk@privaterelay.appleid.com",
        @"czbgj8s9xh@privaterelay.appleid.com",
        @"brooklinj99@gmail.com",
        @"scooterpie0325@gmail.com",
        @"mms11791@gmail.com",
        @"donaldson.lorna@gmail.com",
        @"genevieve.herndon@gmail.com",
        @"briannagower2003@gmail.com",
        @"sarahberry100@hotmail.com",
        
        @"ybxbhkmqc4@privaterelay.appleid.com",
        @"kristalaur@aol.com",
        @"kayleighbruton2004@gmail.com",
        @"johnhatfield2795@gmail.com",
        @"vlc853@hotmail.com",
        @"anushka.trip@gmail.com",
        @"n7zcccp7sz@privaterelay.appleid.com",
        @"sx6jzfgspn@privaterelay.appleid.com",
        @"sydneyy.ox@gmail.com",
        @"b6ddrjdg9k@privaterelay.appleid.com",
        @"bjxh5b7c6r@privaterelay.appleid.com",
        @"jpage8102@yahoo.com",
        @"elcurry@msn.com",
        @"wgpm6j2pbs@privaterelay.appleid.com",
        @"nabhiramascorro@gmail.com",
        @"christiannschweer@gmail.com",
        @"katiewenger@comcast.net",
        @"maxwellssocks21@gmail.com",
        @"carolineclaire23@gmail.com",
        @"heather.craddock@hotmail.co.uk",
        @"tarahoojones@yahoo.com",
        @"mlopez198660@gmail.com",
        @"SSSreasefields@outlook.com",
        @"g6vvrxxxvt@privaterelay.appleid.com",
        @"elnica17@gmail.com",
        @"sammiesigns13@gmail.com",
        @"9kjgwx5kkj@privaterelay.appleid.com",
        @"lianashuu@gmail.com",
        @"lagamorphfluff15@gmail.com",
        @"baredumorka@yahoo.com",
        @"4gmq6kqjm5@privaterelay.appleid.com",
        @"mail4orsunny@gmail.com",
        @"jacksonam2022@icloud.com",
        @"s8bswxxs5d@privaterelay.appleid.com",
        @"niphade.saniya@gmail.com",
        @"reese.williams712@gmail.com",
        @"andresz@att.net",
        @"jfrosentrater@gmail.com",
        @"bgtsmbgzg8@privaterelay.appleid.com",
        @"sophiakloster@icloud.com",
        @"ili@levine.net",
        @"miscth@nitojuth.de",
        @"audrey.huer@gmail.com",
        @"rydia.hayeshuer@gmail.com",
        @"anaideiasmercy@gmail.com",
        @"sc6wsdfymf@privaterelay.appleid.com",
        @"toriistoofaboo@gmail.com",
        @"intotherush19@hotmail.com",
        @"yxts6m4kbz@privaterelay.appleid.com",
        @"connorbrain22@gmail.com",
        @"woodsywisdom@gmail.com",
        @"staceylane81@hotmail.com",
        
        @"noahdalliday@icloud.com",
        @"corypippinjr1@icloud.com",
        @"gm46d4jt6k@privaterelay.appleid.com",
        @"baileyrosesage@gmail.com",
        @"dx2jk7tk4x@privaterelay.appleid.com",
        @"sareenababu77@gmail.com",
        @"anushka.trip@gmail.com",
        @"yanel216@icloud.com",
        @"heather.craddock@hotmail.co.uk",
        @"brittanykae16@gmail.com",
        @"regnalm07@gmail.com",
        @"remainhappy13@gmail.com",
        @"sx6jzfgspn@privaterelay.appleid.com",
        @"miss21104@gmail.com",
        @"bookings.theoldsouls@gmail.com",
        @"bradybohl15@gmail.com",
        @"dchaunte2004@gmail.com",
        @"anamarelja@icloud.com",
        @"lilypendy@yahoo.com",
        @"altktyarb@gmail.com",
        @"wddqbkwh8d@privaterelay.appleid.com",
        @"s4z6xzknzj@privaterelay.appleid.com",
        @"mellebelloff@gmail.com",
        @"louiespahn@gmail.com",
        @"anthony.archie@ccjackson.org",
        @"bttr_fly_grl@yahoo.com",
        @"janicejung2002@gmail.com",
        @"ava.stretton@icloud.com",
        @"seqizn@hotmail.de",
        @"jarynxie@outlook.com",
        @"meghanrmcmorrow@gmail.com",
        @"ttalia709@gmail.com",
        @"johnhatfield2795@gmail.com",
        @"tyttnn6vbw@privaterelay.appleid.com",
        @"m6xc84cppr@privaterelay.appleid.com",
        @"riajansun@gmail.com",
        @"k64h9744mr@privaterelay.appleid.com",
        @"nr6dvjj56g@privaterelay.appleid.com",
        @"ajunaprathap@gmail.com",
        @"quentinmonaghan@outlook.com",
        @"taishatobish@outlook.com",
        @"cooprlogan@gmail.com",
        @"madi01334@gmail.com",
        @"06.stain_sludges@icloud.com",
        @"p.morris_88@icloud.com",
        @"julierea00@gmail.com",
        @"maximeosterrieth@gmail.com",
        @"pheebalicious26@gmail.com",
        @"z97kzx6r4b@privaterelay.appleid.com",
        @"4c4zpf6h9n@privaterelay.appleid.com",
        @"gurau.andrea@gmail.com",
        @"leidichadiana@gmail.com",
        @"carolineshaw17@gmail.com",
        @"luciamateusalmeida@outlook.com",
        @"kiraliv1@gmail.com",
        @"meganmariedixon7@gmail.com",
        @"pookiematthews04@icloud.com",
        @"twittles2000@hotmail.com",
        @"sofia.minio@gmail.com",
        @"wkz48wrb6w@privaterelay.appleid.com",
        @"idontwanna@yahoo.com",
        @"sophia.perriam@gmail.com",
        @"mariahducey@yahoo.com",
        @"xrichyrnx@gmail.com",
        @"raquelpalma1024@gmail.com",
        
        @"hartliebfam@gmail.com",
        @"habibamaiga49@gmail.com",
        @"laurafletch84@icloud.com",
        @"j-fallows@hotmail.com",
        @"4xmdn5ms45@privaterelay.appleid.com",
        @"75jzht7gbj@privaterelay.appleid.com",
        @"nathanielmgeo@gmail.com",
        @"zosia.herlihyobrien@gmail.com",
        @"cwsgqbypkp@privaterelay.appleid.com",
        @"lapalmev@gmail.com",
        @"caleb.anderson360@hotmail.com",
        @"CTREXLER@COZZINIBROS.COM",
        @"adrianna_vizcarra@yahoo.com",
        @"brookielouwho1@gmail.com",
        @"HailAbdi13@gmail.com",
        @"jackieostendorf52@gmail.com",
        @"saina.seddighpour21@gmail.com",
        @"wjmkxtb87t@privaterelay.appleid.com",
        @"testing113@gmail.com",
        @"wagan2023@yahoo.com",
        @"vp576ymwqy@privaterelay.appleid.com",
        @"Katieholdren5@gmail.com",
        @"tora.harboe@gmail.com",
        @"qgg5sy5hkq@privaterelay.appleid.com",
        @"testing112@gmail.com",
        @"samuelwzlim@gmail.com",
        @"jteng1990@gmail.com",
        @"jayboss5426782@gmail.com",
        @"fh6h2v5jzd@privaterelay.appleid.com",
        @"josamiher@gmail.com",
        @"testing114@gmail.com",
        @"v9wjrsxd9f@privaterelay.appleid.com",
        @"Sofiargueta@icloud.com",
        @"lmeara97@gmail.com",
        @"felecitalauritsen@gmail.com",
        @"breanna1106bree@gmail.com",
        @"fran_roets@yahoo.com.au",
        @"calzadaquintana.andrea@gmail.com",
        @"clairekc33@icloud.com",
        @"albinhenneberger57@protonmail.com",
        @"robyn_1026@live.com",
        @"johndennisnbchis@gmail.com",
        @"jeff.m.davis1993@gmail.com",
        @"adrianionescu1995@gmail.com",
        @"95b6jsvyvh@privaterelay.appleid.com",
        @"paigehunterab@gmail.com",
        @"vlc853@hotmail.com",
        @"f@mailinator.com",
        @"gillian8080@gmail.com",
        @"julianamoh.lima@icloud.com",
        @"jan.mihevc98@gmail.com",
        @"mckennapo@gmail.com",
        @"mnb7npffq4@privaterelay.appleid.com",
        @"mahaliajackson27@gmail.com",
        @"kentonadolf43@gmail.com",
        @"mattyhill141@gmail.com",
        @"catlover232@gmail.com",
        @"brmqr54vts@privaterelay.appleid.com",
        @"ydtcqbrp8x@privaterelay.appleid.com",
        @"brandonjasonturner@gmail.com",
        @"sandyschettko@gmail.com",
        @"isabel.conway1@icloud.com",
        @"scrappinmel@gmail.com",
        @"juliaburgsma04@gmail.com",
        
        @"cg2kxpshzb@privaterelay.appleid.com",
        @"jillianrox02@yahoo.com",
        @"briarox@icloud.com",
        @"tomerh2001@gmail.com",
        @"janicejung2002@gmail.com",
        @"bjxh5b7c6r@privaterelay.appleid.com",
        @"coudreykim@gmail.com",
        @"jacksonam2022@icloud.com",
        @"limes0_prenups@icloud.com",
        @"sarahdowling430@gmail.com",
        @"sophie_allan@msn.com",
        @"hbthomp160@gmail.com",
        @"tageabagnale@gmail.com",
        @"sareenababu77@gmail.com",
        @"n7zcccp7sz@privaterelay.appleid.com",
        @"lilyrmills@icloud.com",
        @"mudit.anand1307@gmail.com",
        @"brittanykae16@gmail.com",
        @"pqzgw8c2kw@privaterelay.appleid.com",
        @"heather.craddock@hotmail.co.uk",
        @"ferociousangelbug@gmail.com",
        @"a2019128297@campus.fcsh.unl.pt",
        @"whvfpfhtqd@privaterelay.appleid.com",
        @"6g22j8xtvy@privaterelay.appleid.com",
        @"ciaran.taylor2003@gmail.com",
        @"phuongvinle@gmail.com",
        @"nwfgr9m8hx@privaterelay.appleid.com",
        @"jasondgb@hotmail.co.uk",
        @"ryleysmail@gmail.com",
        @"morgsjones@gmail.com",
        @"cpcbxzn7pg@privaterelay.appleid.com",
        @"thecheekymouse@gmail.com",
        @"brianriveracastro@gmail.com",
        @"chrisharn19@gmail.com",
        @"tn8d9mc22q@privaterelay.appleid.com",
        @"ssnmpmxqp6@privaterelay.appleid.com",
        @"er.elenaruplenas@gmail.com",
        @"mzt5c7kwmb@privaterelay.appleid.com",
        @"nr6dvjj56g@privaterelay.appleid.com",
        @"scrappyperez9@gmail.com",
        @"2mykd9xdqn@privaterelay.appleid.com",
        @"rsqgh9bxv2@privaterelay.appleid.com",
        @"mama91bear07@gmail.com",
        @"madison.khan16@gmail.com",
        @"agjacklover11@gmail.com",
        @"parthbhayani1230@gmail.com",
        @"sosolost172@gmail.com",
        @"scherrgrace15@gmail.com",
        @"cjnerlich@gmail.com",
        @"py6b9jydnh@privaterelay.appleid.com",
        
        @"6xw7mw55mf@privaterelay.appleid.com",
        @"adrianarodriguez.cca@gmail.com",
        @"ftgpnvjm7z@privaterelay.appleid.com",
        @"eeseli@hotmail.com",
        @"madelinehartline@gmail.com",
        @"nidhimalhotra714@gmail.com",
        @"hvnhntr@gmail.com",
        @"taylorpetell22@gmail.com",
        @"alliesmith332@gmail.com",
        @"tristinrichardson5@gmail.com",
        @"jakejensen713@icloud.com",
        @"paigehunterab@gmail.com",
        @"ejackson123302@gmail.com",
        @"maxwellssocks21@gmail.com",
        @"jadadawn13@icloud.com",
        @"abbuell@yahoo.com",
        @"drx1646@yahoo.com",
        @"mummush1234@gmail.com",
        @"megajon08@gmail.com",
        @"jayboss5426782@gmail.com",
        @"ally.thaw2@gmail.com",
        @"caitlyn.greer@outlook.com",
        @"emilie.paquet@live.ca",
        @"thisisnotmarie@gmail.com",
        @"n4wvzjxzt7@privaterelay.appleid.com",
        @"allerena99@gmail.com",
        @"caitlinmorris@ucsb.edu",
        @"powell.marisar@gmail.com",
        @"antajaun_johnson@yahoo.com",
        @"yp4c7qdnvw@privaterelay.appleid.com",
        @"coconut1616@icloud.com",
        @"fragglewaggle562@gmail.com",
        @"kylachristenson@gmail.com",
        @"yanel216@icloud.com",
        @"bostonsox0703@gmail.com",
        @"ayushdutta1189@gmail.com",
        @"7mjpxkh5xj@privaterelay.appleid.com",
        @"fjtwj45tbj@privaterelay.appleid.com",
        @"castinejulie@gmail.com",
        @"c85s8yv7bs@privaterelay.appleid.com",
        @"yiqing.cheng94@gmail.com",
        @"kvkurudimov@gmail.com",
        @"ntb82bkdtn@privaterelay.appleid.com",
        @"rf64wtp8mg@privaterelay.appleid.com",
        @"djnrjk87pf@privaterelay.appleid.com",
        
        @"rahulbhutani89@gmail.com",
        @"dignac14@yahoo.com",
        @"jerbearkramer02@gmail.com",
        @"zachambrosen@gmail.com",
        @"christina9887park@gmail.com",
        @"brontekburgess@gmail.com",
        @"shannon.oneill121@gmail.com",
        @"morgsjones@gmail.com",
        @"lignacio@usc.edu",
        @"allycatart@gmail.com",
        @"hsyntjtwn2@privaterelay.appleid.com",
        @"lapalmev@gmail.com",
        @"ryanjsilverberg@gmail.com",
        @"deekshithasai1998@gmail.com",
        @"jessica.duttenhefner@gmail.com",
        @"sophie_allan@msn.com",
        @"7btbyrvwnd@privaterelay.appleid.com",
        @"robyn_1026@live.com",
        @"k8rickard@gmail.com",
        @"jfrollings@icloud.com",
        @"qffcm6mpz7@privaterelay.appleid.com",
        @"86qc9z6ym9@privaterelay.appleid.com",
        @"9cmdj4ckb9@privaterelay.appleid.com",
        @"sydneem07@gmail.com",
        @"r2wjjk9f4p@privaterelay.appleid.com",
        @"6g22j8xtvy@privaterelay.appleid.com",
        @"kimb4099@gmail.com",
        @"rnstwxqt8t@privaterelay.appleid.com",
        @"poodlelover88@gmail.com",
        @"jpuentes94@msn.com",
        @"rothj3@gmail.com",
        @"dunhilfi@gmail.com",
        @"marinesahdo.pro@gmail.com",
        @"clarabelleeg@gmail.com",
        @"sdwvzskpzy@privaterelay.appleid.com",
        @"ken.ciraulo@gmail.com",
        @"fnrhjgsfj8@privaterelay.appleid.com",
        @"affectasy@gmail.com",
        @"kacietnguyen@ucsb.edu",
        @"d5dnrh2hss@privaterelay.appleid.com",
        @"lexie@kss.com.au",
        @"emmalyne913@gmail.com",
        @"mager1794@live.com",
        
        @"deoadel13@gmail.com",
        @"cg2kxpshzb@privaterelay.appleid.com",
        @"j-fallows@hotmail.com",
        @"sugeyramosnm@gmail.com",
        @"cwsgqbypkp@privaterelay.appleid.com",
        @"jess.halligan1@yahoo.com.au",
        @"gmskfmkqrg@privaterelay.appleid.com",
        @"adrianarodriguez.cca@gmail.com",
        @"ftgpnvjm7z@privaterelay.appleid.com",
        @"bostonsox0703@gmail.com",
        @"tdnmnnypjf@privaterelay.appleid.com",
        @"ashiisawr@gmail.com",
        @"saina.seddighpour21@gmail.com",
        @"katschaff@sbcglobal.net",
        @"rbn5bc7zph@privaterelay.appleid.com",
        @"regnalm07@gmail.com",
        @"frmpm92fmr@privaterelay.appleid.com",
        @"p.morris_88@icloud.com",
        @"kbreeden@westmont.edu",
        @"jacksonam2022@icloud.com",
        @"tfrm5gx5t8@privaterelay.appleid.com",
        @"sarahdowling430@gmail.com",
        @"ceciliagutierrez@celebratedental.com",
        @"vlc853@hotmail.com",
        @"austin_b_1234@hotmail.com",
        @"dx2jk7tk4x@privaterelay.appleid.com",
        @"farahsisalem@googlemail.com",
        @"drx1646@yahoo.com",
        @"lwb.fz07@gmail.com",
        @"djnrjk87pf@privaterelay.appleid.com",
        @"me@chenjay.com",
        @"erika.j.rose@gmail.com",
        @"michael@tyznik.com",
        @"doniavakili@gmail.com",
        @"kass.duttenhefner@gmail.com",
        @"nathanjacobs1708@gmail.com",
        @"alexandriajoowen@outlook.com",
        
        @"kabrol@gmail.com",
        @"hartliebfam@gmail.com",
        @"5gy44rd5bk@privaterelay.appleid.com",
        @"tchapman128656@gmail.com",
        @"h.sorooshzadeh@gmail.com",
        @"trishanichole0787@gmail.com",
        @"jennifer_bonhomme@hotmail.com",
        @"christina9887park@gmail.com",
        @"dpenfoldd@gmail.com",
        @"kt442jpvv4@privaterelay.appleid.com",
        @"lauragill880@gmail.com",
        @"jadadawn13@icloud.com",
        @"d88c7qkjfv@privaterelay.appleid.com",
        @"g96qrwjpmk@privaterelay.appleid.com",
        @"ph9tk66bmh@privaterelay.appleid.com",
        @"jpenfoldj@gmail.com",
        @"x42q2shz57@privaterelay.appleid.com",
        @"anamarelja@icloud.com",
        @"echignola@gmail.com",
        @"dunhilfi@gmail.com",
        @"sophieleonard2112@gmail.com",
        @"tora.harboe@gmail.com",
        @"adrianionescu1995@gmail.com",
        @"emmarocks1223@gmail.com",
        @"habibamaiga49@gmail.com",
        @"laurmargarett@gmail.com",
        @"madelinehartline@gmail.com",
        @"gurneysarah16@gmail.com",
        @"hana.hajari0@gmail.com",
        @"qgncvp782t@privaterelay.appleid.com",
        @"sbarone1124@gmail.com",
        @"98vb9r9zvc@privaterelay.appleid.com",
        @"oggrasso@sbcglobal.net",
        @"taylorbarone023@gmail.com",
        @"landonhammerle@icloud.com",
        @"nidhimalhotra714@gmail.com",
        @"zachambrosen@gmail.com",
        @"morganclare8@gmail.com",
        @"wcgtw8975p@privaterelay.appleid.com",
        @"jimmyhuynguyen@utexas.edu",
        @"aliciacraib1992@gmail.com",
        @"ghtfjrfhr9@privaterelay.appleid.com",
        @"edwardse1217@gmail.com",
        
        @"budsredtavern@gmail.com",
        @"s6hq5cvf6n@privaterelay.appleid.com",
        @"phoenixovv@gmail.com",
        @"joelreyes2293@gmail.com",
        @"lincolnstewart4@gmail.com",
        @"twq9jjzndv@privaterelay.appleid.com",
        @"chasef150@gmail.com",
        @"6xw7mw55mf@privaterelay.appleid.com",
        @"adrianarodriguez.cca@gmail.com",
        @"ftgpnvjm7z@privaterelay.appleid.com",
        @"matthews9254@gmail.com",
        @"carl_sanderson@hotmail.co.uk",
        @"annaberg7@gmail.com",
        @"tsuncup@gmail.con",
        @"eric.chospurs@gmail.com",
        @"morganzeisler4231@gmail.com",
        @"alikathman@gmail.com",
        @"sugeyramosnm@gmail.com",
        @"tristinrichardson5@gmail.com",
        @"paloma.smcarvalho@gmail.com",
        @"zwmkbkhv7y@privaterelay.appleid.com",
        @"jacob_201179@hotmail.com",
        @"elcurry@msn.com",
        @"duffyruby2@gmail.com",
        @"a.e.baranauskaite@gmail.com",
        @"rosiehorne.18@hotmail.com",
        @"rnkgjcmr4w@privaterelay.appleid.com",
        @"johnhatfield2795@gmail.com",
        @"hsyntjtwn2@privaterelay.appleid.com",
        @"petryusflaquer@gmail.com",
        @"corypippinjr1@icloud.com",
        @"tdnmnnypjf@privaterelay.appleid.com",
        @"sweetamgel8413@gmail.com",
        @"sweetangel8413@gmail.com",
        @"clarabelleeg@gmail.com",
        
        @"xkqnd7kwhy@privaterelay.appleid.com",
        @"4rbg4kshvr@privaterelay.appleid.com",
        @"sbstewartfamily@gmail.com",
        @"jacques@platinumcrest.co.za",
        @"zacdwest@gmail.com",
        @"lin.anabel@yahoo.com",
        @"peterwcornell@gmail.com",
        @"meyeaz@gmail.com",
        @"r9ynd7p7nj@privaterelay.appleid.com",
        @"jnbebeka@gmail.com",
        @"cg2kxpshzb@privaterelay.appleid.com",
        @"deekshithasai1998@gmail.com",
        @"bqdyp6f9j6@privaterelay.appleid.com",
        @"jillianrox02@yahoo.com",
        @"briarox@icloud.com",
        @"abigail.doedens@gmail.com",
        @"johnuhland2@gmail.com",
        @"mike@nyffevents.com",
        @"jadadawn13@icloud.com",
        @"komal9560@gmail.com",
        @"ux.test01012022@yahoo.com",
        @"kdineen@ucdavis.edu",
        
        @"qmfscmyskp@privaterelay.appleid.com",
        @"rothj3@gmail.com",
        @"jnbebeka@gmail.com",
        @"cg2kxpshzb@privaterelay.appleid.com",
        @"bradenestep05@gmail.com",
        @"rahulbhutani89@gmail.com",
        @"chasef150@gmail.com",
        @"alinarizvi14@gmail.com",
        @"kdineen@ucdavis.edu",
        @"miriamwbttm@ymail.com",
        @"nanamitsumura@gmail.com",
        @"zacdwest@gmail.com",
        @"vsdd6g6v6f@privaterelay.appleid.com",
        @"tsuncup@gmail.con",
        @"2mw2927d2h@privaterelay.appleid.com",
        @"ux.test01012022@yahoo.com",
        @"fgf5rpyvm5@privaterelay.appleid.com",
        @"bryceestep07@gmail.com",
        @"habibamaiga49@gmail.com",
        @"rhysviri@gmail.com",
        @"johnhatfield2795@gmail.com",
        @"barnes.j.michael@gmail.com",
        @"taylorsegell@gmail.com",
        @"allycatart@gmail.com",
        @"brittylocke@icloud.com",
        @"caleb.hammonds@icloud.com",
        @"charleyhwhite@gmail.com",
        @"yjkjm8frr7@privaterelay.appleid.com",
        @"matthews9254@gmail.com",
        @"farahsisalem@googlemail.com",
        @"vanriper2002@icloud.com",
        @"icecoldtracker@gmail.com",
        @"sodermanmya914@gmail.com",
        @"asialee1723@gmail.com",
        @"azgonzfam@gmail.com",
        @"katierosengrant@gmail.com",
        @"jacqulyn.oliver@me.com",
        @"waqqas@gmail.com",
        @"gj5f56ddfq@privaterelay.appleid.com",
        @"n.muthuraman03@gmail.com",
        @"xkqnd7kwhy@privaterelay.appleid.com",
        @"yasmin.zolf@gmail.com",
        
        @"oegan100@yahoo.com",
        @"joelreyes2293@gmail.com",
        @"ruizjulia3@yahoo.com",
        @"lin.anabel@yahoo.com",
        @"surraya.peel08211995@gmail.com",
        @"emilyhampton2195@hotmail.com",
        @"godsaiyan_99@yahoo.com",
        @"devanshijain2398@gmail.com",
        @"cole.rieger@gmail.com",
        @"elizabeth.delroy@hotmail.com",
        @"chasef150@gmail.com",
        @"irreverentphoenix@gmail.com",
        @"ella.hammerle926@student.mckinneyisd.net",
        @"xkqnd7kwhy@privaterelay.appleid.com",
        @"kaileicla20@gmail.com",
        @"jacob_201179@hotmail.com",
        @"rhysviri@gmail.com",
        @"clstampe@icloud.com",
        @"kayleighbruton2004@gmail.com",
        @"j.szonja98@gmail.com",
        @"muttleymanor@gmail.com",
        @"alinarizvi14@gmail.com",
        @"bcarolyn848@gmail.com",
        @"emcgonigle24@outlook.com",
        @"colehammerle@gmail.com",
        @"ddeb02@hotmail.com",
        @"duncan.raster@gmail.com",
        @"fbroadie@bu.edu",
        @"chloe.bradshaw@hotmail.co.uk",
        @"gracie17514@gmail.com",
        @"princeofosu808@gmail.com",
        @"executive.research@xtra.co.nz",
        @"rstimax2009@icloud.com",
        @"4gjvqgc4jy@privaterelay.appleid.com",
        @"fam3113@yahoo.com",
        @"jairo.aladdin@gmail.com",
        @"soldbyveteran@gmail.com",
        @"mc7bb8vwhk@privaterelay.appleid.com",
        @"cassabellahair@gmail.com",
        @"saba88us@gmail.com",
        @"27fmt7xdz4@privaterelay.appleid.com",
        @"qmfscmyskp@privaterelay.appleid.com",
        @"rbradstreet@sitepro.com",
        @"sbstewartfamily@gmail.com",
        @"seangoff71@gmail.com",
        @"qqsfsn7jk2@privaterelay.appleid.com",
        @"j.summers2319@gmail.com",
        @"zosia.herlihyobrien@gmail.com",
        @"cubs85.tt@yahoo.com",
        @"mark.obrien@zimmerbiomet.com",
        @"yx4j5dyds6@privaterelay.appleid.com",
        @"lizzietinkler@googlemail.com",
        @"testing180@gmail.com",
        @"waqqas@gmail.com",
        @"zt5c2d2b2b@privaterelay.appleid.com",
        @"cv5jscdf8g@privaterelay.appleid.com",
        @"qgncvp782t@privaterelay.appleid.com",
        @"",
        @"terrimimbs119@gmail.com",
        @"7dygzj8nzz@privaterelay.appleid.com",
        @"beckymatrone5@gmail.com",
        @"Kurt@everfreshfruit.com",
        @"spencerssmith@hotmail.com",
        @"testing118@gmail.com",
        @"valbalanon@gmail.com",
        @"gmorrison0928@gmail.com",
        @"timaratisch@gmail.com",
        @"wwcfm9w8dw@privaterelay.appleid.com",
        @"cv7st42bj2@privaterelay.appleid.com",
        @"lisanovakgray@gmail.com",
        @"hannahgriffin24@yahoo.com",
        @"msampon1@up.edu.ph",
        @"edwardsonrayn@gmail.com",
        @"sofiavilches9@gmail.com",
        @"aaronstubblefield04@icloud.com",
        @"kate.matrone26@gmail.com",
        @"aintlikenoother2000@gmail.com",
        @"jennifer_bonhomme@hotmail.com",
        @"emilyschwein@gmail.com",
        
        @"hp5gryh8ct@privaterelay.appleid.com",
        @"selinasingh12402@gmail.com",
        @"sh5f7b2n7q@privaterelay.appleid.com",
        @"budsredtavern@gmail.com",
        @"s6hq5cvf6n@privaterelay.appleid.com",
        @"xd2zf2hdmj@privaterelay.appleid.com",
        @"mvmbt2hzvc@privaterelay.appleid.com",
        @"vsdd6g6v6f@privaterelay.appleid.com",
        @"mcgraico@gmail.com",
        @"loza595@yahoo.com.au",
        @"yq4b5fn2zk@privaterelay.appleid.com",
        @"tatumlschultz@gmail.com",
        @"impasse_boiler.0p@icloud.com",
        @"rnkgjcmr4w@privaterelay.appleid.com",
        @"h.sorooshzadeh@gmail.com",
        @"habibamaiga49@gmail.com",
        @"mpallitta98@gmail.com",
        @"ayush.ranjan98@gmail.com",
        @"rebeccarosales99@gmail.com",
        @"5scx92xz6x@privaterelay.appleid.com",
        @"nx7kcyxk69@privaterelay.appleid.com",
        @"keemthedev@gmail.com",
        @"b8z65jmdbg@privaterelay.appleid.com",
        @"zalavadia99@gmail.com",
        @"v.hegelein@gmail.com",
        @"oyepez85@icloud.com",
        @"twq9jjzndv@privaterelay.appleid.com",
        @"mahdavifarid1986@gmail.com",
        @"c5tjzggm29@privaterelay.appleid.com",
        @"allisonlink468@gmail.com",
        @"xbfg99c6qm@privaterelay.appleid.com",
        @"boultermullen@gmail.com",
        @"andres.evasquezc@gmail.com",
        @"wickthains@hotmail.com",
        @"xtncxfq98j@privaterelay.appleid.com",
        @"nv5jfwswq6@privaterelay.appleid.com",
        @"chanrinsai.chhim@gmail.com",
        @"halehunter97@gmail.com",
        @"victoriakken@hotmail.com",
        @"eden.lava@gmail.com",
        @"oodm.br@gmail.com",
        @"6fzj86j2cg@privaterelay.appleid.com",
        @"adrianarodriguez.cca@gmail.com",
        @"ftgpnvjm7z@privaterelay.appleid.com",
        
        @"melkemp81@gmail.com",
        @"spoiledlisa1128@gmail.com",
        @"spoiled1128@yahoo.com",
        @"jairo.aladdin@gmail.com",
        @"soldbyveteran@gmail.com",
        @"barrerajames1115@yahoo.com",
        @"4xmdn5ms45@privaterelay.appleid.com",
        @"yrwqy4qsy6@privaterelay.appleid.com",
        @"aprilc0811@gmail.com",
        @"mrdztoy@gmail.com",
        @"grimaldib81@gmail.com",
        @"wigster-mclaine@hotmail.co.uk",
        @"reedandrew900@gmail.com",
        @"lmmorua@gmail.com",
        @"pakampos26@gmail.com",
        @"kpynchon@teamgoventures.com",
        @"tinabell4life1128@gmail.com",
        @"lelyvs2004@gmail.com",
        @"ywbgr8rh4q@privaterelay.appleid.com",
        @"ameenaeastep@gmail.com",
        @"dankitkat12@gmail.com",
        @"me@jmelow.com",
        @"kayleighmarie34@gmail.com",
        @"jaov61@gmail.com",
        @"julie309@hotmail.co.uk",
        @"tchapman128656@gmail.com",
        @"hawkinskaylee@icloud.com",
        @"ashleyh.hall@yahoo.com",
        @"chelseamakua@gmail.com",
        @"geneguertin@gmail.com",
        @"cayleer5@gmail.com",
        @"brandonallenjackson@gmail.com",
        @"sbarth26@yahoo.com",
        
        @"chnarlia@yahoo.com",
        @"bodoncecilia@gmail.com",
        @"maggieohara16@gmail.com",
        @"annikalew@gmail.com",
        @"kbland799@gmail.com",
        @"n6rk8qnzm6@privaterelay.appleid.com",
        @"joelreyes2293@gmail.com",
        @"t5c7b56zc2@privaterelay.appleid.com",
        @"k.petersonhc@gmail.com",
        @"rnkgjcmr4w@privaterelay.appleid.com",
        @"rbnnfmmzd2@privaterelay.appleid.com",
        @"syjkry5x8v@privaterelay.appleid.com",
        @"naancy.23@gmail.com",
        @"budsredtavern@gmail.com",
        @"s6hq5cvf6n@privaterelay.appleid.com",
        @"sallyjn@gmail.com",
        @"amyjane_24@hotmail.com",
        @"lily.sendroff@gmail.com",
        @"dtafiti14@gmail.com",
        @"thomas.declochez@gmail.com",
        @"ashersupernaw@gmail.com",
        @"nh8qc9942c@privaterelay.appleid.com",
        @"bpswk9zcnp@privaterelay.appleid.com",
        @"0532238704kald@gmail.com",
        @"deirdreakua@gmail.com",
        @"gelambert2@gmail.com",
        @"imhadia@gmail.com",
        @"elmsdes@yahoo.com",
        @"godsaiyan_99@yahoo.com",
        @"tahiraghs@gmail.com",
        @"oneilrick09@gmail.com",
        @"ameliaring@gmail.com",
        @"knightring33@gmail.com",
        @"bjhyslop@hotmail.com",
        @"kbreeden@westmont.edu",
        @"qzrq497njc@privaterelay.appleid.com",
        @"abigail.doedens@gmail.com",
        
        @"seancorzine@gmail.com",
        @"mcgraico@gmail.com",
        @"fxyq2qvm74@privaterelay.appleid.com",
        @"danpham7@gmail.com",
        @"yoquierounchurro@gmail.com",
        @"8dwxrmbrdh@privaterelay.appleid.com",
        @"giovannaly0212@icloud.com",
        @"annierules75@gmail.com",
        @"michelle_allison2012@yahoo.com",
        @"annikalew@gmail.com",
        @"bodoncecilia@gmail.com",
        @"selina.linsmeier@googlemail.com",
        @"cryingclout666@gmail.com",
        @"richardberreth@yahoo.com",
        @"romacarthur03@gmail.com",
        @"w6jp8qbmrx@privaterelay.appleid.com",
        @"eric.chospurs@gmail.com",
        @"petedalliday@gmail.com",
        @"malachipugh@icloud.com",
        @"jared.harmer01@gmail.com",
        @"47gxmyfp9v@privaterelay.appleid.com",
        @"gabay.shir22@gmail.com",
        @"selinasingh12402@gmail.com",
        @"cameronml651@gmail.com",
        @"b7v7nhs7pc@privaterelay.appleid.com",
        @"nukkap@gmail.com",
        @"anneleise2404@gmail.com",
        @"amyjane_24@hotmail.com",
        @"kabrol@gmail.com",
        @"csoetadi@gmail.com",
        @"lincolnstewart4@gmail.com",
        @"sdalliday@gmail.com",
        @"yq4b5fn2zk@privaterelay.appleid.com",
        @"phhmtzw4fr@privaterelay.appleid.com",
        @"agutierrez@ihcscv.org",
        @"testing123@gmail.com",
        @"nebula.castelino@gmail.com",
        @"cvw8b9h6xb@privaterelay.appleid.com",
        @"ccfbay88@yahoo.com",
        @"mercedesfielding@gmail.com",
        @"basishailey@gmail.com",
        @"jjm9tf4fk5@privaterelay.appleid.com",
        @"twilight1234656@gmail.com",
        @"hclapton@hotmail.co.uk",
        @"v.hegelein@gmail.com",
        @"mrjmmfwzxh@privaterelay.appleid.com",
        @"tatumlschultz@gmail.com",
        @"j75xjtgt27@privaterelay.appleid.com",
        @"camijjohnson2@gmail.com",
        @"chnarlia@yahoo.com",
        @"loza595@yahoo.com.au",
        @"shorish84@live.co.uk",
        @"4srdcryzqq@privaterelay.appleid.com",
        @"lin.anabel@yahoo.com",
        @"thomas.declochez@gmail.com",
        @"ythfr4gqf6@privaterelay.appleid.com",
        @"testing120@gmail.com",
        @"mike@nyffevents.com",
        @"testing122@gmail.com",
        @"chaseg5@gmail.com",
        @"christinasifriblog@gmail.com",
        @"abigail.doedens@gmail.com",
        @"Rlevy@arkchicago.org",
        @"0532238704kald@gmail.com",
        @"godsaiyan_99@yahoo.com",
        @"jtbfn2thhk@privaterelay.appleid.com",
        @"testing121@gmail.com",
        @"qurux9062@gmail.com",
        @"gy247cp46g@privaterelay.appleid.com",
        @"sallyjn@gmail.com",
        @"fyjtb4w4bx@privaterelay.appleid.com",
        @"siobhanplm@gmail.com",
        @"kelseyburdorff@gmail.com",
        @"testing124@gmail.com",
        @"j_coons@hotmail.ca",
        @"gavin.gregory.nz@gmail.com",
        @"emilyhampton2195@hotmail.com",
        @"hanin.alezzi12@gmail.com",
        @"yy2nmgfy46@privaterelay.appleid.com",
        
        @"Graham14182@yahoo.com",
        @"y77xtxk7t7@privaterelay.appleid.com",
        @"nikocd44@gmail.com",
        @"debarrosjacinta@gmail.com",
        @"wonje6930@gmail.com",
        @"cami.barko@gmail.com",
        @"hp5gryh8ct@privaterelay.appleid.com",
        @"loranpritchard@gmail.com",
        @"58m8tkwssb@privaterelay.appleid.com",
        @"evingray504@gmail.com",
        @"seanpowers906@gmail.com",
        @"mgrace12834@gmail.com",
        @"romanigrace@outlook.com",
        @"lewisgrantbaillie@icloud.com",
        @"dainishac@gmail.com",
        @"v.bonnie.li@gmail.com",
        @"emmyevansstudent@gmail.com",
        @"ftn84m2q6n@privaterelay.appleid.com",
        @"yeniiex05@gmail.com",
        @"vsdd6g6v6f@privaterelay.appleid.com",
        @"recratsenburg@gmail.com",
        @"shivanijakhmola@gmail.com",
        @"ayush.ranjan98@gmail.com",
        @"ryt4hmq9kh@privaterelay.appleid.com",
        @"almeida.lu13@gmail.com",
        @"flaviadesousa1728@gmail.com",
        @"oneilrick09@gmail.com",
        @"benperretgentil@yahoo.com",
        @"perretgentil88@gmail.com",
        @"9swwph6ky5@privaterelay.appleid.com",
        @"torimilton4@gmail.com",
        @"4fj9p82fhy@privaterelay.appleid.com",
        @"caroline.dv.ngo@gmail.com",
        @"oegan100@yahoo.com",
        @"andrenoinala@gmail.com",
        @"alexpnowakowski@gmail.com",
        @"masonburbick@yahoo.com",
        @"4bwqdbwqbs@privaterelay.appleid.com",
        @"saba88us@gmail.com",
        @"ypdyqpm297@privaterelay.appleid.com",
        @"breannahcoldwell02@icloud.com",
        @"ruizjulia3@yahoo.com",
        @"lisswaring79@yahoo.com.au",
        @"eoghanalmcmahon@gmail.com",
        @"vptd2rt4xd@privaterelay.appleid.com",
        @"madonnaolivia691@gmail.com",
        @"mvytmwyfr8@privaterelay.appleid.com",
        @"kcoobybro77@gmail.com",
        @"mvmbt2hzvc@privaterelay.appleid.com",
        @"hollierandall2003@gmail.com",
        @"taniabrandyn@msn.com",
        @"2w64nq2r2d@privaterelay.appleid.com",
        @"debbie@ignitenow.media",
        @"hollyixcoy20@gmail.com",
        @"dh5x9pkrfj@privaterelay.appleid.com",
        @"5d2jw547wh@privaterelay.appleid.com",
        @"brigitte.voisard.derome@gmail.com",
        @"raghavmehta0992@gmail.com",
        @"elmsdes@yahoo.com",
        @"naancy.23@gmail.com",
        @"xv8gq4hk2v@privaterelay.appleid.com",
        @"shwahla55@gmail.com",
        @"k5xx5mtnjr@privaterelay.appleid.com",
        @"goliver21@icloud.com",
        @"kaylinjurgenson@gmail.com",
        @"gloria.allen.21099@gmail.com",
        @"vladmurarionut2002@icloud.com",
        @"joanaalv22@gmail.com",
        @"5fprnck9r9@privaterelay.appleid.com",
        @"dw9vtbxxc4@privaterelay.appleid.com",
        @"cormanc@icloud.com",
        @"c.valley1999@hotmail.com",
        @"nycgd6dtdz@privaterelay.appleid.com",
        @"uhohitsshanno@hotmail.com",
        @"curtismatteson3@gmail.com",
        @"rebeccaedgell@yahoo.com.au",
        @"kris.alva1300@gmail.com",
        @"torinwaldron42@gmail.com",
        @"maridalliday@gmail.com",
        @"evang7170@gmail.com",
        @"gw5wbyzgn2@privaterelay.appleid.com",
        @"emilyavo@hotmail.com",
        @"joshuarodrigues2001@gmail.com",
        @"q958wtdq2w@privaterelay.appleid.com",
        @"simmond.7@gmail.com",
        @"marianunez01234@gmail.com",
        @"oliviavolk171@gmail.com",
        @"tavila5691@gmail.com",
        @"skylargrace.jpg@gmail.com",
        @"d2scvh74j8@privaterelay.appleid.com",
        
        @"annikalew@gmail.com",
        @"zn5fs8tvfm@privaterelay.appleid.com",
        @"bpswk9zcnp@privaterelay.appleid.com",
        @"rachel.nes@outlook.com",
        @"rdjanet.cross@gmail.com",
        @"oliviakelleyy@gmail.com",
        @"lily.sendroff@gmail.com",
        @"tasfia380@gmail.com",
        @"kaylapina7@gmail.com",
        @"giovannaly0212@icloud.com",
        @"azgonzfam@gmail.com",
        @"benjamin.j.abraham@gmail.com",
        @"mylesawatkins99@gmail.com",
        @"aguirre.myra990@gmail.com",
        @"ashersupernaw@gmail.com",
        @"k.petersonhc@gmail.com",
        @"laurenquinn29@gmail.com",
        @"4rbg4kshvr@privaterelay.appleid.com",
        @"kingsam2425@gmail.com",
        @"vlbrn57@gmail.com",
        @"gavindesantis@me.com",
        @"trinityfd329@icloud.com",
        @"juliamerron@gmail.com",
        @"swjp2mcy7v@privaterelay.appleid.com",
        @"vj5gz5ttfr@privaterelay.appleid.com",
        @"krosevawter@gmail.com",
        @"sophiemarieweh@gmail.com",
        @"mcgraico@gmail.com",
        @"michelle_allison2012@yahoo.com",
        @"petedalliday@gmail.com",
        @"christinejgreen@gmail.com",
        @"h94g8jx872@privaterelay.appleid.com",
        @"mzmcdh2jss@privaterelay.appleid.com",
        @"sh5f7b2n7q@privaterelay.appleid.com",
        @"aidanw815@gmail.com",
        @"davieserin21@gmail.com",
        @"zareenh23@gmail.com",
        @"jonathan@padprintextreme.ca",
        @"7qrwtb9x27@privaterelay.appleid.com",
        @"devinjreece@gmail.com",
        @"hend4550@gmail.com",
        @"gelambert2@gmail.com",
        @"jennifertroha@gmail.com",
        @"testing126@gmail.com",
        @"malloryschatz@gmail.com",
        @"gwjrqzbcff@privaterelay.appleid.com",
        @"walsh_amber7@hotmail.com",
        @"lizbethlopez1214@yahoo.com",
        @"samrosaxxx@gmail.com",
        @"zarnabch@sas.upenn.edu",
        @"64wctzt2ds@privaterelay.appleid.com",
        @"froggyjjj@icloud.com",
        @"steven@smacleod.ca",
        @"mjallin@sasktel.net",
        @"miarcddancer@icloud.com",
        @"rycusmax@gmail.com",
        @"titilola659@gmail.com",
        @"phil@abtec.net",
        @"b7v7nhs7pc@privaterelay.appleid.com",
        @"kylecatall@gmail.com",
        @"kmd76638@gmail.com",
        @"maryshumate@eyecare-partners.com",
        @"laurannogs@gmail.com",
        @"michaelrthomas92@yahoo.com",
        @"charliehutchings25@icloud.com",
        @"malachipugh@icloud.com",
        @"mcb1630@aol.com",
        @"ethanyh03@gmail.com",
        @"alice.foggin@outlook.com",
        @"s6hq5cvf6n@privaterelay.appleid.com",
        @"gabheidrich@gmail.com",
        @"elizabethshipp@gmail.com",
        @"6ydhxmkjf9@privaterelay.appleid.com",
        @"bethmorgan413@gmail.com",
        @"7z6grwt9tx@privaterelay.appleid.com",
        
        @"Graham14182@yahoo.com",
        @"chivascesar1994@gmail.com",
        @"danpham7@gmail.com",
        @"seanpowers906@gmail.com",
        @"y77xtxk7t7@privaterelay.appleid.com",
        @"kamilagarciavillada@gmail.com",
        @"tonymendoza2003@gmail.com",
        @"francesco@duca.info",
        @"mahinaarangi.m@gmail.com",
        @"r2tnyxpfhd@privaterelay.appleid.com",
        @"4hgzmcpbmx@privaterelay.appleid.com",
        @"sachairinixon@gmail.com",
        @"gabay.shir22@gmail.com",
        @"neildcampbell@hotmail.com",
        @"yeniiex05@gmail.com",
        @"nawalkaram99@gmail.com",
        @"joelreyes2293@gmail.com",
        @"9qck6jt7nc@privaterelay.appleid.com",
        @"lilah.schnee@gmail.com",
        @"Brandiverhoek@icloud.com",
        @"juju102199@gmail.com",
        @"ftn84m2q6n@privaterelay.appleid.com",
        @"t5c7b56zc2@privaterelay.appleid.com",
        @"wordsmithmassone@gmail.com",
        @"t8czrvv62z@privaterelay.appleid.com",
        @"sharef.max@gmail.com",
        @"vsdd6g6v6f@privaterelay.appleid.com",
        @"caitlinskeefover@gmail.com",
        @"oneilrick09@gmail.com",
        @"richardberreth@yahoo.com",
        @"2qw4fp4fsj@privaterelay.appleid.com",
        @"gnk8s2qdmh@privaterelay.appleid.com",
        @"omarfatha1234@gmail.com",
        @"66vhm8qy45@privaterelay.appleid.com",
        @"8rf7rhbnyw@privaterelay.appleid.com",
        @"rh54spknvn@privaterelay.appleid.com",
        @"emcgrath160@gmail.com",
        @"prernapradeep8@gmail.com",
        @"rickjfry@hotmail.co.uk",
        @"pcry7mhw4b@privaterelay.appleid.com",
        @"selinasingh12402@gmail.com",
        @"maryedefraites@hotmail.com",
        @"boombatty187@yahoo.com",
        @"ashleymm35@gmail.com",
        @"justinhall6582@gmail.com",
        @"gfch65rj26@privaterelay.appleid.com",
        @"dtafiti14@gmail.com",
        @"nessazus@gmail.com",
        @"andrewg7542@gmail.com",
        @"dustin.j.inge@icloud.com",
        @"jevwinggirl@aol.com",
        @"5gy44rd5bk@privaterelay.appleid.com",
        @"sarahataylor1999@gmail.com",
        @"deirdreakua@gmail.com",
        @"waileias@gmail.com",
        @"ramonasanta3@gmail.com",
        @"samoanjoe684@gmail.com",
        @"Maya.joy.x@gmail.com",
        @"ninatrix@hotmail.com",
        @"shivanijakhmola@gmail.com",
        @"kseniyalyutina@icloud.com",
        @"giamday99@gmail.com",
        @"jcook@jbuild.com",
        @"asiargordon@gmail.com",
        @"benperretgentil@yahoo.com",
        @"perretgentil88@gmail.com",
        @"carlypurc@gmail.com",
        @"alexglynn@outlook.com",
        @"annekabrown7@gmail.com",
        @"jxtvxv2yqk@privaterelay.appleid.com",
        @"almeida.lu13@gmail.com",
        @"z6pk46w2jq@privaterelay.appleid.com",
        @"widgeryjesse@gmail.com",
        @"pds9d5yd2h@privaterelay.appleid.com",
        @"dgrrbr94@verizon.net",
        @"sophienelson01@gmail.com",
        @"lisaarettig@gmail.com",
        
        @"pmxvmbzrxm@privaterelay.appleid.com",
        @"plarskeca@gmail.com",
        @"stephcbr37@gmail.com",
        @"libby.ashley@yahoo.com",
        @"joizemurf@gmail.com",
        @"shweta.surya15@gmail.com",
        @"nikocd44@gmail.com",
        @"cameronml651@gmail.com",
        @"loranpritchard@gmail.com",
        @"kqhvqjkrh6@privaterelay.appleid.com",
        @"bethbelfield@berkeley.edu",
        @"annierules75@gmail.com",
        @"chelseabiedermann@gmail.com",
        @"vlbrn57@gmail.com",
        @"siennapersonla@gmail.com",
        @"arnostkristina@gmail.com",
        @"aliyakhatoon@gmail.com",
        @"5gt6tby9w5@privaterelay.appleid.com",
        @"julianicole1024@gmail.com",
        @"samtrrutledge@gmail.com",
        @"ebmath03@gmail.com",
        @"dbtv4p2tpb@privaterelay.appleid.com",
        @"juliamerron@gmail.com",
        @"lostp34rls@gmail.com",
        @"bobbyscott2811@hotmail.com",
        @"dainishac@gmail.com",
        @"misterponting@gmail.com",
        @"mail@isaacnicholls.co.nz",
        @"katieastewart32@gmail.com",
        @"chichiintheusa@yahoo.com",
        @"barkerc195@gmail.com",
        @"saba88us@gmail.com",
        @"michellele82014@gmail.com",
        @"braulio.perez@guidelinegeo.com",
        @"nsfzbfbmmn@privaterelay.appleid.com",
        @"amercedes710@gmail.com",
        @"saribaum@icloud.com",
        @"erinnatella1@gmail.com",
        @"petkovicanja17@gmail.com",
        @"faith.occhipinti@gmail.com",
        @"daniega.cedric@yahoo.com",
        @"rdjanet.cross@gmail.com",
        @"testing110@gmail.com",
        @"alfarok466@gmail.com",
        @"w5p5d7bf4c@privaterelay.appleid.com",
        @"emmyevansstudent@gmail.com",
        @"azgonzfam@gmail.com",
        @"txgv7xt4x5@privaterelay.appleid.com",
        @"daisyparra44@gmail.com",
        @"hannahdearcouling@gmail.com",
        @"harish.hans@gmail.com",
        @"kaseyclarke22@gmail.com",
        @"gracedenford1@gmail.com",
        @"grnklet@gmail.com",
        
        @"jairobp1255@gmail.com",
        @"pmxvmbzrxm@privaterelay.appleid.com",
        @"4wrf7kjzvr@privaterelay.appleid.com",
        @"zbronsteinparitz@gmail.com",
        @"o_lane@me.com",
        @"kelseymccartney@me.com",
        @"vivtj76@gmail.com",
        @"d8twvbcbbd@privaterelay.appleid.com",
        @"lopez.n383@gmail.com",
        @"gmackerron@btinternet.com",
        @"kyleburton70@gmail.com",
        @"boombatty187@yahoo.com",
        @"acanfield9091@gmail.com",
        @"tinajanerojas@gmail.com",
        @"sethgoldwasser@gmail.com",
        @"p2kb6mw56s@privaterelay.appleid.com",
        @"fxyq2qvm74@privaterelay.appleid.com",
        @"recratsenburg@gmail.com",
        @"williambeltran44@gmail.com",
        @"hp5gryh8ct@privaterelay.appleid.com",
        @"jgome026@plattsburgh.edu",
        @"njallow322@gmail.com",
        @"58vzhrfwh7@privaterelay.appleid.com",
        @"ishashah13@gmail.com",
        @"4r64ndkfb5@privaterelay.appleid.com",
        @"kculpepper@lee-smith.com",
        @"etomaro38@gmail.com",
        @"gukong@gmail.com",
        @"sg9xz9br4k@privaterelay.appleid.com",
        @"gavindesantis@me.com",
        @"micailahorningart@gmail.com",
        @"dainishac@gmail.com",
        @"7sdp7vyw8n@privaterelay.appleid.com",
        @"soccerstarmoves123@gmail.com",
        @"beckijray@gmail.com",
        @"izzyb1336@yahoo.com",
        @"6dwr6nxk8z@privaterelay.appleid.com",
        @"alina.seng39@gmail.com",
        @"tvvy4wtqs4@privaterelay.appleid.com",
        @"pranavipedd@outlook.com",
        @"michaelu.my@gmail.com",
        @"lsanville@pslstrive.org",
        @"marzia.musumeci@icloud.com",
        @"jack.seither@gmail.com",
        @"rebecca.p.burton@gmail.com",
        @"jamesgreenwald67@gmail.com",
        @"lovelyinkspillz@gmail.com",
        @"amygreenwald22@gmail.com",
        @"t8nd2tvjsv@privaterelay.appleid.com",
        @"sebast1andc0llins@gmail.com",
        @"ganadavis@hotmail.com",
        @"giovannaly0212@icloud.com",
        @"syjkry5x8v@privaterelay.appleid.com",
        @"lucyenid@hotmail.com",
        @"jackie@shootingtouch.com",
        @"mtdm7myttj@privaterelay.appleid.com",
        @"ngvh2605@gmail.com",
        @"aglodich@yahoo.com",
        @"miabrees123@gmail.com",
        @"chezlajo@gmail.com",
        @"nickmotyka@gmail.com",
        @"crashingandromeda@gmail.com",
        @"carleyhope31@gmail.com",
        @"rekiyahstevensonfrancis@outlook.com",
        @"dgraeve@cristoreyjesuit.org",
        @"2vhm775z88@privaterelay.appleid.com",
        @"omyers204@gmail.com",
        @"sfphillip@hotmail.com",
        @"silviaminguez@gmail.com",
        @"joewiz92@gmail.com",
        
        @"pjwhooley@gmail.com",
        @"aaeshun@outlook.com",
        @"cahayaamerul@icloud.com",
        @"angyoletto@gmail.com",
        @"jlight2801@gmail.com",
        @"yp7tvpxkr2@privaterelay.appleid.com",
        @"frjs7h7h97@privaterelay.appleid.com",
        @"jazmynepowell@hotmail.com",
        @"4bwqdbwqbs@privaterelay.appleid.com",
        @"ashlake85@gmail.com",
        @"kingsam2425@gmail.com",
        @"natasha.leite01@gmail.com",
        @"z79hyq4whp@privaterelay.appleid.com",
        @"minnorton623@gmail.com",
        @"amandaadam49@gmail.com",
        @"andrenoinala@gmail.com",
        @"alexpnowakowski@gmail.com",
        @"hhptwvx6jn@privaterelay.appleid.com",
        @"s82jtxd9yb@privaterelay.appleid.com",
        @"prernapradeep8@gmail.com",
        @"andres.evasquezc@gmail.com",
        @"2kc2m9tddf@privaterelay.appleid.com",
        @"z5zfzxsg8d@privaterelay.appleid.com",
        @"ayaalbreiki@gmail.com",
        @"perlaviles03@gmail.com",
        @"devyne.mozzarella@gmail.com",
        @"malaikapervez123@gmail.com",
        @"junhao0867@gmail.com",
        @"lipkindevon@gmail.com",
        @"michellesegoviano@gmail.com",
        @"joshbowering@outlook.com",
        @"miguelenc650@gmail.com",
        @"z6phnc88nc@privaterelay.appleid.com",
        @"gaga.masooma@gmail.com",
        @"arnostkristina@gmail.com",
        @"gx6kfg7nfb@privaterelay.appleid.com",
        @"johannes.sunnan@gmail.com",
        @"erg41@bu.edu",
        @"nicole.acaniunir@gmail.com",
        @"66s7mjdgxj@privaterelay.appleid.com",
        @"bryanna2088@gmail.com",
        @"patrickb.brownjrr@gmail.com",
        @"csoetadi@gmail.com",
        @"evingray504@gmail.com",
        @"simonkatie38@gmail.com",
        @"x4mrk7pb89@privaterelay.appleid.com",
        @"chelseagriffith9219@outlook.com",
        @"8bgbv7v4x4@privaterelay.appleid.com",
        @"willheeres56@gmail.com",
        @"thebestboss1210@gmail.com",
        @"smithalonzojr@icloud.com",
        @"courtneycronk@gmail.com",
        @"tanujasabharwal@gmail.com",
        @"thareal.mrshernandez11@gmail.com",
        @"catiecronk@gmail.com",
        @"gabytsudik@gmail.com",
        @"wishing0well@gmail.com",
        @"sarahetheridge@bellaliant.net",
        @"hirnashah68401@gmail.com",
        @"nnqmbcmp8c@privaterelay.appleid.com",
        @"k9nyfwd95q@privaterelay.appleid.com",
        @"kestupik@massart.edu",
        @"k4cnbdhgyc@privaterelay.appleid.com",
        @"yamiraq1984@yahoo.com",
        @"anirudhjethi@gmail.com",
        @"fqrsr5rx2g@privaterelay.appleid.com",
        @"kqk99bq495@privaterelay.appleid.com",
        @"tayfaison4@icloud.com",
        @"nayharapomalescolon@gmail.com",
        @"cottoncandywear@gmail.com",
        @"genevievehier@gmail.com",
        @"amsepahpur@gmail.com",
        @"henrycronk@gmail.com",
        @"andrew.e.cronk@gmail.com",
        
        @"konradj13@gmail.com",
        @"z6phnc88nc@privaterelay.appleid.com",
        @"hcameron111397@gmail.com",
        @"samsheridan0212@gmail.com",
        @"pmxvmbzrxm@privaterelay.appleid.com",
        @"branden@bonham.ca",
        @"tombuhlnielsen@gmail.com",
        @"maggieohara16@gmail.com",
        @"8rf7rhbnyw@privaterelay.appleid.com",
        @"dgddjs2c82@privaterelay.appleid.com",
        @"chloesteiniger@gmail.com",
        @"sonlamwin@gmail.com",
        @"ekgour@gmail.com",
        @"redrose2348@gmail.com",
        @"recratsenburg@gmail.com",
        @"soccerstarmoves123@gmail.com",
        @"zf6xz2zs6t@privaterelay.appleid.com",
        @"66s7mjdgxj@privaterelay.appleid.com",
        @"misterponting@gmail.com",
        @"miabrees123@gmail.com",
        @"andres.evasquezc@gmail.com",
        @"vfnqk498qp@privaterelay.appleid.com",
        @"seanpowers906@gmail.com",
        @"sarahetheridge@bellaliant.net",
        @"o_lane@me.com",
        @"laliaholliday@gmail.com",
        @"gnk8s2qdmh@privaterelay.appleid.com",
        @"giovannaly0212@icloud.com",
        @"bethbelfield@berkeley.edu",
        @"rachel.nes@outlook.com",
        @"ljdubos@gmail.com",
        @"arnostkristina@gmail.com",
        @"nbsbbop@gmail.com",
        @"dolphins_360@yahoo.ca",
        @"fyjmhbd45j@privaterelay.appleid.com",
        @"howardsallyanne@gmail.com",
        @"p2kb6mw56s@privaterelay.appleid.com",
        @"andrenoinala@gmail.com",
        @"kqk99bq495@privaterelay.appleid.com",
        @"megantang1301@gmail.com",
        @"georgia.orme@icloud.com",
        @"dfugazzi04@gmail.com",
        @"jenna7415@gmail.com",
        @"bqj4bp2bdq@privaterelay.appleid.com",
        @"brooklyncullen.nz@hotmail.com",
        @"edwardarthur2g0@icloud.com",
        @"chelseabiedermann@gmail.com",
        @"eileenhseo@gmail.com",
        @"Thekmeister67@gmail.com",
        @"Keelyruddock@gmail.com",
        @"samtrrutledge@gmail.com",
        @"scrandlett@gmail.com",
        @"6rq8kgqhjq@privaterelay.appleid.com",
        @"ortiz1358@gmail.com",
        @"6v8bbvfyr8@privaterelay.appleid.com",
        @"emmabarsky269@gmail.com",
        @"reed.courtney.n@gmail.com",
        @"paddyshepdesign@gmail.com",
        @"murrinmccoll0@gmail.com",
        @"lstockton2k18@gmail.com",
        @"mjshackett22@gmail.com",
        @"arabellagdj@gmail.com",
        @"2rm9jfsscg@privaterelay.appleid.com",
        @"dmwondoloski@gmail.com",
        @"kymarie98@gmail.com",
        @"celestelagrange@icloud.com",
        @"s999gmc9dh@privaterelay.appleid.com",
        @"mlong8715@gmail.com",
        @"mslililim@gmail.com",
        @"rosariojaelynn5@gmail.com",
        @"annaemartello@gmail.com",
        @"francesco@duca.info",
        @"k775cgzhnw@privaterelay.appleid.com",
        @"jqbx6zythq@privaterelay.appleid.com",
        @"aephault@equipto.com",
        @"vlbrn57@gmail.com",
        @"sophiaaltier89@gmail.com",
        @"jammyjaydehh@gmail.com",
        @"tigerthemaster@gmail.com",
        @"b6g7ddbtvp@privaterelay.appleid.com",
        @"anneleise2404@gmail.com",
        @"gn9ykbz62x@privaterelay.appleid.com",
        @"xd2zf2hdmj@privaterelay.appleid.com",
        @"xrv75kkhdb@privaterelay.appleid.com",
        @"isabelpetty1@gmail.com",
        
        @"renciagravesande@hotmail.com",
        @"krystalbg3@gmail.com",
        @"7sdp7vyw8n@privaterelay.appleid.com",
        @"9swwph6ky5@privaterelay.appleid.com",
        @"v2zwfjhr5q@privaterelay.appleid.com",
        @"danpham7@gmail.com",
        @"williambeltran44@gmail.com",
        @"tushmenon@gmail.com",
        @"syjkry5x8v@privaterelay.appleid.com",
        @"annikalew@gmail.com",
        @"bodoncecilia@gmail.com",
        @"4hgzmcpbmx@privaterelay.appleid.com",
        @"hec8661@gmail.com",
        @"charli.orme@icloud.com",
        @"matovey@icloud.com",
        @"vz5qrwssrb@privaterelay.appleid.com",
        @"rh54spknvn@privaterelay.appleid.com",
        @"9rm4nbbrdx@privaterelay.appleid.com",
        @"gilbertovasquezveliz@gmail.com",
        @"jlight2801@gmail.com",
        @"mgrace12834@gmail.com",
        @"moniqueneuell@gmail.com",
        @"vickycalvete.cb@gmail.com",
        @"2r8jy5jxnr@privaterelay.appleid.com",
        @"nffjones@icloud.com",
        @"wishing0well@gmail.com",
        @"giffinsuresh97@gmail.com",
        @"v.bonnie.li@gmail.com",
        @"flaviadesousa1728@gmail.com",
        @"lewisgrantbaillie@icloud.com",
        @"yfd78rhgsf@privaterelay.appleid.com",
        @"goodboylandon423@gmail.com",
        @"4m8q5wcbps@privaterelay.appleid.com",
        @"kaylapina7@gmail.com",
        @"katimhayes@gmail.com",
        @"myzyqyvhty@privaterelay.appleid.com",
        @"nickorme@gmail.com",
        @"dlgrierson@yahoo.com",
        @"sg9xz9br4k@privaterelay.appleid.com",
        @"s82jtxd9yb@privaterelay.appleid.com",
        @"masonburbick@yahoo.com",
        @"mahinaarangi.m@gmail.com",
        @"torimilton4@gmail.com",
        @"trstrs225@gmail.com",
        @"bryanna2088@gmail.com",
        @"csoetadi@gmail.com",
        @"brennascholte@gmail.com",
        @"romanigrace@outlook.com",
        @"astonok1@hotmail.com",
        @"sachairinixon@gmail.com",
        @"danontaylor@gmail.com",
        @"vj5gz5ttfr@privaterelay.appleid.com",
        @"tasfia380@gmail.com",
        @"daltonttucker@gmail.com",
        @"ct8nggxfyd@privaterelay.appleid.com",
        @"n6rk8qnzm6@privaterelay.appleid.com",
        @"qb2w7755qr@privaterelay.appleid.com",
        @"spineraptor@gmail.com",
        @"vestina812@gmail.com",
        @"madison.gilkey@gmail.com",
        @"whht9q4qgd@privaterelay.appleid.com",
        @"myspamisa@gmail.com",
        
    ];
    
    [self GetDataMixPanelIDsThatAreDifferent:sendingEmailsToArr currentArr:alreadySentEmailsToArr Quotations:NO];
    
}

#pragma mark -
#pragma mark
#pragma mark
#pragma mark Temp Methods
#pragma mark
#pragma mark
#pragma mark -

-(void)AddSuggestedTasksToAlgolia:(NSString *)collection {
    
    //    NSString *localCurrencySymbol = [[[GeneralObject alloc] init] GenerateLocalCurrencySymbol];
    
    NSArray *dict = @[@{@"ItemName" : @"🛒 Shopping", @"ItemAssignedToNewHomeMembers" : @"Yes", @"ItemRepeats" : @"Monthly", @"ItemListItems" : @{}, @"ItemDays" : @"Any Day", @"ItemTime" : @"Any Time", @"ItemTakeTurns" : @"No", @"ItemPriority" : @"No Priority", @"ItemTaskList" : @"Groceries", @"ItemSuggestedID" : @"175"},
                      @{@"ItemName" : @"🏡 Household Supplies", @"ItemAssignedToNewHomeMembers" : @"Yes", @"ItemRepeats" : @"Monthly", @"ItemListItems" : @{}, @"ItemDays" : @"Any Day", @"ItemTime" : @"Any Time", @"ItemTakeTurns" : @"No", @"ItemPriority" : @"No Priority", @"ItemTaskList" : @"Household Supplies", @"ItemSuggestedID" : @"176"},
                      @{@"ItemName" : @"👕 Clothes", @"ItemAssignedToNewHomeMembers" : @"Yes", @"ItemRepeats" : @"Monthly", @"ItemListItems" : @{}, @"ItemDays" : @"Any Day", @"ItemTime" : @"Any Time", @"ItemTakeTurns" : @"No", @"ItemPriority" : @"No Priority", @"ItemTaskList" : @"Clothes", @"ItemSuggestedID" : @"177"},
                      @{@"ItemName" : @"📝 To-Do", @"ItemAssignedToNewHomeMembers" : @"Yes", @"ItemRepeats" : @"Monthly", @"ItemListItems" : @{}, @"ItemDays" : @"Any Day", @"ItemTime" : @"Any Time", @"ItemTakeTurns" : @"No", @"ItemPriority" : @"No Priority", @"ItemTaskList" : @"To-Do", @"ItemSuggestedID" : @"178"},
                      
                      @{@"ItemName" : @"📖 School Supplies", @"ItemAssignedToNewHomeMembers" : @"Yes", @"ItemRepeats" : @"Monthly", @"ItemListItems" : @{}, @"ItemDays" : @"Any Day", @"ItemTime" : @"Any Time", @"ItemTakeTurns" : @"No", @"ItemPriority" : @"No Priority", @"ItemTaskList" : @"School Supplies", @"ItemSuggestedID" : @"179"}];
    
    for (int i=0; i<[dict count]; i++) {
        
        NSDictionary *dictToUse = dict[i];
        
        NSString * ALGOLIA_APP_ID = @"3VZ11H3TM1";
        NSString * ALGOLIA_USER_INDEX_NAME = [NSString stringWithFormat:@"System_%@", collection];
        NSString * ALGOLIA_ADMIN_API_KEY = @"37558fa21fb4266d0f5213af41a23a7a";
        
        Client *apiClient = [[Client alloc] initWithAppID:ALGOLIA_APP_ID apiKey:ALGOLIA_ADMIN_API_KEY];
        
        Index *algoliaIndex = [apiClient indexWithName:ALGOLIA_USER_INDEX_NAME];
        
        [algoliaIndex addObject:dictToUse withID:[NSString stringWithFormat:@"%d", i] completionHandler:^(NSDictionary<NSString *,id> * _Nullable test, NSError * _Nullable error) {
            
        }];
        
    }
    
}

-(void)DeleteSuggestedTasksInAlgolia:(NSString *)collection {
    
    NSString* ALGOLIA_APP_ID = @"3VZ11H3TM1";
    NSString* ALGOLIA_USER_INDEX_NAME = [NSString stringWithFormat:@"System_%@", collection];
    NSString* ALGOLIA_ADMIN_API_KEY = @"37558fa21fb4266d0f5213af41a23a7a";
    
    
    Client *apiClient = [[Client alloc] initWithAppID:ALGOLIA_APP_ID apiKey:ALGOLIA_ADMIN_API_KEY];
    
    Index *movieIndex;
    NSString *queryAttribute;
    
    movieIndex = [apiClient indexWithName:ALGOLIA_USER_INDEX_NAME];
    queryAttribute = @"Name";
    
    
    
    Query *query = [[Query alloc] init];
    query.query = @"";
    query.attributesToRetrieve = @[@"Name"];
    query.attributesToHighlight = @[queryAttribute];
    
    [movieIndex search:query completionHandler:^(NSDictionary<NSString *,id> * string, NSError * error) {
        
        if ([string valueForKeyPath:@"hits.objectID"] && (NSArray *)[string valueForKeyPath:@"hits.objectID"]) {
            
            for (NSString *object in (NSArray *)[string valueForKeyPath:@"hits.objectID"]) {
                
                [movieIndex deleteObjectWithID:object completionHandler:^(NSDictionary<NSString *,id> * _Nullable test, NSError * _Nullable error) {
               
                }];
                
            }
            
        }
        
    }];
    
}

@end
